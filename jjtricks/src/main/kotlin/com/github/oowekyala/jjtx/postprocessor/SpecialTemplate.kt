package com.github.oowekyala.jjtx.postprocessor

import com.github.oowekyala.ijcc.lang.model.addNodePackage
import com.github.oowekyala.ijcc.lang.model.addParserPackage
import com.github.oowekyala.ijcc.lang.model.parserSimpleName
import com.github.oowekyala.jjtx.JjtxContext
import com.github.oowekyala.jjtx.templates.vbeans.ClassVBean


val JjtxContext.tokenClass: ClassVBean
    get() = ClassVBean(
        jjtxOptsModel.javaccGen.supportFiles["token"]?.genFqcn
            ?: jjtxOptsModel.addParserPackage("Token")
    )

/**
 * Special templates are the support files necessary for the parser to function.
 *
 *
 */
enum class SpecialTemplate(val id: String, private val defaultClassSimpleName: String = id.capitalize()) {

    // Those are all generated by JavaCC, but can be replaced

    TOKEN("token"),
    TOKEN_MANAGER("tokenManager"),
    CHAR_STREAM("charStream"),
    /**
     * IDs of tokens, images of string tokens.
     */
    TOKEN_IDS("tokenIds") {
        override fun defaultLocation(ctx: JjtxContext): ClassVBean =
            ClassVBean(ctx.jjtxOptsModel.addParserPackage(ctx.jjtxOptsModel.parserSimpleName + "Constants"))
    },
    // This one is added by jjtricks
    TOKEN_FACTORY("tokenFactory"),


    LEX_EXCEPTION("lexException"),
    PARSE_EXCEPTION("parseException"),

    // special templates relevant to tree building
    // Those are generated by VTL templating

    TREE_BUILDER("treeBuilder") {
        override fun defaultLocation(ctx: JjtxContext): ClassVBean =
            ClassVBean(ctx.jjtxOptsModel.addNodePackage("JJT" + ctx.jjtxOptsModel.parserSimpleName + "State"))
    },
    NODE_MANIPULATOR("manipulator") {
        override fun defaultLocation(ctx: JjtxContext): ClassVBean =
            ClassVBean(ctx.jjtxOptsModel.addNodePackage("NodeManipulator"))
    },
    NODE_FACTORY("nodeFactory") {
        override fun defaultLocation(ctx: JjtxContext): ClassVBean =
            ClassVBean(ctx.jjtxOptsModel.addNodePackage(ctx.grammarName + "NodeFactory"))
    },
    NODE_IDS("nodeIds") {
        override fun defaultLocation(ctx: JjtxContext): ClassVBean =
            ClassVBean(ctx.jjtxOptsModel.addNodePackage(ctx.jjtxOptsModel.parserSimpleName + "TreeConstants"))
    },
    ;


    open fun defaultLocation(ctx: JjtxContext) =
        ClassVBean(ctx.jjtxOptsModel.addParserPackage(defaultClassSimpleName))


    companion object {

        fun findById(id: String): SpecialTemplate? = values().firstOrNull { it.id == id }

    }


}
