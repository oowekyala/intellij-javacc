# This is the source file for the json file sitting next to it
# DO EDIT THIS FILE AND NOT THE JSON ONE
# The json file is generated and edits will be lost.

"$schema": "http://json-schema.org/draft-07/schema#"
"$id": "http://com.github.oowekyala/jjtricks/jjtopts"
title: "JJTricks configuration file"
type: "object"
definitions:

  formatter:
    type: "string"
    enum:
      - "java"
      - "none"


  fileGenTask:
    type: "object"
    description: >-
      Describes a file generation task, ie the evaluation of a velocity template. The velocity
      context of a generation task depends on the task. For fileGen tasks, this is the global
      context of the run. For node generation schemes, each task has additionally the NodeVBean
      under the "node" key.

    additionalProperties: false
    properties:
      templateFile:
        type: "string"
        description: "Path to a VTL template file, which contains the template"

      template:
        "$ref": "#/definitions/vtl"
        description: "Text of the template, overrides \u0027templateFile\u0027 if specified"

      formatter:
        "$ref": "#/definitions/formatter"
        description: "A formatter to apply as post-processing."
        default: "java"

      genClassName:
        "$ref": "#/definitions/vtl"
        description: >-
          Velocity template that evaluates to the fully qualified name of the generated
          Java file. This name determines the path where the generated class will be placed
          in the output root.

      context:
        type: "object"
        additionalProperties: true
        description: "Additional bindings that will be added to the Velocity context of the template"



  vtl:
    type: "string"
    description: "A string that will be interpreted as a Velocity template"

  javaccBuilderConfig:
    type: "object"
    properties:
      profile:
        type: "string"
        description: "A string ID to select a generation profile, used to filter applicable options."

  vanillaJjtreeOpts:
    type: object
    additionalProperties:
      "$ref": "#/definitions/fileGenTask"

    description: >-
      List of file generations corresponding to the gen:javacc task.
#      Configuration of the compatibility JJTree builder. Output of this profile
#      closely resembles JJTree output, but can be tweaked with the bindings of
#      this object. Default values match most closely JJTree's behaviour.
#
#    properties:
#      implementNodeConstants:
#        type: "boolean"
#        default: true
#        description: >-
#          If true, the constants representing node ids are generated
#          in an interface which the parser implements. This is a code smell, but
#          it's what JJTree does. When disabled, constants are generated in a
#          final class and an import statement is added to the parser file instead.
#      forceCheckedExceptionsDeclaration:
#        type: "boolean"
#        default: true
#        description: >-
#          If true, the generated parser will assert that any checked exceptions caught
#          in parser methods are declared in `throws` clauses of productions. This makes
#          the parser fail at runtime with a ClassCastException if you haven't declared
#          a checked exception. This is what JJTree does by default, but you can disable
#          it since it obfuscates the .jj file, and may be unnecessary.

  nodeGenerationTask:
    anyOf:
      - "$ref": "#/definitions/fileGenTask"
      - type: "array"
        items:
          "$ref": "#/definitions/fileGenTask"
      - type: "null"
        description: "If no value is present, the matching nodes will apply to the next set of generation tasks"

  singleNodeMatcher:
    anyOf:
      - type: "string"
        pattern: "\\w+"
        description: "Expands to the nodePackage + nodePrefix + name"

      - type: "string"
        pattern: "%\\w+"
        description: >-
          Expands to nodePackage + name following the '%'. The
          difference is that the nodePrefix is not applied."

      - type: "string"
        pattern: "\\w+(\\.\\w+)+"
        description: >-
          Qualified name (there is a dot in it), which is not expanded and taken as-is.

  regexNodeMatcher:
    type: "string"
    pattern: "r:.*"
    description: >-
      The part after the "r:" is interpreted as a regex. This pattern expands to all the
      nodes whose name match the regex.

  templateNodeMatcher:
    type: "string"
    pattern: "v:.*"
    description: >-
      The part after the "v:" is interpreted as a VTL template. It matches
      a node if it evaluates to true when evaluated against a node context.

  nodeGenSelector:
    type: "string"
    anyOf:
      - "$ref": "#/definitions/childNodeMatcher"
      - "$ref": "#/definitions/templateNodeMatcher"

  childNodeMatcher:
    anyOf:
      - "$ref": "#/definitions/singleNodeMatcher"
      - "$ref": "#/definitions/regexNodeMatcher"

  typeHierarchyNode:
    anyOf:

      - "$ref": "#/definitions/singleNodeMatcher"
        description: "Selects the name of this node. This node won't have subtypes."

      - type: "object"
        properties:
          name:
            "$ref": "#/definitions/singleNodeMatcher"
            description: "Selects the name of this node."

          subtypes:
            description: "Selects the direct subtypes of this node."
            anyOf:
              - "$ref": "#/definitions/childNodeMatcher"

              - type: "array"
                items:
                  "$ref": "#/definitions/typeHierarchyNode"

        required:
          - "name"

additionalProperties: false
properties:
  jjtx:
    type: "object"
    additionalProperties: false
    properties:
      nodePrefix:
        description: "Prefix prepended to the node name. Defaults to the JJTree key NODE_PREFIX, or its default of \"AST\""
        type: "string"
        pattern: "[\\w_]*"

      nodePackage:
        type: "string"
        description: >-
          Package of the node classes. Defaults to the JJTree key NODE_PACKAGE,
          or its default, the package of the parser.

      trackTokens:
        type: boolean
        description: >-
          If true, nodes will be provided with their first and last tokens using the
          node manipulator. Defaults to the JJTree key TRACK_TOKENS, or its default
          of false.

      templateContext:
        type: "object"
        description: >-
          Additional bindings for a Velocity context that will be shared by all
          template executions (gen:visitors, gen:nodes)

      typeHierarchy:
        "$ref": "#/definitions/typeHierarchyNode"
        description: >-
          Description of the subtyping relation between generated node types. This
          is useful when your hierarchy is not trivial and you want to e.g. generate
          visitors with a delegation mechanism

      javaccGen:
        "$ref": "#/definitions/vanillaJjtreeOpts"
        description: "Configuration of JavaCC grammar generation."

      nodeGen:
        description: >-
          Map of node selectors to node generation scheme. Each node of
          the grammar is matched against the selectors from top to bottom
          until a match is found. The matched selector specifies which file
          generation tasks are executed for this node. Those generation tasks
          will have the NodeVBean under the 'node' key.

        propertyNames:
          "$ref": "#/definitions/nodeGenSelector"

        additionalProperties:
          "$ref": "#/definitions/nodeGenerationTask"

      commonGenExcludes:
        type: "array"
        description: "IDs of excluded tasks, perhaps inherited from the parent config file."
        items:
          type: "string"

      commonGen:
        type: "object"
        description: >-
          Map of ids to file generation tasks. Those tasks will be executed with the global context of the run,
          i.e. with no specific NodeVBean
        additionalProperties:
          "$ref": "#/definitions/fileGenTask"
        
      
    
  

