{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://raw.githubusercontent.com/oowekyala/intellij-javacc/jjtricksjjtricks.schema.json",
  "title": "Schema of jjopts configuration files for JJTricks",
  "type": "object",
  "required": [
    "jjtx"
  ],
  "definitions": {
    "formatter": {
      "type": "string",
      "pattern": "java|none"
    },
    "visitorGenTask": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "execute": {
          "type": "boolean"
        },
        "templateFile": {
          "type": "string"
        },
        "formatter": {
          "$ref": "#/definitions/formatter"
        },
        "genClassName": {
          "type": "string"
        },
        "context": {
          "type": "object"
        }
      }
    },
    "nodeGenTask": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "formatter": {
          "$ref": "#/definitions/formatter"
        },
        "genClassName": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "templateFile": {
          "type": "string"
        },
        "context": {
          "type": "object"
        }
      }
    },
    "vanillaJjtreeOpts": {
      "type": "object",
      "description": "Options for the JJTree builder",
      "additionalProperties": false,
      "properties": {
        "fixJjtThisConditionScope": {
          "type": "boolean",
          "description": "If set to true, jjtThis is available in the closing condition of its own node scope. In vanilla JJTree, #Node(jjtThis.something()) isn't compiled correctly.",
          "default": true
        },
        "implementNodeConstants": {
          "type": "boolean",
          "default": true
        },
        "setTokensBeforeHooks": {
          "type": "boolean",
          "default": false
        },
        "descriptiveVariableNames": {
          "type": "boolean",
          "default": true
        },
        "forceCheckedExceptionsDeclaration": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "nodeGenerationScheme": {
      "anyOf": [
        {
          "$ref": "#/definitions/nodeGenTask"
        },
        {
          "description": "If no value is present, the matching nodes will apply to the next set of generation tasks",
          "type": "null"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodeGenTask"
          }
        }
      ]
    },
    "typeHierarchyNode": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "minProperties": 1,
          "maxProperties": 1,
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/typeHierarchyNode"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/typeHierarchyNode"
                }
              }
            ]
          }
        }
      ]
    }
  },

  "additionalProperties": false,
  "properties": {
    "jjtx": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "nodePrefix": {
          "description": "Prefix prepended to the node name. Defaults to the JJTree key NODE_PREFIX, or its default of \"AST\"",
          ",",
          "type": "string",
          "pattern": "\\w+"
        },
        "nodePackage": {
          "description": "Package of the node classes",
          "type": "string"
        },
        "templateContext": {
          "description": "Additional bindings for a Velocity context that will be shared by all template executions (gen:visitors, gen:nodes)",
          "type": "object",
          "default": {}
        },
        "typeHierarchy": {
          "description": "Description of the subtyping relation between generated node types. This is useful when your hierarchy is not trivial and you want to e.g. generate visitors with a delegation mechanism",
          "$ref": "#/definitions/typeHierarchyNode"
        },
        "javaccGen": {
          "description": "Configuration of JavaCC grammar generation.",
          "$ref": "#/definitions/vanillaJjtreeOpts"
        },
        "activeGenScheme": {
          "type": "string"
        },
        "nodeGenerationSchemes": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Map of ids to node generation scheme.",
            "additionalProperties": {
              "$ref": "#/definitions/nodeGenerationScheme"
            }
          }
        },

        "visitors": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/visitorGenTask"
          }
        }
      }
    }
  }
}
