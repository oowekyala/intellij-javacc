# Root file at the top of option file chains
# The default visitors can be referred to by id and completed
# Template variables may be overridden

# Note: this file should not be used to set things that can be overridden
# in the JJTree file.

jjtx:
  templateContext:
    visitorMethodComment: |
      /**
       * Visits {@linkplain $node.classSimpleName $node.name}.
         #if ( $node.superNode )
       * Delegates to {@link $H#methodAnchor($node.superNode)}
       * if unimplemented.
       *
        #if ( !$node.subNodes.empty )
       * This method is delegated to by:
       * <ul>
          #foreach($sub in $node.subNodes)
       *   <li>{@link $H#methodAnchor($sub)}</li>
          #end
       * </ul>
        #end
        #else
       *   This is the root of the delegation chain.
        #end
       *
       */

  visitors:
    defaultJjtreeVisitor:
      templateFile: "/jjtx/templates/Visitor.java.vm"
      formatter: "java"
      genClassName: "${grammar.nodePackage}.${grammar.name}ParserVisitor"
      execute: false
      context:
        methodTemplate: |
          #macro( methodAnchor $n)
          visit($n.classSimpleName,Object)
          #end

          #evaluate($global.visitorMethodComment)
          default Object visit($node.classSimpleName node, Object data) {
              #if ($node.superNode)
              return visit(($node.superNode.classSimpleName) node, data);
              #else
              return node.childrenAccept(this, data);
              #end
          }

  nodeTemplates:
    # Match predicates in order
    # v:X template X with node generation context
    "v: $node == $grammar.rootNode":
      - templateFile: "/jjtx/templates/RootInterface.java.vm"
        formatter: "java"
      - templateFile: "/jjtx/templates/NodeRoot.java.vm"
        formatter: "java"
    "v: !$node.subnodes.empty":
      - templateFile: "/jjtx/templates/NodeInterface.java.vm"
        genClassName: "$node.classQualifiedName"
        formatter: "java"
      - templateFile: "/jjtx/templates/NodeAbstractClass.java.vm"
        genClassName: "${grammar.nodePackage}.Abstract${node.name}"
        formatter: "java"
    "r:.*":
      - templateFile: "/jjtx/templates/Node.java.vm"
        formatter: "java"

    parameterlessVisitor:
      templateFile: "/jjtx/templates/Visitor.java.vm"
      execute: false
      genClassName: "${grammar.nodePackage}.${grammar.name}Visitor"
      context:
        methodTemplate: |
          #macro( methodAnchor $node)
          visit($node.classSimpleName)
          #end

          #evaluate($global.visitorMethodComment)
          default void visit($node.classSimpleName node) {
              #if ($node.superNode)
              visit(($node.superNode.classSimpleName) node);
              #else
              node.childrenAccept(this, data);
              #end
          }
