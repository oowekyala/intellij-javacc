# Root file at the top of option file chains

jjtx:
  templateContext:

    javaVersion: 8

    # Set this e.g. to add a copyright header.
    copyrightHeader: |+
      /* Generated by JJTricks on $timestamp -- Not intended for manual editing. */


    packageDecl: |
      #if( "$!thisClass.package" != "" )
      package $thisClass.package;
      #end

    # This is the default include at the top of support file templates
    # It defines a few variables to reference the names of required classes
    fileHeader: |+
      #evaluate ( $!copyrightHeader )
      #evaluate ( $!packageDecl )
      #evaluate ( $!versionSpecificDecls )

      #set ( $topNode = $grammar.rootNode.klass.simpleName )
      #set ( $treeBuilder =  $run.javaccGen.support.treeBuilder.class.simpleName )
      #set ( $manipulator = $run.javaccGen.support.manipulator.class.simpleName )

      #if ( $run.javaccGen.support.token.class )
         #set ( $token = $run.javaccGen.support.token.class.simpleName )
         import $run.javaccGen.support.token.class.qualifiedName;

      #else
        ## Default JavaCC class
        #set ( $token = "Token")
        import ${grammar.parser.class.addPackage("Token")};
      #end

      import $grammar.rootNode.klass.qualifiedName;
      import $run.javaccGen.support.treeBuilder.class.qualifiedName;
      import $run.javaccGen.support.manipulator.class.qualifiedName;


    versionSpecificDecls: |
      ## Modifier map
      #set ( $mods = {} )

      #if ( $javaVersion >= 5 )
          #set ( $mods.override = "@java.lang.Override" )
          #set ( $mods.deprecated = "@java.lang.Deprecated" )
      #end

      #if ( $javaVersion >= 8 )
          #set ( $mods.default = "default" )
      #end

  javaccGen:
    supportFiles:
      manipulator:
        genClassName: "${grammar.nodePackage}.NodeManipulator"
        formatter: java
        templateFile: "/jjtx/templates/ManipulatorInterface.java.vm"
        context:
          modifiers: "final"

      treeBuilder:
        genClassName: "${grammar.nodePackage}.JJT${grammar.parser.class.simpleName}State"
        formatter: java
        templateFile: "/jjtx/templates/TreeBuilder.java.vm"
        context:
          # Default calls back to JJTree hooks, override this variable to change behaviour
          # You can eg use a singleton, a constructor, whatever
          # You can also add a JjtreeManipulator.java.vm class to generate a separate class
          # and then override individual methods
          manipulatorCreator: |
            new ${manipulator}() {
                $!mods.override
                public void setFirstToken($treeBuilder builder, $topNode node, $token token){
                    node.jjtSetFirstToken(token);
                }

                $!mods.override
                public void setLastToken($treeBuilder builder, $topNode node, $token token){
                    node.jjtSetLastToken(token);
                }

                $!mods.override
                public void onOpen($treeBuilder builder, $topNode node) {
                    node.jjtOpen();
                }

                $!mods.override
                public void onPush($treeBuilder builder, $topNode node) {
                    node.jjtClose();
                }

                $!mods.override
                public void addChild($treeBuilder builder, $topNode parent, $topNode child, int index) {
                    child.jjtSetParent(child);
                    parent.jjtAddChild(child, index);
                }
            }

      treeConstants:
        genClassName: "${grammar.nodePackage}.${grammar.parser.class.simpleName}TreeConstants"
        formatter: java
        templateFile: "/jjtx/templates/VanillaJjtreeConstants.java.vm"
