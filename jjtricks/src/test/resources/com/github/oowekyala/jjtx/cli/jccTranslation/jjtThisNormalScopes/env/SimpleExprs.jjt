
options {
    MULTI = true;
}

PARSER_BEGIN(SimpleExprParser)

    package com.jjtx.exprs;

    /**
     *  This is my parser declaration
     */
    public class SimpleExprParser {

    }

PARSER_END(SimpleExprParser)

// Some token declarations
<DEFAULT>
TOKEN :{
  < PLUS: "+" >
| < MINUS: "-" >
| < NULL: "null" >
| < INTEGER: ["+",  "-"] <DIGITS> >
| < #DIGITS: (["0"-"9"])+ >
}


void Expression() #void:
{
    jjtThis.setImage("Expr"); // Do it
}
{
      BinaryExpression()
    | <NULL>   #NullLiteral
}

ASTBinaryExpr BinaryExpression() #BinaryExpr(>1):
{
   jjtThis.setImage("Expr"); // Do it
}
{
    UnaryExpr() {jjtThis.foo();} [ ( "+" | "-" ) UnaryExpr(jjtThis) ]
    { return jjtThis; }
}

void UnaryExpr() #void: {}
{
  ("(" Expression() ")" {jjtThisManRocks.foo();} {jjtThis.foo();} ) #ParenthesizedExpr {jjtThis.foo();} | Integer()
}

void Integer() #IntegerLiteral: {}
{
  <INTEGER>
}
