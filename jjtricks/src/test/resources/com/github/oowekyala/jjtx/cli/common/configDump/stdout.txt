# Fully resolved JJTricks configuration
# Config file chain: DummyExpr.jjtopts.yaml -> /jjtx/Root.jjtopts.yaml -> DummyExpr.jjt
jjtx:
  commonGen:
    defaultJjtreeVisitor:
      context:
        acceptMethod: |
          @Override
          public Object jjtAccept($visitor.class.qualifiedName visitor, Object data) {
             return visitor.visit(this, data);
          }
        methodTemplate: |
          #macro( methodAnchor $n)
          visit($n.class.simpleName,Object)
          #end

          #evaluate($visitorMethodComment)
          default Object visit($node.class.simpleName node, Object data) {
              #if ($node.superNode)
              return visit(($node.superNode.class.simpleName) node, data);
              #else
              return node.childrenAccept(this, data);
              #end
          }
        visitorMethodComment: |
          /**
           * Visits {@linkplain $node.class.simpleName $node.name}.
             #if ( $node.superNode )
           * Delegates to {@link $H#methodAnchor($node.superNode)}
           * if unimplemented.
           *
            #if ( !$node.subNodes.empty )
           * This method is delegated to by:
           * <ul>
              #foreach($sub in $node.subNodes)
           *   <li>{@link $H#methodAnchor($sub)}</li>
              #end
           * </ul>
            #end
            #else
           *   This is the root of the delegation chain.
            #end
           *
           */
      formatter: java
      genClassName: org.exprs.ast.DummyExprParserVisitor
      templateFile: foo/bar/VisitorTest.vm
    parameterlessVisitor:
      context:
        acceptMethod: |
          @Override
          public void jjtAccept($visitor.class.qualifiedName visitor) {
             visitor.visit(this);
          }
        methodTemplate: |
          #macro( methodAnchor $node)
          visit($node.class.simpleName)
          #end

          #evaluate($visitorMethodComment)
          default void visit($node.class.simpleName node) {
              #if ($node.superNode)
              visit(($node.superNode.class.simpleName) node);
              #else
              node.childrenAccept(this, data);
              #end
          }
        visitorMethodComment: |
          /**
           * Visits {@linkplain $node.class.simpleName $node.name}.
             #if ( $node.superNode )
           * Delegates to {@link $H#methodAnchor($node.superNode)}
           * if unimplemented.
           *
            #if ( !$node.subNodes.empty )
           * This method is delegated to by:
           * <ul>
              #foreach($sub in $node.subNodes)
           *   <li>{@link $H#methodAnchor($sub)}</li>
              #end
           * </ul>
            #end
            #else
           *   This is the root of the delegation chain.
            #end
           *
           */
      formatter: java
      genClassName: DummyExprVisitorX
      templateFile: foo/bar/VisitorTest.vm
  javaccGen:
    descriptiveVariableNames: 'true'
    fixJjtThisConditionScope: 'true'
    forceCheckedExceptionsDeclaration: 'true'
    implementNodeConstants: 'true'
    setTokensBeforeHooks: 'false'
    supportFiles:
      manipulator:
        context: {}
        formatter: java
        genClassName: org.exprs.ast.NodeManipulator
        templateFile: /jjtx/templates/DefaultManipulator.java.vm
      treeBuilder:
        context: {}
        formatter: java
        genClassName: org.exprs.ast.JJTDummyExprParserState
        templateFile: /jjtx/templates/TreeBuilder.java.vm
      treeConstants:
        context: {}
        formatter: java
        genClassName: org.exprs.ast.DummyExprParserTreeConstants
        templateFile: /jjtx/templates/VanillaJjtreeConstants.java.vm
  nodePackage: org.exprs.ast
  nodePrefix: Ex
  templateContext:
    fileHeader: |+
      /* Generated by JJTricks on $timestamp -- Not intended for manual editing. */


    packageDecl: |
      #if( "$!thisClass.package" != "" )
      package $thisClass.package;
      #end
  typeHierarchy:
    name: org.exprs.ast.MyNodeParent
    subtypes:
    - name: org.exprs.ast.ExExpression
      subtypes:
      - org.exprs.ast.ExBinaryExpression
      - name: org.exprs.ast.ExLiteral
        subtypes:
        - org.exprs.ast.ExNullLiteral
        - org.exprs.ast.ExIntegerLiteral

