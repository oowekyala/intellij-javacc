/* Generated by JJTricks on Thu Jan 01 01:00:00 CET 1970 -- Not intended for manual editing. */

package org.exprs.ast;

import org.exprs.ast.impl.MyToken;

import org.exprs.ast.MyNodeParent;
import org.exprs.ast.JJTSimpleExprParserState;
import org.exprs.ast.NodeManipulator;
import org.exprs.ast.SimpleExprParserTreeConstants;
import org.exprs.ast.SimpleExprsNodeFactory;

import com.jjtx.exprs.SimpleExprParser;

/**
 * This class is responsible for creating new nodes from their ID. The construction method is called
 * by the parser each time a node scope is opened.
 */
final class SimpleExprsNodeFactory {

  private SimpleExprsNodeFactory() {
    // static class
  }

  public static MyNodeParent createNode(int id) {
    switch (id) {
      case SimpleExprParserTreeConstants.JJTPARENTHESIZEDEXPR:
        return new ExParenthesizedExpr(id);
      case SimpleExprParserTreeConstants.JJTBINARYEXPR:
        return new ExBinaryExpr(id);
      case SimpleExprParserTreeConstants.JJTNULLLITERAL:
        return new ExNullLiteral(id);
      case SimpleExprParserTreeConstants.JJTINTEGERLITERAL:
        return new ExIntegerLiteral(id);
      case SimpleExprParserTreeConstants.JJTMYNODEPARENT:
      case SimpleExprParserTreeConstants.JJTEXPRESSION:
      case SimpleExprParserTreeConstants.JJTLITERAL:
        // JJTricks doesn't know whether it's an interface or anything...
        // The parser will never attempt to create nodes with those IDs though.
        throw new IllegalArgumentException(
            "Node "
                + id
                + " doesn't correspond to a production and can't be built by this default factory");
      default:
        throw new IllegalArgumentException("Unknown node id " + id);
    }
  }
}
