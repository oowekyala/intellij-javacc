# Root file at the top of option file chains
# The default visitors can be referred to by id and completed
# Template variables may be overridden

# Note: this file should not be used to set things that can be overridden
# in the JJTree file.

jjtx:
  templateContext:
    visitorMethodComment: |
      /**
       * Visits {@linkplain $node.class.simpleName $node.name}.
         #if ( $node.superNode )
       * Delegates to {@link $H#methodAnchor($node.superNode)}
       * if unimplemented.
       *
        #if ( !$node.subNodes.empty )
       * This method is delegated to by:
       * <ul>
          #foreach($sub in $node.subNodes)
       *   <li>{@link $H#methodAnchor($sub)}</li>
          #end
       * </ul>
        #end
        #else
       *   This is the root of the delegation chain.
        #end
       *
       */

  visitors:
    defaultJjtreeVisitor:
      templateFile: "/jjtx/templates/Visitor.java.vm"
      formatter: "java"
      genClassName: "${grammar.nodePackage}.${grammar.name}ParserVisitor"
      execute: true
      context:
        methodTemplate: |
          #macro( methodAnchor $n)
          visit($n.class.simpleName,Object)
          #end

          #evaluate($global.visitorMethodComment)
          default Object visit($node.class.simpleName node, Object data) {
              #if ($node.superNode)
              return visit(($node.superNode.class.simpleName) node, data);
              #else
              return node.childrenAccept(this, data);
              #end
          }
        acceptMethod: |
          @Override
          public Object jjtAccept($visitor.class.qualifiedName visitor, Object data) {
             return visitor.visit(this, data);
          }

    parameterlessVisitor:
      templateFile: "/jjtx/templates/Visitor.java.vm"
      execute: false
      genClassName: "${grammar.nodePackage}.${grammar.name}Visitor"
      context:
        methodTemplate: |
          #macro( methodAnchor $node)
          visit($node.class.simpleName)
          #end

          #evaluate($global.visitorMethodComment)
          default void visit($node.class.simpleName node) {
              #if ($node.superNode)
              visit(($node.superNode.class.simpleName) node);
              #else
              node.childrenAccept(this, data);
              #end
          }
        acceptMethod: |
          @Override
          public void jjtAccept($visitor.class.qualifiedName visitor) {
             visitor.visit(this);
          }

