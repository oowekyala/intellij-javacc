/**
 * Generated By:JavaCC: Do not edit this line. SimpleExprParserTokenManager.java
 */
package com.jjtx.exprs;


import java.io.IOException;
import java.io.PrintStream;
import org.exprs.ast.*;
import org.exprs.ast.SimpleExprParserTreeConstants;
import org.exprs.ast.SimpleExprsNodeFactory;
import org.exprs.ast.token.MyToken;

import static org.exprs.ast.SimpleExprParserTreeConstants.*;


/**
 * Token Manager.
 */
class SimpleExprParserTokenManager implements SimpleExprParserConstants {
    /**
     * Debug output.
     */
    public PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0 :
                if ((active0 & 6L) != 0L)
                    return 1;

                return -1;
            default :
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), (pos + 1));
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 40 :
                return jjStopAtPos(0, 6);
            case 41 :
                return jjStopAtPos(0, 7);
            case 43 :
                return jjStartNfaWithStates_0(0, 1, 1);
            case 45 :
                return jjStartNfaWithStates_0(0, 2, 1);
            case 110 :
                return jjMoveStringLiteralDfa1_0(8L);
            default :
                return jjMoveNfa_0(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 117 :
                return jjMoveStringLiteralDfa2_0(active0, 8L);
            default :
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(0, old0);

        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 108 :
                return jjMoveStringLiteralDfa3_0(active0, 8L);
            default :
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(1, old0);

        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 108 :
                if ((active0 & 8L) != 0L)
                    return jjStopAtPos(3, 3);

                break;
            default :
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, (pos + 1));
    }

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 2;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 2147483647;
        for (; ;) {
            if ((++(jjround)) == 2147483647)
                ReInitRounds();

            if ((curChar) < 64) {
                long l = 1L << (curChar);
                do {
                    switch (jjstateSet[(--i)]) {
                        case 0 :
                            if ((43980465111040L & l) != 0L)
                                jjCheckNAdd(1);

                            break;
                        case 1 :
                            if ((287948901175001088L & l) == 0L)
                                break;

                            kind = 4;
                            jjCheckNAdd(1);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt );
            } else
                if ((curChar) < 128) {
                    long l = 1L << ((curChar) & 63);
                    do {
                        switch (jjstateSet[(--i)]) {
                            default :
                                break;
                        }
                    } while (i != startsAt );
                } else {
                    int i2 = ((curChar) & 255) >> 6;
                    long l2 = 1L << ((curChar) & 63);
                    do {
                        switch (jjstateSet[(--i)]) {
                            default :
                                break;
                        }
                    } while (i != startsAt );
                }

            if (kind != 2147483647) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 2147483647;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
                return curPos;

            try {
                curChar = input_stream.readChar();
            } catch (IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = new int[]{  };

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = new String[]{ "", "+", "-", "null", null, null, "(", ")" };

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = new String[]{ "DEFAULT" };

    protected CharStream input_stream;

    private final int[] jjrounds = new int[2];

    private final int[] jjstateSet = new int[4];

    protected char curChar;

    /**
     * Constructor.
     */
    public SimpleExprParserTokenManager(CharStream stream) {
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public SimpleExprParserTokenManager(CharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(CharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = -2147483647;
        for (i = 2; (i--) > 0;)
            jjrounds[i] = -2147483648;

    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(CharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if ((lexState >= 1) || (lexState < 0))
            throw new TokenMgrError((("Error: Ignoring invalid lexical state : " + lexState) + ". State unchanged."), TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;

    }

    protected MyToken jjFillToken() {
        final MyToken t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = SimpleExprParserTokenManager.jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = MyToken.newToken(jjmatchedKind, curTokenImage);
        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;
        return t;
    }

    int curLexState = 0;

    int defaultLexState = 0;

    int jjnewStateCnt;

    int jjround;

    int jjmatchedPos;

    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public MyToken getNextToken() {
        MyToken matchedToken;
        int curPos = 0;
        EOFLoop : for (; ;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }
            jjmatchedKind = 2147483647;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if ((jjmatchedKind) != 2147483647) {
                if (((jjmatchedPos) + 1) < curPos)
                    input_stream.backup(((curPos - (jjmatchedPos)) - 1));

                matchedToken = jjFillToken();
                return matchedToken;
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (IOException e1) {
                EOFSeen = true;
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();
                if (((curChar) == '\n') || ((curChar) == '\r')) {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;

            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    private void jjCheckNAdd(int state) {
        if ((jjrounds[state]) != (jjround)) {
            jjstateSet[((jjnewStateCnt)++)] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[((jjnewStateCnt)++)] = SimpleExprParserTokenManager.jjnextStates[start];
        } while ((start++) != end );
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }
}