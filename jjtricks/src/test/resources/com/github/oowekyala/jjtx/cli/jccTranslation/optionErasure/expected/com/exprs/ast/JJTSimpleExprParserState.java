/*
 * Generated by JJTricks at Thu Jan 01 01:00:00 CET 1970
 * Not intended for manual editing.
 */
package com.exprs.ast;
import com.exprs.ast.MyNodeParent;
public class JJTSimpleExprParserState {
  private final java.util.Stack<MyNodeParent> nodes = new java.util.Stack<MyNodeParent>();
  private final java.util.Stack<Integer> marks = new java.util.Stack<Integer>();
  /** Number of nodes on the stack. */
  private int sp = 0;
  /** Index of the first child of this node. If equal to {@link #sp}, no children are pushed. */
  private int mk = 0;
  private boolean node_created;
  /**
   * Returns true if the current node was closed and pushed (in case it was conditional). Reset as
   * soon as another node scope is opened.
   */
  public boolean nodeCreated() {
    return node_created;
  }
  /**
   * Returns the root node of the AST. It only makes sense to call this after a successful parse.
   */
  public MyNodeParent rootNode() {
    return nodes.get(0);
  }
  /** Pushes a new node on to the stack. */
  public void pushNode(MyNodeParent n) {
    nodes.add(n);
    ++sp;
  }
  /* Returns the node on the top of the stack, and remove it from the
  stack.  */
  public MyNodeParent popNode() {
    if (--sp < mk) {
      mk = marks.remove(marks.size() - 1);
    }
    return nodes.remove(nodes.size() - 1);
  }
  /* Returns the node currently on the top of the stack. */
  public MyNodeParent peekNode() {
    return nodes.get(nodes.size() - 1);
  }
  /* Returns the number of children on the stack in the current node
  scope. */
  public int nodeArity() {
    return sp - mk;
  }
  public void clearNodeScope(MyNodeParent n) {
    while (sp > mk) {
      popNode();
    }
    mk = marks.remove(marks.size() - 1);
  }
  public void openNodeScope(MyNodeParent n) {
    marks.add(mk);
    mk = sp;
    n.jjtOpen();
  }
  /* A definite node is constructed from a specified number of
  children.  That number of nodes are popped from the stack and
  made the children of the definite node.  Then the definite node
  is pushed on to the stack. */
  public void closeNodeScope(MyNodeParent n, int num) {
    mk = marks.remove(marks.size() - 1);
    while (num-- > 0) {
      MyNodeParent c = popNode();
      c.jjtSetParent(n);
      n.jjtAddChild(c, num);
    }
    n.jjtClose();
    pushNode(n);
    node_created = true;
  }
  /**
   * A conditional node is constructed if its condition is true. All the nodes that have been pushed
   * since the node was opened are made children of the conditional node, which is then pushed on to
   * the stack. If the condition is false the node is not constructed and they are left on the
   * stack.
   */
  public void closeNodeScope(MyNodeParent n, boolean condition) {
    if (condition) {
      int a = nodeArity();
      mk = marks.remove(marks.size() - 1);
      while (a-- > 0) {
        MyNodeParent c = popNode();
        c.jjtSetParent(n);
        n.jjtAddChild(c, a);
      }
      n.jjtClose();
      pushNode(n);
      node_created = true;
    } else {
      mk = marks.remove(marks.size() - 1);
      node_created = false;
    }
  }
}