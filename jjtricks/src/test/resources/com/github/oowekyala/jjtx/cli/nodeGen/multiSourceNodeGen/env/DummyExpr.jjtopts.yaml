jjtx:
  commonGen:
    defaultJjtreeVisitor:
      <<: !from '/jjtx/Visitors.yaml#/java8/defaultJjtreeVisitor'
    parameterlessVisitor:
      <<: !from '/jjtx/Visitors.yaml#/java8/parameterlessVisitor'


  nodeGen:
    # Match predicates in order
    # v:X template X with node generation context
    "v: $node == $grammar.rootNode":
      - template: |
          #if( !$node.class.package.empty )
          package $node.class.package;
          #end
          public interface ${node.class.simpleName} {

          }

        formatter: "java"
    "v: !$node.subNodes.isEmpty()":
      - template: |
          #if( !$thisClass.package.empty )
          package $thisClass.package;
          #end
          public abstract class $thisClass.simpleName {

          }
        formatter: "java"
      - template: |
          #if( !$thisClass.package.empty )
          package $thisClass.package;
          #end
          public class $thisClass.simpleName extends ${node.class.qualifiedName} {

          }
        genClassName: "${node.class.package}.impl.${node.class.simpleName}Impl"
        formatter: "java"
    "r:.*":
      - templateFile: "/jjtx/templates/VanillaJjtreeNode.java.vm" # Whitespace trouble
        formatter: "java"

  nodePrefix: Ex
  nodePackage: "org.expr"
  typeHierarchy:
    name: "%Root"
    subtypes:
      - name: "Expression"
        subtypes:
          - "r:.*Expression"
          - name: Literal
            subtypes:
              - NullLiteral
              - IntegerLiteral
