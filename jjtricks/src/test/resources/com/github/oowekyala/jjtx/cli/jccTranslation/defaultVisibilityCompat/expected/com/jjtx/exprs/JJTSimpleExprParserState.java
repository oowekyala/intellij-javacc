/* Generated by JJTricks on Thu Jan 01 01:00:00 CET 1970 -- Not intended for manual editing. */

package com.jjtx.exprs;

import com.jjtx.exprs.Token;

import com.jjtx.exprs.ASTNode;
import com.jjtx.exprs.JJTSimpleExprParserState;
import com.jjtx.exprs.NodeManipulator;

import java.util.Stack;

/**
 * This class is responsible for building the tree as the parser operates. Nodes are kept on a stack
 * and linked together when closed. Hooks defined on a {@link NodeManipulator manipulator} instance
 * allow interacting with {@link ASTNode} without forcing it to have a specific interface.
 */
class JJTSimpleExprParserState {

  private final Stack<ASTNode> nodes = new Stack<ASTNode>();
  private final Stack<Integer> marks = new Stack<Integer>();
  // Override the context variable `manipulatorCreator` to change the initializer
  // expression. You can eg plug in a constructor call to one of your custom classes,
  // use a singleton, whatever.
  // The template /jjtx/templates/JjtreeManipulator.java.vm generates a class with
  // those default JJTree hooks, which you can override if you want.
  private final NodeManipulator manipulator =
      new NodeManipulator() {
        @java.lang.Override
        public void setFirstToken(JJTSimpleExprParserState builder, ASTNode node, Token token) {
          // use jjtx.trackTokens to insert a call to jjtSetFirstToken here
        }

        @java.lang.Override
        public void setLastToken(JJTSimpleExprParserState builder, ASTNode node, Token token) {
          // use jjtx.trackTokens to insert a call to jjtSetLastToken
        }

        @java.lang.Override
        public void onOpen(JJTSimpleExprParserState builder, ASTNode node) {
          node.jjtOpen();
        }

        @java.lang.Override
        public void onPush(JJTSimpleExprParserState builder, ASTNode node) {
          node.jjtClose();
        }

        @java.lang.Override
        public void addChild(
            JJTSimpleExprParserState builder, ASTNode parent, ASTNode child, int index) {
          child.jjtSetParent(child);
          parent.jjtAddChild(child, index);
        }
      };

  /**
   * Index of the first child of this node. If equal to {@link #nodes.size()}, no children are
   * pushed.
   */
  private int mk = 0;

  private boolean nodeCreated;

  /** Resets the state of this builder. */
  public void reset() {
    nodes.clear();
    marks.clear();
    mk = 0;
    nodeCreated = false;
  }

  /** Returns this builder's node manipulator. */
  public NodeManipulator getManipulator() {
    return manipulator;
  }

  /**
   * Returns true if the current node was closed and pushed (in case it was conditional). Reset as
   * soon as another node scope is opened.
   */
  public boolean nodeCreated() {
    return nodeCreated;
  }

  /**
   * Returns the root node of the AST. It only makes sense to call this after a successful parse.
   */
  public ASTNode rootNode() {
    return nodes.get(0);
  }

  /**
   * Increase the number of children of this node by one.
   *
   * @see #bumpArity(int)
   */
  public void bumpArity() {
    mk--;
  }

  /**
   * Increase the number of children of this node by [n]. If the node is closed, [n] additional node
   * from the stack will be popped and added to its children. This allows mimicking "left-recursive"
   * nodes, while keeping the parsing iterative.
   */
  public void bumpArity(int n) {
    mk -= n;
  }

  /** Pushes a new node on to the stack. */
  public void pushNode(ASTNode n) {
    nodes.push(n);
  }

  /** Returns the node on the top of the stack, and remove it from the stack. */
  public ASTNode popNode() {
    if (nodes.size() - 1 < mk) {
      mk = marks.pop();
    }
    return nodes.pop();
  }

  /** Returns the node currently on the top of the stack. */
  public ASTNode peekNode() {
    return nodes.peek();
  }

  /** Returns the nth node on the stack. {@code peekNode(0) === peekNode()}. */
  public ASTNode peekNode(int n) {
    return nodes.get(nodes.size() - n - 1);
  }

  /** Returns the number of children on the stack in the current node scope. */
  public int nodeArity() {
    return nodes.size() - mk;
  }

  /** Abandon building the current node. */
  public void clearNodeScope(ASTNode n) {
    while (nodes.size() > mk) {
      popNode();
    }
    mk = marks.pop();
  }

  /** Start construction of the given node. */
  public void openNodeScope(ASTNode n) {
    marks.push(mk);
    mk = nodes.size();
    manipulator.onOpen(this, n);
  }

  /**
   * A definite node is constructed from a specified number of children. That number of nodes are
   * popped from the stack and made the children of the definite node. Then the definite node is
   * pushed on to the stack.
   */
  public void closeNodeScope(ASTNode n, int num) {
    mk = marks.pop();
    while (num-- > 0) {
      ASTNode c = popNode();
      manipulator.addChild(this, n, c, num);
    }
    manipulator.onPush(this, n);
    pushNode(n);
    nodeCreated = true;
  }

  /**
   * A conditional node is built if its guard condition is true. All the nodes that have been pushed
   * since the node was opened are made children of the conditional node, which is then pushed onto
   * the stack. If the condition is false the node is not built and they are left on the stack.
   */
  public void closeNodeScope(ASTNode n, boolean condition) {
    if (condition) {
      int a = nodeArity();
      mk = marks.pop();
      while (a-- > 0) {
        ASTNode c = popNode();
        manipulator.addChild(this, n, c, a);
      }
      manipulator.onPush(this, n);
      pushNode(n);
      nodeCreated = true;
    } else {
      mk = marks.pop();
      nodeCreated = false;
    }
  }
}