/*
 * Generated by JJTricks at Fri May 03 16:24:40 CEST 2019
 */

package net.sourceforge.pmd.lang.java.ast;

public interface JavaParserVisitor {

  /** Visits {@linkplain JavaNode JavaNode}. This is the root of the delegation chain. */
  default Object visit(JavaNode node, Object data) {
    return node.childrenAccept(this, data);
  }

  /**
   * Visits {@linkplain ASTImportDeclaration ImportDeclaration}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTImportDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTDeclaration Declaration}. Delegates to {@link #visit(JavaNode,Object) }
   * if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTClassOrInterfaceBodyDeclaration,Object) }
   *   <li>{@link #visit(ASTConstructorDeclaration,Object) }
   *   <li>{@link #visit(ASTLocalVariableDeclaration,Object) }
   *   <li>{@link #visit(ASTFieldDeclaration,Object) }
   *   <li>{@link #visit(ASTMethodDeclaration,Object) }
   *   <li>{@link #visit(ASTAnnotationTypeMemberDeclaration,Object) }
   *   <li>{@link #visit(ASTAnnotationMethodDeclaration,Object) }
   *   <li>{@link #visit(ASTBodyDeclaration,Object) }
   *   <li>{@link #visit(ASTEnumConstant,Object) }
   *   <li>{@link #visit(ASTTypeDeclaration,Object) }
   * </ul>
   */
  default Object visit(ASTDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceBodyDeclaration ClassOrInterfaceBodyDeclaration}.
   * Delegates to {@link #visit(ASTDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTClassOrInterfaceBodyDeclaration node, Object data) {
    return visit((ASTDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTConstructorDeclaration ConstructorDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTConstructorDeclaration node, Object data) {
    return visit((ASTDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTLocalVariableDeclaration LocalVariableDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTLocalVariableDeclaration node, Object data) {
    return visit((ASTDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTFieldDeclaration FieldDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTFieldDeclaration node, Object data) {
    return visit((ASTDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTMethodDeclaration MethodDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTMethodDeclaration node, Object data) {
    return visit((ASTDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeMemberDeclaration AnnotationTypeMemberDeclaration}.
   * Delegates to {@link #visit(ASTDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTAnnotationTypeMemberDeclaration node, Object data) {
    return visit((ASTDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTAnnotationMethodDeclaration AnnotationMethodDeclaration}. Delegates to
   * {@link #visit(ASTDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTAnnotationMethodDeclaration node, Object data) {
    return visit((ASTDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTBodyDeclaration BodyDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTBodyDeclaration node, Object data) {
    return visit((ASTDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTEnumConstant EnumConstant}. Delegates to {@link
   * #visit(ASTDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTEnumConstant node, Object data) {
    return visit((ASTDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTTypeDeclaration TypeDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration,Object) } if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTAnonymousClassDeclaration,Object) }
   *   <li>{@link #visit(ASTNamedTypeDeclaration,Object) }
   * </ul>
   */
  default Object visit(ASTTypeDeclaration node, Object data) {
    return visit((ASTDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTAnonymousClassDeclaration AnonymousClassDeclaration}. Delegates to {@link
   * #visit(ASTTypeDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTAnonymousClassDeclaration node, Object data) {
    return visit((ASTTypeDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTNamedTypeDeclaration NamedTypeDeclaration}. Delegates to {@link
   * #visit(ASTTypeDeclaration,Object) } if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTEnumDeclaration,Object) }
   *   <li>{@link #visit(ASTAnnotationTypeDeclaration,Object) }
   *   <li>{@link #visit(ASTClassOrInterfaceDeclaration,Object) }
   * </ul>
   */
  default Object visit(ASTNamedTypeDeclaration node, Object data) {
    return visit((ASTTypeDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTEnumDeclaration EnumDeclaration}. Delegates to {@link
   * #visit(ASTNamedTypeDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTEnumDeclaration node, Object data) {
    return visit((ASTNamedTypeDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeDeclaration AnnotationTypeDeclaration}. Delegates to {@link
   * #visit(ASTNamedTypeDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTAnnotationTypeDeclaration node, Object data) {
    return visit((ASTNamedTypeDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceDeclaration ClassOrInterfaceDeclaration}. Delegates to
   * {@link #visit(ASTNamedTypeDeclaration,Object) } if unimplemented.
   */
  default Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
    return visit((ASTNamedTypeDeclaration) node, data);
  }

  /**
   * Visits {@linkplain ASTPackageDeclaration PackageDeclaration}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTPackageDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTModuleDeclaration ModuleDeclaration}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTModuleDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTMemberValue MemberValue}. Delegates to {@link #visit(JavaNode,Object) }
   * if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTExpression,Object) }
   *   <li>{@link #visit(ASTAnnotation,Object) }
   * </ul>
   */
  default Object visit(ASTMemberValue node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTExpression Expression}. Delegates to {@link #visit(ASTMemberValue,Object)
   * } if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTConditionalExpression,Object) }
   *   <li>{@link #visit(ASTConditionalOrExpression,Object) }
   *   <li>{@link #visit(ASTMultiplicativeExpression,Object) }
   *   <li>{@link #visit(ASTPostfixExpression,Object) }
   *   <li>{@link #visit(ASTShiftExpression,Object) }
   *   <li>{@link #visit(ASTAllocationExpression,Object) }
   *   <li>{@link #visit(ASTInclusiveOrExpression,Object) }
   *   <li>{@link #visit(ASTAdditiveExpression,Object) }
   *   <li>{@link #visit(ASTLambdaExpression,Object) }
   *   <li>{@link #visit(ASTConditionalAndExpression,Object) }
   *   <li>{@link #visit(ASTInstanceOfExpression,Object) }
   *   <li>{@link #visit(ASTCastExpression,Object) }
   *   <li>{@link #visit(ASTEqualityExpression,Object) }
   *   <li>{@link #visit(ASTExclusiveOrExpression,Object) }
   *   <li>{@link #visit(ASTRelationalExpression,Object) }
   *   <li>{@link #visit(ASTPreIncrementExpression,Object) }
   *   <li>{@link #visit(ASTPreDecrementExpression,Object) }
   *   <li>{@link #visit(ASTAndExpression,Object) }
   *   <li>{@link #visit(ASTUnaryExpression,Object) }
   *   <li>{@link #visit(ASTPrimaryExpression,Object) }
   * </ul>
   */
  default Object visit(ASTExpression node, Object data) {
    return visit((ASTMemberValue) node, data);
  }

  /**
   * Visits {@linkplain ASTConditionalExpression ConditionalExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTConditionalExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTConditionalOrExpression ConditionalOrExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTConditionalOrExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTMultiplicativeExpression MultiplicativeExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTMultiplicativeExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTPostfixExpression PostfixExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTPostfixExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTShiftExpression ShiftExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTShiftExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTAllocationExpression AllocationExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTAllocationExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTInclusiveOrExpression InclusiveOrExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTInclusiveOrExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTAdditiveExpression AdditiveExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTAdditiveExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTLambdaExpression LambdaExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTLambdaExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTConditionalAndExpression ConditionalAndExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTConditionalAndExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTInstanceOfExpression InstanceOfExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTInstanceOfExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTCastExpression CastExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTCastExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTEqualityExpression EqualityExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTEqualityExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTExclusiveOrExpression ExclusiveOrExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTExclusiveOrExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTRelationalExpression RelationalExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTRelationalExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTPreIncrementExpression PreIncrementExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTPreIncrementExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTPreDecrementExpression PreDecrementExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTPreDecrementExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTAndExpression AndExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTAndExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTUnaryExpression UnaryExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   */
  default Object visit(ASTUnaryExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTPrimaryExpression PrimaryExpression}. Delegates to {@link
   * #visit(ASTExpression,Object) } if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTParenthesizedExpression,Object) }
   *   <li>{@link #visit(ASTLiteral,Object) }
   * </ul>
   */
  default Object visit(ASTPrimaryExpression node, Object data) {
    return visit((ASTExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTParenthesizedExpression ParenthesizedExpression}. Delegates to {@link
   * #visit(ASTPrimaryExpression,Object) } if unimplemented.
   */
  default Object visit(ASTParenthesizedExpression node, Object data) {
    return visit((ASTPrimaryExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTLiteral Literal}. Delegates to {@link #visit(ASTPrimaryExpression,Object)
   * } if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTNullLiteral,Object) }
   *   <li>{@link #visit(ASTBooleanLiteral,Object) }
   * </ul>
   */
  default Object visit(ASTLiteral node, Object data) {
    return visit((ASTPrimaryExpression) node, data);
  }

  /**
   * Visits {@linkplain ASTNullLiteral NullLiteral}. Delegates to {@link #visit(ASTLiteral,Object) }
   * if unimplemented.
   */
  default Object visit(ASTNullLiteral node, Object data) {
    return visit((ASTLiteral) node, data);
  }

  /**
   * Visits {@linkplain ASTBooleanLiteral BooleanLiteral}. Delegates to {@link
   * #visit(ASTLiteral,Object) } if unimplemented.
   */
  default Object visit(ASTBooleanLiteral node, Object data) {
    return visit((ASTLiteral) node, data);
  }

  /**
   * Visits {@linkplain ASTAnnotation Annotation}. Delegates to {@link #visit(ASTMemberValue,Object)
   * } if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTSingleMemberAnnotation,Object) }
   *   <li>{@link #visit(ASTMarkerAnnotation,Object) }
   *   <li>{@link #visit(ASTNormalAnnotation,Object) }
   * </ul>
   */
  default Object visit(ASTAnnotation node, Object data) {
    return visit((ASTMemberValue) node, data);
  }

  /**
   * Visits {@linkplain ASTSingleMemberAnnotation SingleMemberAnnotation}. Delegates to {@link
   * #visit(ASTAnnotation,Object) } if unimplemented.
   */
  default Object visit(ASTSingleMemberAnnotation node, Object data) {
    return visit((ASTAnnotation) node, data);
  }

  /**
   * Visits {@linkplain ASTMarkerAnnotation MarkerAnnotation}. Delegates to {@link
   * #visit(ASTAnnotation,Object) } if unimplemented.
   */
  default Object visit(ASTMarkerAnnotation node, Object data) {
    return visit((ASTAnnotation) node, data);
  }

  /**
   * Visits {@linkplain ASTNormalAnnotation NormalAnnotation}. Delegates to {@link
   * #visit(ASTAnnotation,Object) } if unimplemented.
   */
  default Object visit(ASTNormalAnnotation node, Object data) {
    return visit((ASTAnnotation) node, data);
  }

  /**
   * Visits {@linkplain ASTType Type}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTReferenceType,Object) }
   *   <li>{@link #visit(ASTPrimitiveType,Object) }
   * </ul>
   */
  default Object visit(ASTType node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTReferenceType ReferenceType}. Delegates to {@link #visit(ASTType,Object)
   * } if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTClassOrInterfaceType,Object) }
   *   <li>{@link #visit(ASTResultType,Object) }
   * </ul>
   */
  default Object visit(ASTReferenceType node, Object data) {
    return visit((ASTType) node, data);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceType ClassOrInterfaceType}. Delegates to {@link
   * #visit(ASTReferenceType,Object) } if unimplemented.
   */
  default Object visit(ASTClassOrInterfaceType node, Object data) {
    return visit((ASTReferenceType) node, data);
  }

  /**
   * Visits {@linkplain ASTResultType ResultType}. Delegates to {@link
   * #visit(ASTReferenceType,Object) } if unimplemented.
   */
  default Object visit(ASTResultType node, Object data) {
    return visit((ASTReferenceType) node, data);
  }

  /**
   * Visits {@linkplain ASTPrimitiveType PrimitiveType}. Delegates to {@link #visit(ASTType,Object)
   * } if unimplemented.
   */
  default Object visit(ASTPrimitiveType node, Object data) {
    return visit((ASTType) node, data);
  }

  /**
   * Visits {@linkplain ASTStatement Statement}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTEmptyStatement,Object) }
   *   <li>{@link #visit(ASTForStatement,Object) }
   *   <li>{@link #visit(ASTFinallyStatement,Object) }
   *   <li>{@link #visit(ASTContinueStatement,Object) }
   *   <li>{@link #visit(ASTAssertStatement,Object) }
   *   <li>{@link #visit(ASTIfStatement,Object) }
   *   <li>{@link #visit(ASTLabeledStatement,Object) }
   *   <li>{@link #visit(ASTSwitchStatement,Object) }
   *   <li>{@link #visit(ASTWhileStatement,Object) }
   *   <li>{@link #visit(ASTCatchStatement,Object) }
   *   <li>{@link #visit(ASTReturnStatement,Object) }
   *   <li>{@link #visit(ASTThrowStatement,Object) }
   *   <li>{@link #visit(ASTBreakStatement,Object) }
   *   <li>{@link #visit(ASTTryStatement,Object) }
   *   <li>{@link #visit(ASTSynchronizedStatement,Object) }
   *   <li>{@link #visit(ASTDoStatement,Object) }
   *   <li>{@link #visit(ASTBlockStatement,Object) }
   *   <li>{@link #visit(ASTStatementExpression,Object) }
   * </ul>
   */
  default Object visit(ASTStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTEmptyStatement EmptyStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTEmptyStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTForStatement ForStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTForStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTFinallyStatement FinallyStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTFinallyStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTContinueStatement ContinueStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTContinueStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTAssertStatement AssertStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTAssertStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTIfStatement IfStatement}. Delegates to {@link #visit(ASTStatement,Object)
   * } if unimplemented.
   */
  default Object visit(ASTIfStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTLabeledStatement LabeledStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTLabeledStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTSwitchStatement SwitchStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTSwitchStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTWhileStatement WhileStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTWhileStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTCatchStatement CatchStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTCatchStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTReturnStatement ReturnStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTReturnStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTThrowStatement ThrowStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTThrowStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTBreakStatement BreakStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTBreakStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTTryStatement TryStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTTryStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTSynchronizedStatement SynchronizedStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTSynchronizedStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTDoStatement DoStatement}. Delegates to {@link #visit(ASTStatement,Object)
   * } if unimplemented.
   */
  default Object visit(ASTDoStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTBlockStatement BlockStatement}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTBlockStatement node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTStatementExpression StatementExpression}. Delegates to {@link
   * #visit(ASTStatement,Object) } if unimplemented.
   */
  default Object visit(ASTStatementExpression node, Object data) {
    return visit((ASTStatement) node, data);
  }

  /**
   * Visits {@linkplain ASTTypeBody TypeBody}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTEnumBody,Object) }
   *   <li>{@link #visit(ASTAnnotationTypeBody,Object) }
   *   <li>{@link #visit(ASTClassOrInterfaceBody,Object) }
   * </ul>
   */
  default Object visit(ASTTypeBody node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTEnumBody EnumBody}. Delegates to {@link #visit(ASTTypeBody,Object) } if
   * unimplemented.
   */
  default Object visit(ASTEnumBody node, Object data) {
    return visit((ASTTypeBody) node, data);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeBody AnnotationTypeBody}. Delegates to {@link
   * #visit(ASTTypeBody,Object) } if unimplemented.
   */
  default Object visit(ASTAnnotationTypeBody node, Object data) {
    return visit((ASTTypeBody) node, data);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceBody ClassOrInterfaceBody}. Delegates to {@link
   * #visit(ASTTypeBody,Object) } if unimplemented.
   */
  default Object visit(ASTClassOrInterfaceBody node, Object data) {
    return visit((ASTTypeBody) node, data);
  }

  /**
   * Visits {@linkplain ASTConditionalExpression ASTConditionalExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTConditionalExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTArgumentList ASTArgumentList}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTArgumentList node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTForUpdate ASTForUpdate}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTForUpdate node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTEmptyStatement ASTEmptyStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTEmptyStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTForStatement ASTForStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTForStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceBodyDeclaration ASTClassOrInterfaceBodyDeclaration}.
   * Delegates to {@link #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTClassOrInterfaceBodyDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTLiteral ASTLiteral}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTLiteral node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTMethodReference ASTMethodReference}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTMethodReference node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTVariableInitializer ASTVariableInitializer}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTVariableInitializer node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTMemberValueArrayInitializer ASTMemberValueArrayInitializer}. Delegates to
   * {@link #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTMemberValueArrayInitializer node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTConditionalOrExpression ASTConditionalOrExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTConditionalOrExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTFinallyStatement ASTFinallyStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTFinallyStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTTypeDeclaration ASTTypeDeclaration}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTTypeDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTContinueStatement ASTContinueStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTContinueStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTExplicitConstructorInvocation ASTExplicitConstructorInvocation}.
   * Delegates to {@link #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTExplicitConstructorInvocation node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTConstructorDeclaration ASTConstructorDeclaration}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTConstructorDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTUnaryExpressionNotPlusMinus ASTUnaryExpressionNotPlusMinus}. Delegates to
   * {@link #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTUnaryExpressionNotPlusMinus node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTEnumBody ASTEnumBody}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTEnumBody node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTReferenceType ASTReferenceType}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTReferenceType node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTMultiplicativeExpression ASTMultiplicativeExpression}. Delegates to
   * {@link #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTMultiplicativeExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTExtendsList ASTExtendsList}. Delegates to {@link #visit(JavaNode,Object)
   * } if unimplemented.
   */
  default Object visit(ASTExtendsList node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTPostfixExpression ASTPostfixExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTPostfixExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTShiftExpression ASTShiftExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTShiftExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTAssertStatement ASTAssertStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTAssertStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTAllocationExpression ASTAllocationExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTAllocationExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeBody ASTAnnotationTypeBody}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTAnnotationTypeBody node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTBlock ASTBlock}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTBlock node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTMethodDeclarator ASTMethodDeclarator}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTMethodDeclarator node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTInclusiveOrExpression ASTInclusiveOrExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTInclusiveOrExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTType ASTType}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTType node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTSingleMemberAnnotation ASTSingleMemberAnnotation}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTSingleMemberAnnotation node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTIfStatement ASTIfStatement}. Delegates to {@link #visit(JavaNode,Object)
   * } if unimplemented.
   */
  default Object visit(ASTIfStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTCompilationUnit ASTCompilationUnit}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTCompilationUnit node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTTypeParameter ASTTypeParameter}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTTypeParameter node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTMemberValue ASTMemberValue}. Delegates to {@link #visit(JavaNode,Object)
   * } if unimplemented.
   */
  default Object visit(ASTMemberValue node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTLabeledStatement ASTLabeledStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTLabeledStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTAdditiveExpression ASTAdditiveExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTAdditiveExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTFormalParameter ASTFormalParameter}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTFormalParameter node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTResource ASTResource}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTResource node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTSwitchStatement ASTSwitchStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTSwitchStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTModuleName ASTModuleName}. Delegates to {@link #visit(JavaNode,Object) }
   * if unimplemented.
   */
  default Object visit(ASTModuleName node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTTypeArguments ASTTypeArguments}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTTypeArguments node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTLambdaExpression ASTLambdaExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTLambdaExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTNullLiteral ASTNullLiteral}. Delegates to {@link #visit(JavaNode,Object)
   * } if unimplemented.
   */
  default Object visit(ASTNullLiteral node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTAssignmentOperator ASTAssignmentOperator}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTAssignmentOperator node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTConditionalAndExpression ASTConditionalAndExpression}. Delegates to
   * {@link #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTConditionalAndExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTWhileStatement ASTWhileStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTWhileStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTCatchStatement ASTCatchStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTCatchStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTVariableDeclarator ASTVariableDeclarator}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTVariableDeclarator node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTReturnStatement ASTReturnStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTReturnStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTInstanceOfExpression ASTInstanceOfExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTInstanceOfExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTWildcardBounds ASTWildcardBounds}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTWildcardBounds node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTLocalVariableDeclaration ASTLocalVariableDeclaration}. Delegates to
   * {@link #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTLocalVariableDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTCastExpression ASTCastExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTCastExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTInitializer ASTInitializer}. Delegates to {@link #visit(JavaNode,Object)
   * } if unimplemented.
   */
  default Object visit(ASTInitializer node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTFieldDeclaration ASTFieldDeclaration}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTFieldDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTTypeBound ASTTypeBound}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTTypeBound node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTThrowStatement ASTThrowStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTThrowStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceBody ASTClassOrInterfaceBody}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTClassOrInterfaceBody node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTBooleanLiteral ASTBooleanLiteral}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTBooleanLiteral node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTMethodDeclaration ASTMethodDeclaration}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTMethodDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTMarkerAnnotation ASTMarkerAnnotation}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTMarkerAnnotation node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTStatement ASTStatement}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTMemberValuePair ASTMemberValuePair}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTMemberValuePair node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTMemberSelector ASTMemberSelector}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTMemberSelector node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTForInit ASTForInit}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTForInit node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTEqualityExpression ASTEqualityExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTEqualityExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTPrimaryPrefix ASTPrimaryPrefix}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTPrimaryPrefix node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTAnnotation ASTAnnotation}. Delegates to {@link #visit(JavaNode,Object) }
   * if unimplemented.
   */
  default Object visit(ASTAnnotation node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceType ASTClassOrInterfaceType}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTClassOrInterfaceType node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTExclusiveOrExpression ASTExclusiveOrExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTExclusiveOrExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTTypeParameters ASTTypeParameters}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTTypeParameters node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTPackageDeclaration ASTPackageDeclaration}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTPackageDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTArguments ASTArguments}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTArguments node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceDeclaration ASTClassOrInterfaceDeclaration}. Delegates to
   * {@link #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTStatementExpression ASTStatementExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTStatementExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTRelationalExpression ASTRelationalExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTRelationalExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTTypeArgument ASTTypeArgument}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTTypeArgument node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTPreIncrementExpression ASTPreIncrementExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTPreIncrementExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTPreDecrementExpression ASTPreDecrementExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTPreDecrementExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeMemberDeclaration ASTAnnotationTypeMemberDeclaration}.
   * Delegates to {@link #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTAnnotationTypeMemberDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTArrayInitializer ASTArrayInitializer}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTArrayInitializer node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTBreakStatement ASTBreakStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTBreakStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeDeclaration ASTAnnotationTypeDeclaration}. Delegates to
   * {@link #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTAnnotationTypeDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTModuleDirective ASTModuleDirective}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTModuleDirective node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTTryStatement ASTTryStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTTryStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTPrimitiveType ASTPrimitiveType}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTPrimitiveType node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTRSIGNEDSHIFT ASTRSIGNEDSHIFT}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTRSIGNEDSHIFT node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTEnumDeclaration ASTEnumDeclaration}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTEnumDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTAndExpression ASTAndExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTAndExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTExpression ASTExpression}. Delegates to {@link #visit(JavaNode,Object) }
   * if unimplemented.
   */
  default Object visit(ASTExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTFormalParameters ASTFormalParameters}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTFormalParameters node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTSynchronizedStatement ASTSynchronizedStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTSynchronizedStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTResources ASTResources}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTResources node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTResourceSpecification ASTResourceSpecification}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTResourceSpecification node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTVariableDeclaratorId ASTVariableDeclaratorId}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTVariableDeclaratorId node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTDoStatement ASTDoStatement}. Delegates to {@link #visit(JavaNode,Object)
   * } if unimplemented.
   */
  default Object visit(ASTDoStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTImportDeclaration ASTImportDeclaration}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTImportDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTUnaryExpression ASTUnaryExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTUnaryExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTSwitchLabel ASTSwitchLabel}. Delegates to {@link #visit(JavaNode,Object)
   * } if unimplemented.
   */
  default Object visit(ASTSwitchLabel node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTResultType ASTResultType}. Delegates to {@link #visit(JavaNode,Object) }
   * if unimplemented.
   */
  default Object visit(ASTResultType node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTPrimarySuffix ASTPrimarySuffix}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTPrimarySuffix node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTStatementExpressionList ASTStatementExpressionList}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTStatementExpressionList node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTAnnotationMethodDeclaration ASTAnnotationMethodDeclaration}. Delegates to
   * {@link #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTAnnotationMethodDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTPrimaryExpression ASTPrimaryExpression}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTPrimaryExpression node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTNormalAnnotation ASTNormalAnnotation}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTNormalAnnotation node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTNameList ASTNameList}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTNameList node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTRUNSIGNEDSHIFT ASTRUNSIGNEDSHIFT}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTRUNSIGNEDSHIFT node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTModuleDeclaration ASTModuleDeclaration}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTModuleDeclaration node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTName ASTName}. Delegates to {@link #visit(JavaNode,Object) } if
   * unimplemented.
   */
  default Object visit(ASTName node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTArrayDimsAndInits ASTArrayDimsAndInits}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTArrayDimsAndInits node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTMemberValuePairs ASTMemberValuePairs}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTMemberValuePairs node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTBlockStatement ASTBlockStatement}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTBlockStatement node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTImplementsList ASTImplementsList}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTImplementsList node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTEnumConstant ASTEnumConstant}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTEnumConstant node, Object data) {
    return visit((JavaNode) node, data);
  }

  /**
   * Visits {@linkplain ASTDefaultValue ASTDefaultValue}. Delegates to {@link
   * #visit(JavaNode,Object) } if unimplemented.
   */
  default Object visit(ASTDefaultValue node, Object data) {
    return visit((JavaNode) node, data);
  }
}
