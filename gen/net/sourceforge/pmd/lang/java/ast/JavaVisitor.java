/*
 * Generated by JJTricks at Fri May 03 16:24:41 CEST 2019
 */

package net.sourceforge.pmd.lang.java.ast;

public interface JavaVisitor {

  /** Visits {@linkplain JavaNode JavaNode}. This is the root of the delegation chain. */
  default void visit(JavaNode node) {
    node.childrenAccept(this, data);
  }

  /**
   * Visits {@linkplain ASTImportDeclaration ImportDeclaration}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTImportDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTDeclaration Declaration}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTClassOrInterfaceBodyDeclaration) }
   *   <li>{@link #visit(ASTConstructorDeclaration) }
   *   <li>{@link #visit(ASTLocalVariableDeclaration) }
   *   <li>{@link #visit(ASTFieldDeclaration) }
   *   <li>{@link #visit(ASTMethodDeclaration) }
   *   <li>{@link #visit(ASTAnnotationTypeMemberDeclaration) }
   *   <li>{@link #visit(ASTAnnotationMethodDeclaration) }
   *   <li>{@link #visit(ASTBodyDeclaration) }
   *   <li>{@link #visit(ASTEnumConstant) }
   *   <li>{@link #visit(ASTTypeDeclaration) }
   * </ul>
   */
  default void visit(ASTDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceBodyDeclaration ClassOrInterfaceBodyDeclaration}.
   * Delegates to {@link #visit(ASTDeclaration) } if unimplemented.
   */
  default void visit(ASTClassOrInterfaceBodyDeclaration node) {
    visit((ASTDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTConstructorDeclaration ConstructorDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration) } if unimplemented.
   */
  default void visit(ASTConstructorDeclaration node) {
    visit((ASTDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTLocalVariableDeclaration LocalVariableDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration) } if unimplemented.
   */
  default void visit(ASTLocalVariableDeclaration node) {
    visit((ASTDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTFieldDeclaration FieldDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration) } if unimplemented.
   */
  default void visit(ASTFieldDeclaration node) {
    visit((ASTDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTMethodDeclaration MethodDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration) } if unimplemented.
   */
  default void visit(ASTMethodDeclaration node) {
    visit((ASTDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeMemberDeclaration AnnotationTypeMemberDeclaration}.
   * Delegates to {@link #visit(ASTDeclaration) } if unimplemented.
   */
  default void visit(ASTAnnotationTypeMemberDeclaration node) {
    visit((ASTDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTAnnotationMethodDeclaration AnnotationMethodDeclaration}. Delegates to
   * {@link #visit(ASTDeclaration) } if unimplemented.
   */
  default void visit(ASTAnnotationMethodDeclaration node) {
    visit((ASTDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTBodyDeclaration BodyDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration) } if unimplemented.
   */
  default void visit(ASTBodyDeclaration node) {
    visit((ASTDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTEnumConstant EnumConstant}. Delegates to {@link #visit(ASTDeclaration) }
   * if unimplemented.
   */
  default void visit(ASTEnumConstant node) {
    visit((ASTDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTTypeDeclaration TypeDeclaration}. Delegates to {@link
   * #visit(ASTDeclaration) } if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTAnonymousClassDeclaration) }
   *   <li>{@link #visit(ASTNamedTypeDeclaration) }
   * </ul>
   */
  default void visit(ASTTypeDeclaration node) {
    visit((ASTDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTAnonymousClassDeclaration AnonymousClassDeclaration}. Delegates to {@link
   * #visit(ASTTypeDeclaration) } if unimplemented.
   */
  default void visit(ASTAnonymousClassDeclaration node) {
    visit((ASTTypeDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTNamedTypeDeclaration NamedTypeDeclaration}. Delegates to {@link
   * #visit(ASTTypeDeclaration) } if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTEnumDeclaration) }
   *   <li>{@link #visit(ASTAnnotationTypeDeclaration) }
   *   <li>{@link #visit(ASTClassOrInterfaceDeclaration) }
   * </ul>
   */
  default void visit(ASTNamedTypeDeclaration node) {
    visit((ASTTypeDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTEnumDeclaration EnumDeclaration}. Delegates to {@link
   * #visit(ASTNamedTypeDeclaration) } if unimplemented.
   */
  default void visit(ASTEnumDeclaration node) {
    visit((ASTNamedTypeDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeDeclaration AnnotationTypeDeclaration}. Delegates to {@link
   * #visit(ASTNamedTypeDeclaration) } if unimplemented.
   */
  default void visit(ASTAnnotationTypeDeclaration node) {
    visit((ASTNamedTypeDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceDeclaration ClassOrInterfaceDeclaration}. Delegates to
   * {@link #visit(ASTNamedTypeDeclaration) } if unimplemented.
   */
  default void visit(ASTClassOrInterfaceDeclaration node) {
    visit((ASTNamedTypeDeclaration) node);
  }

  /**
   * Visits {@linkplain ASTPackageDeclaration PackageDeclaration}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTPackageDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTModuleDeclaration ModuleDeclaration}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTModuleDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTMemberValue MemberValue}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTExpression) }
   *   <li>{@link #visit(ASTAnnotation) }
   * </ul>
   */
  default void visit(ASTMemberValue node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTExpression Expression}. Delegates to {@link #visit(ASTMemberValue) } if
   * unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTConditionalExpression) }
   *   <li>{@link #visit(ASTConditionalOrExpression) }
   *   <li>{@link #visit(ASTMultiplicativeExpression) }
   *   <li>{@link #visit(ASTPostfixExpression) }
   *   <li>{@link #visit(ASTShiftExpression) }
   *   <li>{@link #visit(ASTAllocationExpression) }
   *   <li>{@link #visit(ASTInclusiveOrExpression) }
   *   <li>{@link #visit(ASTAdditiveExpression) }
   *   <li>{@link #visit(ASTLambdaExpression) }
   *   <li>{@link #visit(ASTConditionalAndExpression) }
   *   <li>{@link #visit(ASTInstanceOfExpression) }
   *   <li>{@link #visit(ASTCastExpression) }
   *   <li>{@link #visit(ASTEqualityExpression) }
   *   <li>{@link #visit(ASTExclusiveOrExpression) }
   *   <li>{@link #visit(ASTRelationalExpression) }
   *   <li>{@link #visit(ASTPreIncrementExpression) }
   *   <li>{@link #visit(ASTPreDecrementExpression) }
   *   <li>{@link #visit(ASTAndExpression) }
   *   <li>{@link #visit(ASTUnaryExpression) }
   *   <li>{@link #visit(ASTPrimaryExpression) }
   * </ul>
   */
  default void visit(ASTExpression node) {
    visit((ASTMemberValue) node);
  }

  /**
   * Visits {@linkplain ASTConditionalExpression ConditionalExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTConditionalExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTConditionalOrExpression ConditionalOrExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTConditionalOrExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTMultiplicativeExpression MultiplicativeExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTMultiplicativeExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTPostfixExpression PostfixExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTPostfixExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTShiftExpression ShiftExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTShiftExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTAllocationExpression AllocationExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTAllocationExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTInclusiveOrExpression InclusiveOrExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTInclusiveOrExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTAdditiveExpression AdditiveExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTAdditiveExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTLambdaExpression LambdaExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTLambdaExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTConditionalAndExpression ConditionalAndExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTConditionalAndExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTInstanceOfExpression InstanceOfExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTInstanceOfExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTCastExpression CastExpression}. Delegates to {@link #visit(ASTExpression)
   * } if unimplemented.
   */
  default void visit(ASTCastExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTEqualityExpression EqualityExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTEqualityExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTExclusiveOrExpression ExclusiveOrExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTExclusiveOrExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTRelationalExpression RelationalExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTRelationalExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTPreIncrementExpression PreIncrementExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTPreIncrementExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTPreDecrementExpression PreDecrementExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTPreDecrementExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTAndExpression AndExpression}. Delegates to {@link #visit(ASTExpression) }
   * if unimplemented.
   */
  default void visit(ASTAndExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTUnaryExpression UnaryExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   */
  default void visit(ASTUnaryExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTPrimaryExpression PrimaryExpression}. Delegates to {@link
   * #visit(ASTExpression) } if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTParenthesizedExpression) }
   *   <li>{@link #visit(ASTLiteral) }
   * </ul>
   */
  default void visit(ASTPrimaryExpression node) {
    visit((ASTExpression) node);
  }

  /**
   * Visits {@linkplain ASTParenthesizedExpression ParenthesizedExpression}. Delegates to {@link
   * #visit(ASTPrimaryExpression) } if unimplemented.
   */
  default void visit(ASTParenthesizedExpression node) {
    visit((ASTPrimaryExpression) node);
  }

  /**
   * Visits {@linkplain ASTLiteral Literal}. Delegates to {@link #visit(ASTPrimaryExpression) } if
   * unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTNullLiteral) }
   *   <li>{@link #visit(ASTBooleanLiteral) }
   * </ul>
   */
  default void visit(ASTLiteral node) {
    visit((ASTPrimaryExpression) node);
  }

  /**
   * Visits {@linkplain ASTNullLiteral NullLiteral}. Delegates to {@link #visit(ASTLiteral) } if
   * unimplemented.
   */
  default void visit(ASTNullLiteral node) {
    visit((ASTLiteral) node);
  }

  /**
   * Visits {@linkplain ASTBooleanLiteral BooleanLiteral}. Delegates to {@link #visit(ASTLiteral) }
   * if unimplemented.
   */
  default void visit(ASTBooleanLiteral node) {
    visit((ASTLiteral) node);
  }

  /**
   * Visits {@linkplain ASTAnnotation Annotation}. Delegates to {@link #visit(ASTMemberValue) } if
   * unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTSingleMemberAnnotation) }
   *   <li>{@link #visit(ASTMarkerAnnotation) }
   *   <li>{@link #visit(ASTNormalAnnotation) }
   * </ul>
   */
  default void visit(ASTAnnotation node) {
    visit((ASTMemberValue) node);
  }

  /**
   * Visits {@linkplain ASTSingleMemberAnnotation SingleMemberAnnotation}. Delegates to {@link
   * #visit(ASTAnnotation) } if unimplemented.
   */
  default void visit(ASTSingleMemberAnnotation node) {
    visit((ASTAnnotation) node);
  }

  /**
   * Visits {@linkplain ASTMarkerAnnotation MarkerAnnotation}. Delegates to {@link
   * #visit(ASTAnnotation) } if unimplemented.
   */
  default void visit(ASTMarkerAnnotation node) {
    visit((ASTAnnotation) node);
  }

  /**
   * Visits {@linkplain ASTNormalAnnotation NormalAnnotation}. Delegates to {@link
   * #visit(ASTAnnotation) } if unimplemented.
   */
  default void visit(ASTNormalAnnotation node) {
    visit((ASTAnnotation) node);
  }

  /**
   * Visits {@linkplain ASTType Type}. Delegates to {@link #visit(JavaNode) } if unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTReferenceType) }
   *   <li>{@link #visit(ASTPrimitiveType) }
   * </ul>
   */
  default void visit(ASTType node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTReferenceType ReferenceType}. Delegates to {@link #visit(ASTType) } if
   * unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTClassOrInterfaceType) }
   *   <li>{@link #visit(ASTResultType) }
   * </ul>
   */
  default void visit(ASTReferenceType node) {
    visit((ASTType) node);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceType ClassOrInterfaceType}. Delegates to {@link
   * #visit(ASTReferenceType) } if unimplemented.
   */
  default void visit(ASTClassOrInterfaceType node) {
    visit((ASTReferenceType) node);
  }

  /**
   * Visits {@linkplain ASTResultType ResultType}. Delegates to {@link #visit(ASTReferenceType) } if
   * unimplemented.
   */
  default void visit(ASTResultType node) {
    visit((ASTReferenceType) node);
  }

  /**
   * Visits {@linkplain ASTPrimitiveType PrimitiveType}. Delegates to {@link #visit(ASTType) } if
   * unimplemented.
   */
  default void visit(ASTPrimitiveType node) {
    visit((ASTType) node);
  }

  /**
   * Visits {@linkplain ASTStatement Statement}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTEmptyStatement) }
   *   <li>{@link #visit(ASTForStatement) }
   *   <li>{@link #visit(ASTFinallyStatement) }
   *   <li>{@link #visit(ASTContinueStatement) }
   *   <li>{@link #visit(ASTAssertStatement) }
   *   <li>{@link #visit(ASTIfStatement) }
   *   <li>{@link #visit(ASTLabeledStatement) }
   *   <li>{@link #visit(ASTSwitchStatement) }
   *   <li>{@link #visit(ASTWhileStatement) }
   *   <li>{@link #visit(ASTCatchStatement) }
   *   <li>{@link #visit(ASTReturnStatement) }
   *   <li>{@link #visit(ASTThrowStatement) }
   *   <li>{@link #visit(ASTBreakStatement) }
   *   <li>{@link #visit(ASTTryStatement) }
   *   <li>{@link #visit(ASTSynchronizedStatement) }
   *   <li>{@link #visit(ASTDoStatement) }
   *   <li>{@link #visit(ASTBlockStatement) }
   *   <li>{@link #visit(ASTStatementExpression) }
   * </ul>
   */
  default void visit(ASTStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTEmptyStatement EmptyStatement}. Delegates to {@link #visit(ASTStatement)
   * } if unimplemented.
   */
  default void visit(ASTEmptyStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTForStatement ForStatement}. Delegates to {@link #visit(ASTStatement) } if
   * unimplemented.
   */
  default void visit(ASTForStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTFinallyStatement FinallyStatement}. Delegates to {@link
   * #visit(ASTStatement) } if unimplemented.
   */
  default void visit(ASTFinallyStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTContinueStatement ContinueStatement}. Delegates to {@link
   * #visit(ASTStatement) } if unimplemented.
   */
  default void visit(ASTContinueStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTAssertStatement AssertStatement}. Delegates to {@link
   * #visit(ASTStatement) } if unimplemented.
   */
  default void visit(ASTAssertStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTIfStatement IfStatement}. Delegates to {@link #visit(ASTStatement) } if
   * unimplemented.
   */
  default void visit(ASTIfStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTLabeledStatement LabeledStatement}. Delegates to {@link
   * #visit(ASTStatement) } if unimplemented.
   */
  default void visit(ASTLabeledStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTSwitchStatement SwitchStatement}. Delegates to {@link
   * #visit(ASTStatement) } if unimplemented.
   */
  default void visit(ASTSwitchStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTWhileStatement WhileStatement}. Delegates to {@link #visit(ASTStatement)
   * } if unimplemented.
   */
  default void visit(ASTWhileStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTCatchStatement CatchStatement}. Delegates to {@link #visit(ASTStatement)
   * } if unimplemented.
   */
  default void visit(ASTCatchStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTReturnStatement ReturnStatement}. Delegates to {@link
   * #visit(ASTStatement) } if unimplemented.
   */
  default void visit(ASTReturnStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTThrowStatement ThrowStatement}. Delegates to {@link #visit(ASTStatement)
   * } if unimplemented.
   */
  default void visit(ASTThrowStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTBreakStatement BreakStatement}. Delegates to {@link #visit(ASTStatement)
   * } if unimplemented.
   */
  default void visit(ASTBreakStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTTryStatement TryStatement}. Delegates to {@link #visit(ASTStatement) } if
   * unimplemented.
   */
  default void visit(ASTTryStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTSynchronizedStatement SynchronizedStatement}. Delegates to {@link
   * #visit(ASTStatement) } if unimplemented.
   */
  default void visit(ASTSynchronizedStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTDoStatement DoStatement}. Delegates to {@link #visit(ASTStatement) } if
   * unimplemented.
   */
  default void visit(ASTDoStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTBlockStatement BlockStatement}. Delegates to {@link #visit(ASTStatement)
   * } if unimplemented.
   */
  default void visit(ASTBlockStatement node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTStatementExpression StatementExpression}. Delegates to {@link
   * #visit(ASTStatement) } if unimplemented.
   */
  default void visit(ASTStatementExpression node) {
    visit((ASTStatement) node);
  }

  /**
   * Visits {@linkplain ASTTypeBody TypeBody}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   *
   * <p>This method is delegated to by:
   *
   * <ul>
   *   <li>{@link #visit(ASTEnumBody) }
   *   <li>{@link #visit(ASTAnnotationTypeBody) }
   *   <li>{@link #visit(ASTClassOrInterfaceBody) }
   * </ul>
   */
  default void visit(ASTTypeBody node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTEnumBody EnumBody}. Delegates to {@link #visit(ASTTypeBody) } if
   * unimplemented.
   */
  default void visit(ASTEnumBody node) {
    visit((ASTTypeBody) node);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeBody AnnotationTypeBody}. Delegates to {@link
   * #visit(ASTTypeBody) } if unimplemented.
   */
  default void visit(ASTAnnotationTypeBody node) {
    visit((ASTTypeBody) node);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceBody ClassOrInterfaceBody}. Delegates to {@link
   * #visit(ASTTypeBody) } if unimplemented.
   */
  default void visit(ASTClassOrInterfaceBody node) {
    visit((ASTTypeBody) node);
  }

  /**
   * Visits {@linkplain ASTConditionalExpression ASTConditionalExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTConditionalExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTArgumentList ASTArgumentList}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTArgumentList node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTForUpdate ASTForUpdate}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTForUpdate node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTEmptyStatement ASTEmptyStatement}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTEmptyStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTForStatement ASTForStatement}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTForStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceBodyDeclaration ASTClassOrInterfaceBodyDeclaration}.
   * Delegates to {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTClassOrInterfaceBodyDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTLiteral ASTLiteral}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTLiteral node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTMethodReference ASTMethodReference}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTMethodReference node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTVariableInitializer ASTVariableInitializer}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTVariableInitializer node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTMemberValueArrayInitializer ASTMemberValueArrayInitializer}. Delegates to
   * {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTMemberValueArrayInitializer node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTConditionalOrExpression ASTConditionalOrExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTConditionalOrExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTFinallyStatement ASTFinallyStatement}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTFinallyStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTTypeDeclaration ASTTypeDeclaration}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTTypeDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTContinueStatement ASTContinueStatement}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTContinueStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTExplicitConstructorInvocation ASTExplicitConstructorInvocation}.
   * Delegates to {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTExplicitConstructorInvocation node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTConstructorDeclaration ASTConstructorDeclaration}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTConstructorDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTUnaryExpressionNotPlusMinus ASTUnaryExpressionNotPlusMinus}. Delegates to
   * {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTUnaryExpressionNotPlusMinus node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTEnumBody ASTEnumBody}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTEnumBody node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTReferenceType ASTReferenceType}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTReferenceType node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTMultiplicativeExpression ASTMultiplicativeExpression}. Delegates to
   * {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTMultiplicativeExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTExtendsList ASTExtendsList}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTExtendsList node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTPostfixExpression ASTPostfixExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTPostfixExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTShiftExpression ASTShiftExpression}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTShiftExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTAssertStatement ASTAssertStatement}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTAssertStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTAllocationExpression ASTAllocationExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTAllocationExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeBody ASTAnnotationTypeBody}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTAnnotationTypeBody node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTBlock ASTBlock}. Delegates to {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTBlock node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTMethodDeclarator ASTMethodDeclarator}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTMethodDeclarator node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTInclusiveOrExpression ASTInclusiveOrExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTInclusiveOrExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTType ASTType}. Delegates to {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTType node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTSingleMemberAnnotation ASTSingleMemberAnnotation}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTSingleMemberAnnotation node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTIfStatement ASTIfStatement}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTIfStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTCompilationUnit ASTCompilationUnit}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTCompilationUnit node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTTypeParameter ASTTypeParameter}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTTypeParameter node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTMemberValue ASTMemberValue}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTMemberValue node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTLabeledStatement ASTLabeledStatement}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTLabeledStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTAdditiveExpression ASTAdditiveExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTAdditiveExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTFormalParameter ASTFormalParameter}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTFormalParameter node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTResource ASTResource}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTResource node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTSwitchStatement ASTSwitchStatement}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTSwitchStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTModuleName ASTModuleName}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTModuleName node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTTypeArguments ASTTypeArguments}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTTypeArguments node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTLambdaExpression ASTLambdaExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTLambdaExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTNullLiteral ASTNullLiteral}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTNullLiteral node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTAssignmentOperator ASTAssignmentOperator}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTAssignmentOperator node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTConditionalAndExpression ASTConditionalAndExpression}. Delegates to
   * {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTConditionalAndExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTWhileStatement ASTWhileStatement}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTWhileStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTCatchStatement ASTCatchStatement}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTCatchStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTVariableDeclarator ASTVariableDeclarator}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTVariableDeclarator node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTReturnStatement ASTReturnStatement}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTReturnStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTInstanceOfExpression ASTInstanceOfExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTInstanceOfExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTWildcardBounds ASTWildcardBounds}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTWildcardBounds node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTLocalVariableDeclaration ASTLocalVariableDeclaration}. Delegates to
   * {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTLocalVariableDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTCastExpression ASTCastExpression}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTCastExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTInitializer ASTInitializer}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTInitializer node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTFieldDeclaration ASTFieldDeclaration}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTFieldDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTTypeBound ASTTypeBound}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTTypeBound node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTThrowStatement ASTThrowStatement}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTThrowStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceBody ASTClassOrInterfaceBody}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTClassOrInterfaceBody node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTBooleanLiteral ASTBooleanLiteral}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTBooleanLiteral node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTMethodDeclaration ASTMethodDeclaration}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTMethodDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTMarkerAnnotation ASTMarkerAnnotation}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTMarkerAnnotation node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTStatement ASTStatement}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTMemberValuePair ASTMemberValuePair}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTMemberValuePair node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTMemberSelector ASTMemberSelector}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTMemberSelector node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTForInit ASTForInit}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTForInit node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTEqualityExpression ASTEqualityExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTEqualityExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTPrimaryPrefix ASTPrimaryPrefix}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTPrimaryPrefix node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTAnnotation ASTAnnotation}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTAnnotation node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceType ASTClassOrInterfaceType}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTClassOrInterfaceType node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTExclusiveOrExpression ASTExclusiveOrExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTExclusiveOrExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTTypeParameters ASTTypeParameters}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTTypeParameters node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTPackageDeclaration ASTPackageDeclaration}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTPackageDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTArguments ASTArguments}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTArguments node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTClassOrInterfaceDeclaration ASTClassOrInterfaceDeclaration}. Delegates to
   * {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTClassOrInterfaceDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTStatementExpression ASTStatementExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTStatementExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTRelationalExpression ASTRelationalExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTRelationalExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTTypeArgument ASTTypeArgument}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTTypeArgument node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTPreIncrementExpression ASTPreIncrementExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTPreIncrementExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTPreDecrementExpression ASTPreDecrementExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTPreDecrementExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeMemberDeclaration ASTAnnotationTypeMemberDeclaration}.
   * Delegates to {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTAnnotationTypeMemberDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTArrayInitializer ASTArrayInitializer}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTArrayInitializer node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTBreakStatement ASTBreakStatement}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTBreakStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTAnnotationTypeDeclaration ASTAnnotationTypeDeclaration}. Delegates to
   * {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTAnnotationTypeDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTModuleDirective ASTModuleDirective}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTModuleDirective node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTTryStatement ASTTryStatement}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTTryStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTPrimitiveType ASTPrimitiveType}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTPrimitiveType node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTRSIGNEDSHIFT ASTRSIGNEDSHIFT}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTRSIGNEDSHIFT node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTEnumDeclaration ASTEnumDeclaration}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTEnumDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTAndExpression ASTAndExpression}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTAndExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTExpression ASTExpression}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTFormalParameters ASTFormalParameters}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTFormalParameters node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTSynchronizedStatement ASTSynchronizedStatement}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTSynchronizedStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTResources ASTResources}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTResources node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTResourceSpecification ASTResourceSpecification}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTResourceSpecification node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTVariableDeclaratorId ASTVariableDeclaratorId}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTVariableDeclaratorId node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTDoStatement ASTDoStatement}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTDoStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTImportDeclaration ASTImportDeclaration}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTImportDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTUnaryExpression ASTUnaryExpression}. Delegates to {@link #visit(JavaNode)
   * } if unimplemented.
   */
  default void visit(ASTUnaryExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTSwitchLabel ASTSwitchLabel}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTSwitchLabel node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTResultType ASTResultType}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTResultType node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTPrimarySuffix ASTPrimarySuffix}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTPrimarySuffix node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTStatementExpressionList ASTStatementExpressionList}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTStatementExpressionList node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTAnnotationMethodDeclaration ASTAnnotationMethodDeclaration}. Delegates to
   * {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTAnnotationMethodDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTPrimaryExpression ASTPrimaryExpression}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTPrimaryExpression node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTNormalAnnotation ASTNormalAnnotation}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTNormalAnnotation node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTNameList ASTNameList}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTNameList node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTRUNSIGNEDSHIFT ASTRUNSIGNEDSHIFT}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTRUNSIGNEDSHIFT node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTModuleDeclaration ASTModuleDeclaration}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTModuleDeclaration node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTName ASTName}. Delegates to {@link #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTName node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTArrayDimsAndInits ASTArrayDimsAndInits}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTArrayDimsAndInits node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTMemberValuePairs ASTMemberValuePairs}. Delegates to {@link
   * #visit(JavaNode) } if unimplemented.
   */
  default void visit(ASTMemberValuePairs node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTBlockStatement ASTBlockStatement}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTBlockStatement node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTImplementsList ASTImplementsList}. Delegates to {@link #visit(JavaNode) }
   * if unimplemented.
   */
  default void visit(ASTImplementsList node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTEnumConstant ASTEnumConstant}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTEnumConstant node) {
    visit((JavaNode) node);
  }

  /**
   * Visits {@linkplain ASTDefaultValue ASTDefaultValue}. Delegates to {@link #visit(JavaNode) } if
   * unimplemented.
   */
  default void visit(ASTDefaultValue node) {
    visit((JavaNode) node);
  }
}
