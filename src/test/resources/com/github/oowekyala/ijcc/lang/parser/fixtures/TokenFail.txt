JCC_FILE
  JccGrammarFileRootImpl(JCC_GRAMMAR_FILE_ROOT)
    JccParserDeclarationImpl(JCC_PARSER_DECLARATION)
      JccParserBeginImpl(JCC_PARSER_BEGIN)
        PsiElement(PARSER_BEGIN)('PARSER_BEGIN')
        PsiElement(()('(')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('JJTreeParser')
        PsiElement())(')')
      JccJavaCompilationUnitImpl(JCC_JAVA_COMPILATION_UNIT)
        PsiElement(PACKAGE_KEYWORD)('package')
        PsiElement(IDENT)('org')
        PsiElement(.)('.')
        PsiElement(IDENT)('javacc')
        PsiElement(.)('.')
        PsiElement(IDENT)('jjtree')
        PsiElement(;)(';')
        PsiDocComment
          PsiElement(DOC_COMMENT_START)('/**')
          PsiElement(DOC_COMMENT_LEADING_ASTERISKS)('*')
          PsiElement(DOC_COMMENT_DATA)('  This is my parser declaration')
          PsiElement(DOC_COMMENT_END)('*/')
        PsiElement(public)('public')
        PsiElement(CLASS_KEYWORD)('class')
        PsiElement(IDENT)('JJTreeParser')
        PsiElement({)('{')
        PsiElement(})('}')
      JccParserEndImpl(JCC_PARSER_END)
        PsiElement(PARSER_END)('PARSER_END')
        PsiElement(()('(')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('JJTreeParser')
        PsiElement())(')')
    JccRegexProductionImpl(JCC_REGEX_PRODUCTION)
      JccRegexKindImpl(JCC_REGEX_KIND)
        PsiElement(TOKEN)('TOKEN')
      PsiElement(:)(':')
      PsiElement({)('{')
      JccRegexSpecImpl(JCC_REGEX_SPEC)
        JccNamedRegularExpressionImpl(JCC_NAMED_REGULAR_EXPRESSION)
          PsiElement(<)('<')
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('LEFT_WILDCARD')
          PsiElement(:)(':')
          JccRegexSequenceEltImpl(JCC_REGEX_SEQUENCE_ELT)
            JccLiteralRegexUnitImpl(JCC_LITERAL_REGEX_UNIT)
              PsiElement(STRING_LITERAL)('"*:"')
            JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
              PsiElement(<)('<')
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('NCNAME')
              PsiElement(>)('>')
          PsiElement(>)('>')
      PsiElement(|)('|')
      JccRegexSpecImpl(JCC_REGEX_SPEC)
        JccNamedRegularExpressionImpl(JCC_NAMED_REGULAR_EXPRESSION)
          PsiElement(<)('<')
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('RIGHT_WILDCARD')
          PsiElement(:)(':')
          JccRegexSequenceEltImpl(JCC_REGEX_SEQUENCE_ELT)
            JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
              PsiElement(<)('<')
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('NCNAME')
              PsiElement(>)('>')
            JccLiteralRegexUnitImpl(JCC_LITERAL_REGEX_UNIT)
              PsiElement(STRING_LITERAL)('":*"')
          PsiElement(>)('>')
      PsiElement(|)('|')
      PsiComment(END_OF_LINE_COMMENT)('// The actual lexical grammar for NCName is: any name except <CHAR>* ":" <CHAR>*')
      JccRegexSpecImpl(JCC_REGEX_SPEC)
        JccNamedRegularExpressionImpl(JCC_NAMED_REGULAR_EXPRESSION)
          PsiElement(<)('<')
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('NCNAME')
          PsiElement(:)(':')
          JccLiteralRegexUnitImpl(JCC_LITERAL_REGEX_UNIT)
            PsiElement(STRING_LITERAL)('"foo"')
          PsiElement(>)('>')
      PsiErrorElement:'|' unexpected
        PsiElement(|)('|')
      PsiElement(IDENT)('fo')
      PsiElement(})('}')
    JccBnfProductionImpl(lookaheads)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaReturnTypeImpl(JCC_JAVA_RETURN_TYPE)
          PsiElement(void)('void')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('lookaheads')
        PsiElement(()('(')
        PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
        JccLiteralRegularExpressionImpl(JCC_LITERAL_REGULAR_EXPRESSION)
          JccLiteralRegexUnitImpl(JCC_LITERAL_REGEX_UNIT)
            PsiElement(STRING_LITERAL)('"fo"')
      PsiElement(})('}')