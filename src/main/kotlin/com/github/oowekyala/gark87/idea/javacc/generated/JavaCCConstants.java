/* Generated By:JJTree(jj2IntelliJ output version)&JavaCC(jj2IntelliJ output version): Do not edit this line. JavaCCConstants.java */

package com.github.oowekyala.gark87.idea.javacc.generated;

import com.intellij.psi.tree.IElementType;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaCCConstants {

    /* MORE */
    IElementType MORE = new org.gark87.idea.javacc.generated.JavaCCElementType("|MORE|");
    /* SKIP */
    IElementType SKIP = new org.gark87.idea.javacc.generated.JavaCCElementType("|SKIP|");
    /** RegularExpression Id. */
    IElementType _OPTIONS = new org.gark87.idea.javacc.generated.JavaCCElementType("options");
    /** RegularExpression Id. */
    IElementType _LOOKAHEAD = new org.gark87.idea.javacc.generated.JavaCCElementType("LOOKAHEAD");
    /** RegularExpression Id. */
    IElementType _IGNORE_CASE = new org.gark87.idea.javacc.generated.JavaCCElementType("IGNORE_CASE");
    /** RegularExpression Id. */
    IElementType _PARSER_BEGIN = new org.gark87.idea.javacc.generated.JavaCCElementType("PARSER_BEGIN");
    /** RegularExpression Id. */
    IElementType _PARSER_END = new org.gark87.idea.javacc.generated.JavaCCElementType("PARSER_END");
    /** RegularExpression Id. */
    IElementType _JAVACODE = new org.gark87.idea.javacc.generated.JavaCCElementType("JAVACODE");
    /** RegularExpression Id. */
    IElementType _TOKEN = new org.gark87.idea.javacc.generated.JavaCCElementType("TOKEN");
    /** RegularExpression Id. */
    IElementType _SPECIAL_TOKEN = new org.gark87.idea.javacc.generated.JavaCCElementType("SPECIAL_TOKEN");
    /** RegularExpression Id. */
    IElementType _MORE = new org.gark87.idea.javacc.generated.JavaCCElementType("MORE");
    /** RegularExpression Id. */
    IElementType _SKIP = new org.gark87.idea.javacc.generated.JavaCCElementType("SKIP");
    /** RegularExpression Id. */
    IElementType _TOKEN_MGR_DECLS = new org.gark87.idea.javacc.generated.JavaCCElementType("TOKEN_MGR_DECLS");
    /** RegularExpression Id. */
    IElementType _EOF = new org.gark87.idea.javacc.generated.JavaCCElementType("EOF");
    /** RegularExpression Id. */
    IElementType SINGLE_LINE_COMMENT = new org.gark87.idea.javacc.generated.JavaCCElementType("<SINGLE_LINE_COMMENT>");
    /** RegularExpression Id. */
    IElementType FORMAL_COMMENT = new org.gark87.idea.javacc.generated.JavaCCElementType("*/");
    /** RegularExpression Id. */
    IElementType MULTI_LINE_COMMENT = new org.gark87.idea.javacc.generated.JavaCCElementType("*/");
    /** RegularExpression Id. */
    IElementType ABSTRACT = new org.gark87.idea.javacc.generated.JavaCCElementType("abstract");
    /** RegularExpression Id. */
    IElementType ASSERT = new org.gark87.idea.javacc.generated.JavaCCElementType("assert");
    /** RegularExpression Id. */
    IElementType BOOLEAN = new org.gark87.idea.javacc.generated.JavaCCElementType("boolean");
    /** RegularExpression Id. */
    IElementType BREAK = new org.gark87.idea.javacc.generated.JavaCCElementType("break");
    /** RegularExpression Id. */
    IElementType BYTE = new org.gark87.idea.javacc.generated.JavaCCElementType("byte");
    /** RegularExpression Id. */
    IElementType CASE = new org.gark87.idea.javacc.generated.JavaCCElementType("case");
    /** RegularExpression Id. */
    IElementType CATCH = new org.gark87.idea.javacc.generated.JavaCCElementType("catch");
    /** RegularExpression Id. */
    IElementType CHAR = new org.gark87.idea.javacc.generated.JavaCCElementType("char");
    /** RegularExpression Id. */
    IElementType CLASS = new org.gark87.idea.javacc.generated.JavaCCElementType("class");
    /** RegularExpression Id. */
    IElementType CONST = new org.gark87.idea.javacc.generated.JavaCCElementType("const");
    /** RegularExpression Id. */
    IElementType CONTINUE = new org.gark87.idea.javacc.generated.JavaCCElementType("continue");
    /** RegularExpression Id. */
    IElementType _DEFAULT = new org.gark87.idea.javacc.generated.JavaCCElementType("default");
    /** RegularExpression Id. */
    IElementType DO = new org.gark87.idea.javacc.generated.JavaCCElementType("do");
    /** RegularExpression Id. */
    IElementType DOUBLE = new org.gark87.idea.javacc.generated.JavaCCElementType("double");
    /** RegularExpression Id. */
    IElementType ELSE = new org.gark87.idea.javacc.generated.JavaCCElementType("else");
    /** RegularExpression Id. */
    IElementType ENUM = new org.gark87.idea.javacc.generated.JavaCCElementType("enum");
    /** RegularExpression Id. */
    IElementType EXTENDS = new org.gark87.idea.javacc.generated.JavaCCElementType("extends");
    /** RegularExpression Id. */
    IElementType FALSE = new org.gark87.idea.javacc.generated.JavaCCElementType("false");
    /** RegularExpression Id. */
    IElementType FINAL = new org.gark87.idea.javacc.generated.JavaCCElementType("final");
    /** RegularExpression Id. */
    IElementType FINALLY = new org.gark87.idea.javacc.generated.JavaCCElementType("finally");
    /** RegularExpression Id. */
    IElementType FLOAT = new org.gark87.idea.javacc.generated.JavaCCElementType("float");
    /** RegularExpression Id. */
    IElementType FOR = new org.gark87.idea.javacc.generated.JavaCCElementType("for");
    /** RegularExpression Id. */
    IElementType GOTO = new org.gark87.idea.javacc.generated.JavaCCElementType("goto");
    /** RegularExpression Id. */
    IElementType IF = new org.gark87.idea.javacc.generated.JavaCCElementType("if");
    /** RegularExpression Id. */
    IElementType IMPLEMENTS = new org.gark87.idea.javacc.generated.JavaCCElementType("implements");
    /** RegularExpression Id. */
    IElementType IMPORT = new org.gark87.idea.javacc.generated.JavaCCElementType("import");
    /** RegularExpression Id. */
    IElementType INSTANCEOF = new org.gark87.idea.javacc.generated.JavaCCElementType("instanceof");
    /** RegularExpression Id. */
    IElementType INT = new org.gark87.idea.javacc.generated.JavaCCElementType("int");
    /** RegularExpression Id. */
    IElementType INTERFACE = new org.gark87.idea.javacc.generated.JavaCCElementType("interface");
    /** RegularExpression Id. */
    IElementType LONG = new org.gark87.idea.javacc.generated.JavaCCElementType("long");
    /** RegularExpression Id. */
    IElementType NATIVE = new org.gark87.idea.javacc.generated.JavaCCElementType("native");
    /** RegularExpression Id. */
    IElementType NEW = new org.gark87.idea.javacc.generated.JavaCCElementType("new");
    /** RegularExpression Id. */
    IElementType NULL = new org.gark87.idea.javacc.generated.JavaCCElementType("null");
    /** RegularExpression Id. */
    IElementType PACKAGE = new org.gark87.idea.javacc.generated.JavaCCElementType("package");
    /** RegularExpression Id. */
    IElementType PRIVATE = new org.gark87.idea.javacc.generated.JavaCCElementType("private");
    /** RegularExpression Id. */
    IElementType PROTECTED = new org.gark87.idea.javacc.generated.JavaCCElementType("protected");
    /** RegularExpression Id. */
    IElementType PUBLIC = new org.gark87.idea.javacc.generated.JavaCCElementType("public");
    /** RegularExpression Id. */
    IElementType RETURN = new org.gark87.idea.javacc.generated.JavaCCElementType("return");
    /** RegularExpression Id. */
    IElementType SHORT = new org.gark87.idea.javacc.generated.JavaCCElementType("short");
    /** RegularExpression Id. */
    IElementType STATIC = new org.gark87.idea.javacc.generated.JavaCCElementType("static");
    /** RegularExpression Id. */
    IElementType STRICTFP = new org.gark87.idea.javacc.generated.JavaCCElementType("strictfp");
    /** RegularExpression Id. */
    IElementType SUPER = new org.gark87.idea.javacc.generated.JavaCCElementType("super");
    /** RegularExpression Id. */
    IElementType SWITCH = new org.gark87.idea.javacc.generated.JavaCCElementType("switch");
    /** RegularExpression Id. */
    IElementType SYNCHRONIZED = new org.gark87.idea.javacc.generated.JavaCCElementType("synchronized");
    /** RegularExpression Id. */
    IElementType THIS = new org.gark87.idea.javacc.generated.JavaCCElementType("this");
    /** RegularExpression Id. */
    IElementType THROW = new org.gark87.idea.javacc.generated.JavaCCElementType("throw");
    /** RegularExpression Id. */
    IElementType THROWS = new org.gark87.idea.javacc.generated.JavaCCElementType("throws");
    /** RegularExpression Id. */
    IElementType TRANSIENT = new org.gark87.idea.javacc.generated.JavaCCElementType("transient");
    /** RegularExpression Id. */
    IElementType TRUE = new org.gark87.idea.javacc.generated.JavaCCElementType("true");
    /** RegularExpression Id. */
    IElementType TRY = new org.gark87.idea.javacc.generated.JavaCCElementType("try");
    /** RegularExpression Id. */
    IElementType VOID = new org.gark87.idea.javacc.generated.JavaCCElementType("void");
    /** RegularExpression Id. */
    IElementType VOLATILE = new org.gark87.idea.javacc.generated.JavaCCElementType("volatile");
    /** RegularExpression Id. */
    IElementType WHILE = new org.gark87.idea.javacc.generated.JavaCCElementType("while");
    /** RegularExpression Id. */
    IElementType INTEGER_LITERAL = new org.gark87.idea.javacc.generated.JavaCCElementType("<INTEGER_LITERAL>");
    /** RegularExpression Id. */
    IElementType DECIMAL_LITERAL = new org.gark87.idea.javacc.generated.JavaCCElementType("<DECIMAL_LITERAL>");
    /** RegularExpression Id. */
    IElementType HEX_LITERAL = new org.gark87.idea.javacc.generated.JavaCCElementType("<HEX_LITERAL>");
    /** RegularExpression Id. */
    IElementType OCTAL_LITERAL = new org.gark87.idea.javacc.generated.JavaCCElementType("<OCTAL_LITERAL>");
    /** RegularExpression Id. */
    IElementType FLOATING_POINT_LITERAL = new org.gark87.idea.javacc.generated.JavaCCElementType("<FLOATING_POINT_LITERAL>");
    /** RegularExpression Id. */
    IElementType DECIMAL_FLOATING_POINT_LITERAL = new org.gark87.idea.javacc.generated.JavaCCElementType("<DECIMAL_FLOATING_POINT_LITERAL>");
    /** RegularExpression Id. */
    IElementType DECIMAL_EXPONENT = new org.gark87.idea.javacc.generated.JavaCCElementType("<DECIMAL_EXPONENT>");
    /** RegularExpression Id. */
    IElementType HEXADECIMAL_FLOATING_POINT_LITERAL = new org.gark87.idea.javacc.generated.JavaCCElementType("<HEXADECIMAL_FLOATING_POINT_LITERAL>");
    /** RegularExpression Id. */
    IElementType HEXADECIMAL_EXPONENT = new org.gark87.idea.javacc.generated.JavaCCElementType("<HEXADECIMAL_EXPONENT>");
    /** RegularExpression Id. */
    IElementType CHARACTER_LITERAL = new org.gark87.idea.javacc.generated.JavaCCElementType("<CHARACTER_LITERAL>");
    /** RegularExpression Id. */
    IElementType STRING_LITERAL = new org.gark87.idea.javacc.generated.JavaCCElementType("<STRING_LITERAL>");
    /** RegularExpression Id. */
    IElementType IDENTIFIER = new org.gark87.idea.javacc.generated.JavaCCElementType("<IDENTIFIER>");
    /** RegularExpression Id. */
    IElementType LETTER = new org.gark87.idea.javacc.generated.JavaCCElementType("<LETTER>");
    /** RegularExpression Id. */
    IElementType PART_LETTER = new org.gark87.idea.javacc.generated.JavaCCElementType("<PART_LETTER>");
    /** RegularExpression Id. */
    IElementType LPAREN = new org.gark87.idea.javacc.generated.JavaCCElementType("(");
    /** RegularExpression Id. */
    IElementType RPAREN = new org.gark87.idea.javacc.generated.JavaCCElementType(")");
    /** RegularExpression Id. */
    IElementType LBRACE = new org.gark87.idea.javacc.generated.JavaCCElementType("{");
    /** RegularExpression Id. */
    IElementType RBRACE = new org.gark87.idea.javacc.generated.JavaCCElementType("}");
    /** RegularExpression Id. */
    IElementType LBRACKET = new org.gark87.idea.javacc.generated.JavaCCElementType("[");
    /** RegularExpression Id. */
    IElementType RBRACKET = new org.gark87.idea.javacc.generated.JavaCCElementType("]");
    /** RegularExpression Id. */
    IElementType SEMICOLON = new org.gark87.idea.javacc.generated.JavaCCElementType(";");
    /** RegularExpression Id. */
    IElementType COMMA = new org.gark87.idea.javacc.generated.JavaCCElementType(",");
    /** RegularExpression Id. */
    IElementType DOT = new org.gark87.idea.javacc.generated.JavaCCElementType(".");
    /** RegularExpression Id. */
    IElementType ASSIGN = new org.gark87.idea.javacc.generated.JavaCCElementType("=");
    /** RegularExpression Id. */
    IElementType GT = new org.gark87.idea.javacc.generated.JavaCCElementType(">");
    /** RegularExpression Id. */
    IElementType LT = new org.gark87.idea.javacc.generated.JavaCCElementType("<");
    /** RegularExpression Id. */
    IElementType BANG = new org.gark87.idea.javacc.generated.JavaCCElementType("!");
    /** RegularExpression Id. */
    IElementType TILDE = new org.gark87.idea.javacc.generated.JavaCCElementType("~");
    /** RegularExpression Id. */
    IElementType HOOK = new org.gark87.idea.javacc.generated.JavaCCElementType("?");
    /** RegularExpression Id. */
    IElementType COLON = new org.gark87.idea.javacc.generated.JavaCCElementType(":");
    /** RegularExpression Id. */
    IElementType EQ = new org.gark87.idea.javacc.generated.JavaCCElementType("==");
    /** RegularExpression Id. */
    IElementType LE = new org.gark87.idea.javacc.generated.JavaCCElementType("<=");
    /** RegularExpression Id. */
    IElementType GE = new org.gark87.idea.javacc.generated.JavaCCElementType(">=");
    /** RegularExpression Id. */
    IElementType NE = new org.gark87.idea.javacc.generated.JavaCCElementType("!=");
    /** RegularExpression Id. */
    IElementType SC_OR = new org.gark87.idea.javacc.generated.JavaCCElementType("||");
    /** RegularExpression Id. */
    IElementType SC_AND = new org.gark87.idea.javacc.generated.JavaCCElementType("&&");
    /** RegularExpression Id. */
    IElementType INCR = new org.gark87.idea.javacc.generated.JavaCCElementType("++");
    /** RegularExpression Id. */
    IElementType DECR = new org.gark87.idea.javacc.generated.JavaCCElementType("--");
    /** RegularExpression Id. */
    IElementType PLUS = new org.gark87.idea.javacc.generated.JavaCCElementType("+");
    /** RegularExpression Id. */
    IElementType MINUS = new org.gark87.idea.javacc.generated.JavaCCElementType("-");
    /** RegularExpression Id. */
    IElementType STAR = new org.gark87.idea.javacc.generated.JavaCCElementType("*");
    /** RegularExpression Id. */
    IElementType SLASH = new org.gark87.idea.javacc.generated.JavaCCElementType("/");
    /** RegularExpression Id. */
    IElementType BIT_AND = new org.gark87.idea.javacc.generated.JavaCCElementType("&");
    /** RegularExpression Id. */
    IElementType BIT_OR = new org.gark87.idea.javacc.generated.JavaCCElementType("|");
    /** RegularExpression Id. */
    IElementType XOR = new org.gark87.idea.javacc.generated.JavaCCElementType("^");
    /** RegularExpression Id. */
    IElementType REM = new org.gark87.idea.javacc.generated.JavaCCElementType("%");
    /** RegularExpression Id. */
    IElementType PLUSASSIGN = new org.gark87.idea.javacc.generated.JavaCCElementType("+=");
    /** RegularExpression Id. */
    IElementType MINUSASSIGN = new org.gark87.idea.javacc.generated.JavaCCElementType("-=");
    /** RegularExpression Id. */
    IElementType STARASSIGN = new org.gark87.idea.javacc.generated.JavaCCElementType("*=");
    /** RegularExpression Id. */
    IElementType SLASHASSIGN = new org.gark87.idea.javacc.generated.JavaCCElementType("/=");
    /** RegularExpression Id. */
    IElementType ANDASSIGN = new org.gark87.idea.javacc.generated.JavaCCElementType("&=");
    /** RegularExpression Id. */
    IElementType ORASSIGN = new org.gark87.idea.javacc.generated.JavaCCElementType("|=");
    /** RegularExpression Id. */
    IElementType XORASSIGN = new org.gark87.idea.javacc.generated.JavaCCElementType("^=");
    /** RegularExpression Id. */
    IElementType REMASSIGN = new org.gark87.idea.javacc.generated.JavaCCElementType("%=");
    /** RegularExpression Id. */
    IElementType SHARP = new org.gark87.idea.javacc.generated.JavaCCElementType("#");
    /** RegularExpression Id. */
    IElementType ELLIPSIS = new org.gark87.idea.javacc.generated.JavaCCElementType("...");
    /** RegularExpression Id. */
    IElementType AT = new org.gark87.idea.javacc.generated.JavaCCElementType("@");
    /** RegularExpression Id. */
    IElementType ERROR = new org.gark87.idea.javacc.generated.JavaCCElementType("<ERROR>");


}
