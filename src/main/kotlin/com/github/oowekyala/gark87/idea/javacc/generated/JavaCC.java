/* Generated By:JJTree(jj2IntelliJ output version)&JavaCC(jj2IntelliJ output version): Do not edit this line. JavaCC.java */

package com.github.oowekyala.gark87.idea.javacc.generated;

import com.intellij.lang.PsiBuilder;
import com.intellij.psi.tree.IElementType;

import java.util.ArrayList;


public class JavaCC/*@bgen(jjtree)*/ implements JavaCCTreeConstants, JavaCCConstants {/*@bgen(jjtree)*/


    private final PsiBuilder builder;
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();
    private int jj_la;
    private ArrayList<IElementType> tokens = new ArrayList<IElementType>();
    private int currentIndex = 0;
    private int maxIndex = 0;
    private boolean reportEof = false;


    public JavaCC(PsiBuilder builder) {
        this.builder = builder;
    }


    /*
     * Returns true if the next token is not in the FOLLOW list of "expansion".
     * It is used to decide when the end of an "expansion" has been reached.
     */
    private boolean notTailOfExpansionUnit() {
        IElementType t;
        t = getTokenType(1);
        if (t == BIT_OR || t == COMMA || t == RPAREN || t == RBRACE || t == RBRACKET || t == null) {
            return false;
        }
        return true;
    }


    /************************************************
     * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
     ************************************************/
    final public void javacc_input() {
        /*@bgen(jjtree) javacc_input */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        javacc_options();
        jj_consume_token(_PARSER_BEGIN);
        jj_consume_token(LPAREN);
        identifier();
        jj_consume_token(RPAREN);
        CompilationUnit();
        jj_consume_token(_PARSER_END);
        jj_consume_token(LPAREN);
        identifier();
        jj_consume_token(RPAREN);
        label_1:
        while (true) {
            production();
            IElementType type_2 = getType();
            if (type_2 == _JAVACODE || type_2 == _TOKEN || type_2 == _SPECIAL_TOKEN || type_2 == _MORE || type_2 == _SKIP || type_2 == _TOKEN_MGR_DECLS || type_2 == BOOLEAN || type_2 == BYTE || type_2 == CHAR || type_2 == DOUBLE || type_2 == FLOAT || type_2 == INT || type_2 == LONG || type_2 == PRIVATE || type_2 == PROTECTED || type_2 == PUBLIC || type_2 == SHORT || type_2 == VOID || type_2 == IDENTIFIER || type_2 == LT) {
                ;
            } else {
                break label_1;
            }
        }
        //assert (builder.eof());
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTJAVACC_INPUT);
                }
            }
        }
    }


    final public void javacc_options() {
        /*@bgen(jjtree) javacc_options */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_5 = getType();
        if (type_5 == _OPTIONS) {
            jj_consume_token(_OPTIONS);
            jj_consume_token(LBRACE);
            label_3:
            while (true) {
                IElementType type_4 = getType();
                if (type_4 == _LOOKAHEAD || type_4 == _IGNORE_CASE || type_4 == STATIC || type_4 == IDENTIFIER) {
                    ;
                } else {
                    break label_3;
                }
                option_binding();
            }
            jj_consume_token(RBRACE);
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTJAVACC_OPTIONS);
                }
            }
        }
    }


    final public void option_binding() {
        /*@bgen(jjtree) option_binding */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_6 = getType();
        if (type_6 == IDENTIFIER) {
            jj_consume_token(IDENTIFIER);
        } else if (type_6 == _LOOKAHEAD) {
            jj_consume_token(_LOOKAHEAD);
        } else if (type_6 == _IGNORE_CASE) {
            jj_consume_token(_IGNORE_CASE);
        } else if (type_6 == STATIC) {
            jj_consume_token(STATIC);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        jj_consume_token(ASSIGN);
        IElementType type_7 = getType();
        if (type_7 == INTEGER_LITERAL) {
            IntegerLiteral();
        } else if (type_7 == FALSE || type_7 == TRUE) {
            BooleanLiteral();
        } else if (type_7 == STRING_LITERAL) {
            StringLiteral();
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        jj_consume_token(SEMICOLON);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTOPTION_BINDING);
                }
            }
        }
    }


    final public void production() {
        /*@bgen(jjtree) production */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_8 = getType();
        if (type_8 == _JAVACODE) {
            javacode_production();
        } else if (type_8 == _TOKEN || type_8 == _SPECIAL_TOKEN || type_8 == _MORE || type_8 == _SKIP || type_8 == LT) {
            regular_expr_production();
        } else if (type_8 == _TOKEN_MGR_DECLS) {
            token_manager_decls();
        } else if (type_8 == BOOLEAN || type_8 == BYTE || type_8 == CHAR || type_8 == DOUBLE || type_8 == FLOAT || type_8 == INT || type_8 == LONG || type_8 == PRIVATE || type_8 == PROTECTED || type_8 == PUBLIC || type_8 == SHORT || type_8 == VOID || type_8 == IDENTIFIER) {
            bnf_production();
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTPRODUCTION);
                }
            }
        }
    }


    final public void javacode_production() {
        /*@bgen(jjtree) javacode_production */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(_JAVACODE);
        AccessModifier();
        ResultType();
        identifier();
        FormalParameters();
        IElementType type_11 = getType();
        if (type_11 == THROWS) {
            jj_consume_token(THROWS);
            Name();
            label_9:
            while (true) {
                IElementType type_10 = getType();
                if (type_10 == COMMA) {
                    ;
                } else {
                    break label_9;
                }
                jj_consume_token(COMMA);
                Name();
            }
        } else {
            ;
        }
        IElementType type_12 = getType();
        if (type_12 == SHARP) {
            node_descriptor();
        } else {
            ;
        }
        Block();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTJAVACODE_PRODUCTION);
                }
            }
        }
    }


    final public void bnf_production() {
        /*@bgen(jjtree) bnf_production */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        AccessModifier();
        ResultType();
        identifier();
        FormalParameters();
        IElementType type_15 = getType();
        if (type_15 == THROWS) {
            jj_consume_token(THROWS);
            Name();
            label_13:
            while (true) {
                IElementType type_14 = getType();
                if (type_14 == COMMA) {
                    ;
                } else {
                    break label_13;
                }
                jj_consume_token(COMMA);
                Name();
            }
        } else {
            ;
        }
        IElementType type_16 = getType();
        if (type_16 == SHARP) {
            node_descriptor();
        } else {
            ;
        }
        jj_consume_token(COLON);
        Block();
        jj_consume_token(LBRACE);
        expansion_choices();
        jj_consume_token(RBRACE);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTBNF_PRODUCTION);
                }
            }
        }
    }


    final public void AccessModifier() {
        /*@bgen(jjtree) AccessModifier */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_18 = getType();
        if (type_18 == PRIVATE || type_18 == PROTECTED || type_18 == PUBLIC) {
            IElementType type_17 = getType();
            if (type_17 == PUBLIC) {
                jj_consume_token(PUBLIC);
            } else if (type_17 == PROTECTED) {
                jj_consume_token(PROTECTED);
            } else if (type_17 == PRIVATE) {
                jj_consume_token(PRIVATE);
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTACCESSMODIFIER);
                }
            }
        }
    }


    final public void regular_expr_production() {
        /*@bgen(jjtree) regular_expr_production */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_22 = getType();
        if (type_22 == LT) {
            if (jj_2_1(2)) {
                jj_consume_token(LT);
                jj_consume_token(STAR);
                jj_consume_token(GT);
            } else {
                IElementType type_21 = getType();
                if (type_21 == LT) {
                    jj_consume_token(LT);
                    jj_consume_token(IDENTIFIER);
                    label_19:
                    while (true) {
                        IElementType type_20 = getType();
                        if (type_20 == COMMA) {
                            ;
                        } else {
                            break label_19;
                        }
                        jj_consume_token(COMMA);
                        jj_consume_token(IDENTIFIER);
                    }
                    jj_consume_token(GT);
                } else {
                    if (!builder.eof()) {
                        PsiBuilder.Marker errorMarker = builder.mark();
                        String text = builder.getTokenText();
                        builder.advanceLexer();
                        errorMarker.error("Unexpected token " + text);
                    } else {
                        builder.error("Unexpected end of file");
                    }

                }
            }
        } else {
            ;
        }
        regexpr_kind();
        IElementType type_23 = getType();
        if (type_23 == LBRACKET) {
            jj_consume_token(LBRACKET);
            jj_consume_token(_IGNORE_CASE);
            jj_consume_token(RBRACKET);
        } else {
            ;
        }
        jj_consume_token(COLON);
        jj_consume_token(LBRACE);
        regexpr_spec();
        label_24:
        while (true) {
            IElementType type_25 = getType();
            if (type_25 == BIT_OR) {
                ;
            } else {
                break label_24;
            }
            jj_consume_token(BIT_OR);
            regexpr_spec();
        }
        jj_consume_token(RBRACE);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTREGULAR_EXPR_PRODUCTION);
                }
            }
        }
    }


    final public void token_manager_decls() {
        /*@bgen(jjtree) token_manager_decls */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(_TOKEN_MGR_DECLS);
        jj_consume_token(COLON);
        ClassOrInterfaceBody();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTTOKEN_MANAGER_DECLS);
                }
            }
        }
    }


    final public void regexpr_kind() {
        /*@bgen(jjtree) regexpr_kind */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_26 = getType();
        if (type_26 == _TOKEN) {
            jj_consume_token(_TOKEN);
        } else if (type_26 == _SPECIAL_TOKEN) {
            jj_consume_token(_SPECIAL_TOKEN);
        } else if (type_26 == _SKIP) {
            jj_consume_token(_SKIP);
        } else if (type_26 == _MORE) {
            jj_consume_token(_MORE);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTREGEXPR_KIND);
                }
            }
        }
    }


    final public void regexpr_spec() {
        /*@bgen(jjtree) regexpr_spec */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        regular_expression();
        IElementType type_27 = getType();
        if (type_27 == LBRACE) {
            Block();
        } else {
            ;
        }
        IElementType type_28 = getType();
        if (type_28 == COLON) {
            jj_consume_token(COLON);
            jj_consume_token(IDENTIFIER);
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTREGEXPR_SPEC);
                }
            }
        }
    }


    final public void expansion_choices() {
        /*@bgen(jjtree) expansion_choices */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        expansion();
        label_29:
        while (true) {
            IElementType type_30 = getType();
            if (type_30 == BIT_OR) {
                ;
            } else {
                break label_29;
            }
            jj_consume_token(BIT_OR);
            expansion();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTEXPANSION_CHOICES);
                }
            }
        }
    }


    final public void expansion() {
        /*@bgen(jjtree) expansion */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_31 = getType();
        if (type_31 == _LOOKAHEAD) {
            jj_consume_token(_LOOKAHEAD);
            jj_consume_token(LPAREN);
            local_lookahead();
            jj_consume_token(RPAREN);
        } else {
            ;
        }
        label_32:
        while (true) {
            expansion_unit();
            IElementType type_33 = getType();
            if (type_33 == SHARP) {
                node_descriptor();
            } else {
                ;
            }
            if (notTailOfExpansionUnit()) {
                ;
            } else {
                break label_32;
            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTEXPANSION);
                }
            }
        }
    }


    final public void local_lookahead() {
        /*@bgen(jjtree) local_lookahead */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        boolean commaAtEnd = false, emptyLA = true;
        IElementType type_34 = getType();
        if (type_34 == INTEGER_LITERAL) {
            IntegerLiteral();
            emptyLA = false;
        } else {
            ;
        }
        if (!emptyLA && (getTokenType(1) != RPAREN)) {
            jj_consume_token(COMMA);
            commaAtEnd = true;
        } else {
            ;
        }
        if (getTokenType(1) != RPAREN && getTokenType(1) != LBRACE) {
            expansion_choices();
            emptyLA = false;
            commaAtEnd = false;
        } else {
            ;
        }
        if (!emptyLA && !commaAtEnd && (getTokenType(1) != RPAREN)) {
            jj_consume_token(COMMA);
            commaAtEnd = true;
        } else {
            ;
        }
        if (emptyLA || commaAtEnd) {
            jj_consume_token(LBRACE);
            Expression();
            jj_consume_token(RBRACE);
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTLOCAL_LOOKAHEAD);
                }
            }
        }
    }


    final public void expansion_unit() {
        /*@bgen(jjtree) expansion_unit */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_42 = getType();
        if (type_42 == _LOOKAHEAD) {
            jj_consume_token(_LOOKAHEAD);
            jj_consume_token(LPAREN);
            local_lookahead();
            jj_consume_token(RPAREN);
        } else if (type_42 == LBRACE) {
            Block();
        } else if (type_42 == LBRACKET) {
            jj_consume_token(LBRACKET);
            expansion_choices();
            jj_consume_token(RBRACKET);
        } else if (type_42 == TRY) {
            jj_consume_token(TRY);
            jj_consume_token(LBRACE);
            expansion_choices();
            jj_consume_token(RBRACE);
            label_35:
            while (true) {
                IElementType type_36 = getType();
                if (type_36 == CATCH) {
                    ;
                } else {
                    break label_35;
                }
                jj_consume_token(CATCH);
                jj_consume_token(LPAREN);
                Name();
                jj_consume_token(IDENTIFIER);
                jj_consume_token(RPAREN);
                Block();
            }
            IElementType type_37 = getType();
            if (type_37 == FINALLY) {
                jj_consume_token(FINALLY);
                Block();
            } else {
                ;
            }
        } else {
            if (jj_2_4(2147483647)) {
                if (jj_2_2(2147483647)) {
                    PrimaryExpression();
                    jj_consume_token(ASSIGN);
                } else {
                    ;
                }
                if (jj_2_3(2147483647)) {
                    identifier();
                    Arguments();
                } else {
                    IElementType type_39 = getType();
                    if (type_39 == STRING_LITERAL || type_39 == LT) {
                        regular_expression();
                        IElementType type_38 = getType();
                        if (type_38 == DOT) {
                            jj_consume_token(DOT);
                            jj_consume_token(IDENTIFIER);
                        } else {
                            ;
                        }
                    } else {
                        if (!builder.eof()) {
                            PsiBuilder.Marker errorMarker = builder.mark();
                            String text = builder.getTokenText();
                            builder.advanceLexer();
                            errorMarker.error("Unexpected token " + text);
                        } else {
                            builder.error("Unexpected end of file");
                        }

                    }
                }
            } else {
                IElementType type_43 = getType();
                if (type_43 == LPAREN) {
                    jj_consume_token(LPAREN);
                    expansion_choices();
                    jj_consume_token(RPAREN);
                    IElementType type_41 = getType();
                    if (type_41 == HOOK || type_41 == PLUS || type_41 == STAR) {
                        IElementType type_40 = getType();
                        if (type_40 == PLUS) {
                            jj_consume_token(PLUS);
                        } else if (type_40 == STAR) {
                            jj_consume_token(STAR);
                        } else if (type_40 == HOOK) {
                            jj_consume_token(HOOK);
                        } else {
                            if (!builder.eof()) {
                                PsiBuilder.Marker errorMarker = builder.mark();
                                String text = builder.getTokenText();
                                builder.advanceLexer();
                                errorMarker.error("Unexpected token " + text);
                            } else {
                                builder.error("Unexpected end of file");
                            }

                        }
                    } else {
                        ;
                    }
                } else {
                    if (!builder.eof()) {
                        PsiBuilder.Marker errorMarker = builder.mark();
                        String text = builder.getTokenText();
                        builder.advanceLexer();
                        errorMarker.error("Unexpected token " + text);
                    } else {
                        builder.error("Unexpected end of file");
                    }

                }
            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTEXPANSION_UNIT);
                }
            }
        }
    }


    final public void regular_expression() {
        /*@bgen(jjtree) regular_expression */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_46 = getType();
        if (type_46 == STRING_LITERAL) {
            StringLiteral();
        } else {
            if (jj_2_5(3)) {
                jj_consume_token(LT);
                IElementType type_45 = getType();
                if (type_45 == _OPTIONS || type_45 == IDENTIFIER || type_45 == SHARP) {
                    IElementType type_44 = getType();
                    if (type_44 == SHARP) {
                        jj_consume_token(SHARP);
                    } else {
                        ;
                    }
                    identifier();
                    jj_consume_token(COLON);
                } else {
                    ;
                }
                complex_regular_expression_choices();
                jj_consume_token(GT);
            } else if (jj_2_6(2)) {
                jj_consume_token(LT);
                identifier();
                jj_consume_token(GT);
            } else {
                IElementType type_47 = getType();
                if (type_47 == LT) {
                    jj_consume_token(LT);
                    jj_consume_token(_EOF);
                    jj_consume_token(GT);
                } else {
                    if (!builder.eof()) {
                        PsiBuilder.Marker errorMarker = builder.mark();
                        String text = builder.getTokenText();
                        builder.advanceLexer();
                        errorMarker.error("Unexpected token " + text);
                    } else {
                        builder.error("Unexpected end of file");
                    }

                }
            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTREGULAR_EXPRESSION);
                }
            }
        }
    }


    final public void complex_regular_expression_choices() {
        /*@bgen(jjtree) complex_regular_expression_choices */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        complex_regular_expression();
        label_48:
        while (true) {
            IElementType type_49 = getType();
            if (type_49 == BIT_OR) {
                ;
            } else {
                break label_48;
            }
            jj_consume_token(BIT_OR);
            complex_regular_expression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION_CHOICES);
                }
            }
        }
    }


    final public void complex_regular_expression() {
        /*@bgen(jjtree) complex_regular_expression */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        label_50:
        while (true) {
            complex_regular_expression_unit();
            IElementType type_51 = getType();
            if (type_51 == STRING_LITERAL || type_51 == LPAREN || type_51 == LBRACKET || type_51 == LT || type_51 == TILDE) {
                ;
            } else {
                break label_50;
            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION);
                }
            }
        }
    }


    final public void complex_regular_expression_unit() {
        /*@bgen(jjtree) complex_regular_expression_unit */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_56 = getType();
        if (type_56 == STRING_LITERAL) {
            StringLiteral();
        } else if (type_56 == LT) {
            jj_consume_token(LT);
            identifier();
            jj_consume_token(GT);
        } else if (type_56 == LBRACKET || type_56 == TILDE) {
            character_list();
        } else if (type_56 == LPAREN) {
            jj_consume_token(LPAREN);
            complex_regular_expression_choices();
            jj_consume_token(RPAREN);
            IElementType type_55 = getType();
            if (type_55 == LBRACE || type_55 == HOOK || type_55 == PLUS || type_55 == STAR) {
                IElementType type_54 = getType();
                if (type_54 == PLUS) {
                    jj_consume_token(PLUS);
                } else if (type_54 == STAR) {
                    jj_consume_token(STAR);
                } else if (type_54 == HOOK) {
                    jj_consume_token(HOOK);
                } else if (type_54 == LBRACE) {
                    jj_consume_token(LBRACE);
                    IntegerLiteral();
                    IElementType type_53 = getType();
                    if (type_53 == COMMA) {
                        jj_consume_token(COMMA);
                        IElementType type_52 = getType();
                        if (type_52 == INTEGER_LITERAL) {
                            IntegerLiteral();
                        } else {
                            ;
                        }
                    } else {
                        ;
                    }
                    jj_consume_token(RBRACE);
                } else {
                    if (!builder.eof()) {
                        PsiBuilder.Marker errorMarker = builder.mark();
                        String text = builder.getTokenText();
                        builder.advanceLexer();
                        errorMarker.error("Unexpected token " + text);
                    } else {
                        builder.error("Unexpected end of file");
                    }

                }
            } else {
                ;
            }
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION_UNIT);
                }
            }
        }
    }


    final public void character_list() {
        /*@bgen(jjtree) character_list */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_57 = getType();
        if (type_57 == TILDE) {
            jj_consume_token(TILDE);
        } else {
            ;
        }
        jj_consume_token(LBRACKET);
        IElementType type_60 = getType();
        if (type_60 == STRING_LITERAL) {
            character_descriptor();
            label_58:
            while (true) {
                IElementType type_59 = getType();
                if (type_59 == COMMA) {
                    ;
                } else {
                    break label_58;
                }
                jj_consume_token(COMMA);
                character_descriptor();
            }
        } else {
            ;
        }
        jj_consume_token(RBRACKET);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCHARACTER_LIST);
                }
            }
        }
    }


    final public void character_descriptor() {
        /*@bgen(jjtree) character_descriptor */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        StringLiteral();
        IElementType type_61 = getType();
        if (type_61 == MINUS) {
            jj_consume_token(MINUS);
            StringLiteral();
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCHARACTER_DESCRIPTOR);
                }
            }
        }
    }


    final public void identifier() {
        /*@bgen(jjtree) identifier */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_62 = getType();
        if (type_62 == IDENTIFIER) {
            jj_consume_token(IDENTIFIER);
        } else if (type_62 == _OPTIONS) {
            jj_consume_token(_OPTIONS);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTIDENTIFIER);
                }
            }
        }
    }


    /**********************************************
     * THE JJTREE PRODUCTIONS START HERE          *
     **********************************************/
    final public void node_descriptor() {
        /*@bgen(jjtree) node_descriptor */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(SHARP);
        IElementType type_63 = getType();
        if (type_63 == _LOOKAHEAD || type_63 == _IGNORE_CASE || type_63 == _PARSER_BEGIN || type_63 == _PARSER_END || type_63 == _JAVACODE || type_63 == _TOKEN || type_63 == _SPECIAL_TOKEN || type_63 == _MORE || type_63 == _SKIP || type_63 == _TOKEN_MGR_DECLS || type_63 == _EOF || type_63 == IDENTIFIER) {
            Name();
        } else if (type_63 == VOID) {
            jj_consume_token(VOID);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        IElementType type_65 = getType();
        if (type_65 == LPAREN) {
            jj_consume_token(LPAREN);
            IElementType type_64 = getType();
            if (type_64 == GT) {
                jj_consume_token(GT);
            } else {
                ;
            }
            node_descriptor_expression();
            jj_consume_token(RPAREN);
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTNODE_DESCRIPTOR);
                }
            }
        }
    }


    void node_descriptor_expression() {
        /*@bgen(jjtree) node_descriptor_expression */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        try {
            IElementType kind;
            int nesting = 1;
            while (true) {
                kind = getType();
                if (kind == _EOF) {
                    builder.error("Unexpected <EOF>");
                }
                if (kind == LPAREN) {
                    nesting++;
                }
                if (kind == RPAREN) {
                    nesting--;
                    if (nesting == 0) {
                        break;
                    }
                }
                builder.advanceLexer();
            }/*@bgen(jjtree)*/
        } finally {
            if (jjtc000) {
                {
                    if (jjtc000) {
                        jjtc000 = false;
                        {
                            jjtn000.done(JJTNODE_DESCRIPTOR_EXPRESSION);
                        }
                    }
                }
            }
        }
    }


    /**********************************************
     * THE JAVA GRAMMAR SPECIFICATION STARTS HERE *
     **********************************************/

    /*
     * The Java grammar is modified to use sequences of tokens
     * for the missing tokens - those that include "<<" and ">>".
     */

    /*
     * The following production defines Java identifiers - it
     * includes the reserved words of JavaCC also.
     */
    final public void JavaIdentifier() {
        /*@bgen(jjtree) JavaIdentifier */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_66 = getType();
        if (type_66 == IDENTIFIER) {
            jj_consume_token(IDENTIFIER);
        } else if (type_66 == _LOOKAHEAD) {
            jj_consume_token(_LOOKAHEAD);
        } else if (type_66 == _IGNORE_CASE) {
            jj_consume_token(_IGNORE_CASE);
        } else if (type_66 == _PARSER_BEGIN) {
            jj_consume_token(_PARSER_BEGIN);
        } else if (type_66 == _PARSER_END) {
            jj_consume_token(_PARSER_END);
        } else if (type_66 == _JAVACODE) {
            jj_consume_token(_JAVACODE);
        } else if (type_66 == _TOKEN) {
            jj_consume_token(_TOKEN);
        } else if (type_66 == _SPECIAL_TOKEN) {
            jj_consume_token(_SPECIAL_TOKEN);
        } else if (type_66 == _MORE) {
            jj_consume_token(_MORE);
        } else if (type_66 == _SKIP) {
            jj_consume_token(_SKIP);
        } else if (type_66 == _TOKEN_MGR_DECLS) {
            jj_consume_token(_TOKEN_MGR_DECLS);
        } else if (type_66 == _EOF) {
            jj_consume_token(_EOF);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTJAVAIDENTIFIER);
                }
            }
        }
    }


    /*
     * Program structuring syntax follows.
     */
    final public void CompilationUnit() {
        /*@bgen(jjtree) CompilationUnit */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        if (jj_2_7(2147483647)) {
            PackageDeclaration();
        } else {
            ;
        }
        label_67:
        while (true) {
            IElementType type_68 = getType();
            if (type_68 == IMPORT) {
                ;
            } else {
                break label_67;
            }
            ImportDeclaration();
        }
        label_69:
        while (true) {
            IElementType type_70 = getType();
            if (type_70 == ABSTRACT || type_70 == CLASS || type_70 == ENUM || type_70 == FINAL || type_70 == INTERFACE || type_70 == NATIVE || type_70 == PRIVATE || type_70 == PROTECTED || type_70 == PUBLIC || type_70 == STATIC || type_70 == STRICTFP || type_70 == SYNCHRONIZED || type_70 == TRANSIENT || type_70 == VOLATILE || type_70 == SEMICOLON || type_70 == AT) {
                ;
            } else {
                break label_69;
            }
            TypeDeclaration();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCOMPILATIONUNIT);
                }
            }
        }
    }


    final public void PackageDeclaration() {
        /*@bgen(jjtree) PackageDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        Modifiers();
        jj_consume_token(PACKAGE);
        Name();
        jj_consume_token(SEMICOLON);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTPACKAGEDECLARATION);
                }
            }
        }
    }


    final public void ImportDeclaration() {
        /*@bgen(jjtree) ImportDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(IMPORT);
        IElementType type_71 = getType();
        if (type_71 == STATIC) {
            jj_consume_token(STATIC);
        } else {
            ;
        }
        Name();
        IElementType type_72 = getType();
        if (type_72 == DOT) {
            jj_consume_token(DOT);
            jj_consume_token(STAR);
        } else {
            ;
        }
        jj_consume_token(SEMICOLON);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTIMPORTDECLARATION);
                }
            }
        }
    }


    /*
     * Modifiers. We match all modifiers in a single rule to reduce the chances of
     * syntax errors for simple modifier mistakes. It will also enable us to give
     * better error messages.
     */
    final public void Modifiers() {
        /*@bgen(jjtree) Modifiers */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        label_73:
        while (true) {
            if (jj_2_8(2)) {
                ;
            } else {
                break label_73;
            }
            IElementType type_74 = getType();
            if (type_74 == PUBLIC) {
                jj_consume_token(PUBLIC);
            } else if (type_74 == STATIC) {
                jj_consume_token(STATIC);
            } else if (type_74 == PROTECTED) {
                jj_consume_token(PROTECTED);
            } else if (type_74 == PRIVATE) {
                jj_consume_token(PRIVATE);
            } else if (type_74 == FINAL) {
                jj_consume_token(FINAL);
            } else if (type_74 == ABSTRACT) {
                jj_consume_token(ABSTRACT);
            } else if (type_74 == SYNCHRONIZED) {
                jj_consume_token(SYNCHRONIZED);
            } else if (type_74 == NATIVE) {
                jj_consume_token(NATIVE);
            } else if (type_74 == TRANSIENT) {
                jj_consume_token(TRANSIENT);
            } else if (type_74 == VOLATILE) {
                jj_consume_token(VOLATILE);
            } else if (type_74 == STRICTFP) {
                jj_consume_token(STRICTFP);
            } else if (type_74 == AT) {
                Annotation();
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTMODIFIERS);
                }
            }
        }
    }


    /*
     * Declaration syntax follows.
     */
    final public void TypeDeclaration() {
        /*@bgen(jjtree) TypeDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_76 = getType();
        if (type_76 == SEMICOLON) {
            jj_consume_token(SEMICOLON);
        } else if (type_76 == ABSTRACT || type_76 == CLASS || type_76 == ENUM || type_76 == FINAL || type_76 == INTERFACE || type_76 == NATIVE || type_76 == PRIVATE || type_76 == PROTECTED || type_76 == PUBLIC || type_76 == STATIC || type_76 == STRICTFP || type_76 == SYNCHRONIZED || type_76 == TRANSIENT || type_76 == VOLATILE || type_76 == AT) {
            Modifiers();
            IElementType type_75 = getType();
            if (type_75 == CLASS || type_75 == INTERFACE) {
                ClassOrInterfaceDeclaration();
            } else if (type_75 == ENUM) {
                EnumDeclaration();
            } else if (type_75 == AT) {
                AnnotationTypeDeclaration();
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTTYPEDECLARATION);
                }
            }
        }
    }


    final public void ClassOrInterfaceDeclaration() {
        /*@bgen(jjtree) ClassOrInterfaceDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_77 = getType();
        if (type_77 == CLASS) {
            jj_consume_token(CLASS);
        } else if (type_77 == INTERFACE) {
            jj_consume_token(INTERFACE);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        jj_consume_token(IDENTIFIER);
        IElementType type_78 = getType();
        if (type_78 == LT) {
            TypeParameters();
        } else {
            ;
        }
        IElementType type_79 = getType();
        if (type_79 == EXTENDS) {
            ExtendsList();
        } else {
            ;
        }
        IElementType type_80 = getType();
        if (type_80 == IMPLEMENTS) {
            ImplementsList();
        } else {
            ;
        }
        ClassOrInterfaceBody();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCLASSORINTERFACEDECLARATION);
                }
            }
        }
    }


    final public void ExtendsList() {
        /*@bgen(jjtree) ExtendsList */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(EXTENDS);
        ClassOrInterfaceType();
        label_81:
        while (true) {
            IElementType type_82 = getType();
            if (type_82 == COMMA) {
                ;
            } else {
                break label_81;
            }
            jj_consume_token(COMMA);
            ClassOrInterfaceType();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTEXTENDSLIST);
                }
            }
        }
    }


    final public void ImplementsList() {
        /*@bgen(jjtree) ImplementsList */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(IMPLEMENTS);
        ClassOrInterfaceType();
        label_83:
        while (true) {
            IElementType type_84 = getType();
            if (type_84 == COMMA) {
                ;
            } else {
                break label_83;
            }
            jj_consume_token(COMMA);
            ClassOrInterfaceType();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTIMPLEMENTSLIST);
                }
            }
        }
    }


    final public void EnumDeclaration() {
        /*@bgen(jjtree) EnumDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(ENUM);
        jj_consume_token(IDENTIFIER);
        IElementType type_85 = getType();
        if (type_85 == IMPLEMENTS) {
            ImplementsList();
        } else {
            ;
        }
        EnumBody();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTENUMDECLARATION);
                }
            }
        }
    }


    final public void EnumBody() {
        /*@bgen(jjtree) EnumBody */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(LBRACE);
        IElementType type_87 = getType();
        if (type_87 == ABSTRACT || type_87 == FINAL || type_87 == NATIVE || type_87 == PRIVATE || type_87 == PROTECTED || type_87 == PUBLIC || type_87 == STATIC || type_87 == STRICTFP || type_87 == SYNCHRONIZED || type_87 == TRANSIENT || type_87 == VOLATILE || type_87 == IDENTIFIER || type_87 == AT) {
            EnumConstant();
            label_86:
            while (true) {
                if (jj_2_9(2)) {
                    ;
                } else {
                    break label_86;
                }
                jj_consume_token(COMMA);
                EnumConstant();
            }
        } else {
            ;
        }
        IElementType type_88 = getType();
        if (type_88 == COMMA) {
            jj_consume_token(COMMA);
        } else {
            ;
        }
        IElementType type_91 = getType();
        if (type_91 == SEMICOLON) {
            jj_consume_token(SEMICOLON);
            label_89:
            while (true) {
                IElementType type_90 = getType();
                if (type_90 == ABSTRACT || type_90 == BOOLEAN || type_90 == BYTE || type_90 == CHAR || type_90 == CLASS || type_90 == DOUBLE || type_90 == ENUM || type_90 == FINAL || type_90 == FLOAT || type_90 == INT || type_90 == INTERFACE || type_90 == LONG || type_90 == NATIVE || type_90 == PRIVATE || type_90 == PROTECTED || type_90 == PUBLIC || type_90 == SHORT || type_90 == STATIC || type_90 == STRICTFP || type_90 == SYNCHRONIZED || type_90 == TRANSIENT || type_90 == VOID || type_90 == VOLATILE || type_90 == IDENTIFIER || type_90 == LBRACE || type_90 == SEMICOLON || type_90 == LT || type_90 == AT) {
                    ;
                } else {
                    break label_89;
                }
                ClassOrInterfaceBodyDeclaration();
            }
        } else {
            ;
        }
        jj_consume_token(RBRACE);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTENUMBODY);
                }
            }
        }
    }


    final public void EnumConstant() {
        /*@bgen(jjtree) EnumConstant */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        Modifiers();
        jj_consume_token(IDENTIFIER);
        IElementType type_92 = getType();
        if (type_92 == LPAREN) {
            Arguments();
        } else {
            ;
        }
        IElementType type_93 = getType();
        if (type_93 == LBRACE) {
            ClassOrInterfaceBody();
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTENUMCONSTANT);
                }
            }
        }
    }


    final public void TypeParameters() {
        /*@bgen(jjtree) TypeParameters */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(LT);
        TypeParameter();
        label_94:
        while (true) {
            IElementType type_95 = getType();
            if (type_95 == COMMA) {
                ;
            } else {
                break label_94;
            }
            jj_consume_token(COMMA);
            TypeParameter();
        }
        jj_consume_token(GT);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTTYPEPARAMETERS);
                }
            }
        }
    }


    final public void TypeParameter() {
        /*@bgen(jjtree) TypeParameter */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(IDENTIFIER);
        IElementType type_96 = getType();
        if (type_96 == EXTENDS) {
            TypeBound();
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTTYPEPARAMETER);
                }
            }
        }
    }


    final public void TypeBound() {
        /*@bgen(jjtree) TypeBound */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(EXTENDS);
        ClassOrInterfaceType();
        label_97:
        while (true) {
            IElementType type_98 = getType();
            if (type_98 == BIT_AND) {
                ;
            } else {
                break label_97;
            }
            jj_consume_token(BIT_AND);
            ClassOrInterfaceType();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTTYPEBOUND);
                }
            }
        }
    }


    final public void ClassOrInterfaceBody() {
        /*@bgen(jjtree) ClassOrInterfaceBody */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(LBRACE);
        label_99:
        while (true) {
            IElementType type_100 = getType();
            if (type_100 == ABSTRACT || type_100 == BOOLEAN || type_100 == BYTE || type_100 == CHAR || type_100 == CLASS || type_100 == DOUBLE || type_100 == ENUM || type_100 == FINAL || type_100 == FLOAT || type_100 == INT || type_100 == INTERFACE || type_100 == LONG || type_100 == NATIVE || type_100 == PRIVATE || type_100 == PROTECTED || type_100 == PUBLIC || type_100 == SHORT || type_100 == STATIC || type_100 == STRICTFP || type_100 == SYNCHRONIZED || type_100 == TRANSIENT || type_100 == VOID || type_100 == VOLATILE || type_100 == IDENTIFIER || type_100 == LBRACE || type_100 == SEMICOLON || type_100 == LT || type_100 == AT) {
                ;
            } else {
                break label_99;
            }
            ClassOrInterfaceBodyDeclaration();
        }
        jj_consume_token(RBRACE);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCLASSORINTERFACEBODY);
                }
            }
        }
    }


    final public void ClassOrInterfaceBodyDeclaration() {
        /*@bgen(jjtree) ClassOrInterfaceBodyDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        if (jj_2_12(2)) {
            Initializer();
        } else {
            IElementType type_103 = getType();
            if (type_103 == ABSTRACT || type_103 == BOOLEAN || type_103 == BYTE || type_103 == CHAR || type_103 == CLASS || type_103 == DOUBLE || type_103 == ENUM || type_103 == FINAL || type_103 == FLOAT || type_103 == INT || type_103 == INTERFACE || type_103 == LONG || type_103 == NATIVE || type_103 == PRIVATE || type_103 == PROTECTED || type_103 == PUBLIC || type_103 == SHORT || type_103 == STATIC || type_103 == STRICTFP || type_103 == SYNCHRONIZED || type_103 == TRANSIENT || type_103 == VOID || type_103 == VOLATILE || type_103 == IDENTIFIER || type_103 == LT || type_103 == AT) {
                Modifiers();
                IElementType type_101 = getType();
                if (type_101 == CLASS || type_101 == INTERFACE) {
                    ClassOrInterfaceDeclaration();
                } else if (type_101 == ENUM) {
                    EnumDeclaration();
                } else {
                    if (jj_2_10(2147483647)) {
                        ConstructorDeclaration();
                    } else if (jj_2_11(2147483647)) {
                        FieldDeclaration();
                    } else {
                        IElementType type_102 = getType();
                        if (type_102 == BOOLEAN || type_102 == BYTE || type_102 == CHAR || type_102 == DOUBLE || type_102 == FLOAT || type_102 == INT || type_102 == LONG || type_102 == SHORT || type_102 == VOID || type_102 == IDENTIFIER || type_102 == LT) {
                            MethodDeclaration();
                        } else {
                            if (!builder.eof()) {
                                PsiBuilder.Marker errorMarker = builder.mark();
                                String text = builder.getTokenText();
                                builder.advanceLexer();
                                errorMarker.error("Unexpected token " + text);
                            } else {
                                builder.error("Unexpected end of file");
                            }

                        }
                    }
                }
            } else if (type_103 == SEMICOLON) {
                jj_consume_token(SEMICOLON);
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCLASSORINTERFACEBODYDECLARATION);
                }
            }
        }
    }


    final public void FieldDeclaration() {
        /*@bgen(jjtree) FieldDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        Type();
        VariableDeclarator();
        label_104:
        while (true) {
            IElementType type_105 = getType();
            if (type_105 == COMMA) {
                ;
            } else {
                break label_104;
            }
            jj_consume_token(COMMA);
            VariableDeclarator();
        }
        jj_consume_token(SEMICOLON);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTFIELDDECLARATION);
                }
            }
        }
    }


    final public void VariableDeclarator() {
        /*@bgen(jjtree) VariableDeclarator */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        VariableDeclaratorId();
        IElementType type_106 = getType();
        if (type_106 == ASSIGN) {
            jj_consume_token(ASSIGN);
            VariableInitializer();
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTVARIABLEDECLARATOR);
                }
            }
        }
    }


    final public void VariableDeclaratorId() {
        /*@bgen(jjtree) VariableDeclaratorId */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(IDENTIFIER);
        label_107:
        while (true) {
            IElementType type_108 = getType();
            if (type_108 == LBRACKET) {
                ;
            } else {
                break label_107;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTVARIABLEDECLARATORID);
                }
            }
        }
    }


    final public void VariableInitializer() {
        /*@bgen(jjtree) VariableInitializer */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_109 = getType();
        if (type_109 == LBRACE) {
            ArrayInitializer();
        } else if (type_109 == _LOOKAHEAD || type_109 == _IGNORE_CASE || type_109 == _PARSER_BEGIN || type_109 == _PARSER_END || type_109 == _JAVACODE || type_109 == _TOKEN || type_109 == _SPECIAL_TOKEN || type_109 == _MORE || type_109 == _SKIP || type_109 == _TOKEN_MGR_DECLS || type_109 == _EOF || type_109 == BOOLEAN || type_109 == BYTE || type_109 == CHAR || type_109 == DOUBLE || type_109 == FALSE || type_109 == FLOAT || type_109 == INT || type_109 == LONG || type_109 == NEW || type_109 == NULL || type_109 == SHORT || type_109 == SUPER || type_109 == THIS || type_109 == TRUE || type_109 == VOID || type_109 == INTEGER_LITERAL || type_109 == FLOATING_POINT_LITERAL || type_109 == CHARACTER_LITERAL || type_109 == STRING_LITERAL || type_109 == IDENTIFIER || type_109 == LPAREN || type_109 == BANG || type_109 == TILDE || type_109 == INCR || type_109 == DECR || type_109 == PLUS || type_109 == MINUS) {
            Expression();
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTVARIABLEINITIALIZER);
                }
            }
        }
    }


    final public void ArrayInitializer() {
        /*@bgen(jjtree) ArrayInitializer */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(LBRACE);
        IElementType type_111 = getType();
        if (type_111 == _LOOKAHEAD || type_111 == _IGNORE_CASE || type_111 == _PARSER_BEGIN || type_111 == _PARSER_END || type_111 == _JAVACODE || type_111 == _TOKEN || type_111 == _SPECIAL_TOKEN || type_111 == _MORE || type_111 == _SKIP || type_111 == _TOKEN_MGR_DECLS || type_111 == _EOF || type_111 == BOOLEAN || type_111 == BYTE || type_111 == CHAR || type_111 == DOUBLE || type_111 == FALSE || type_111 == FLOAT || type_111 == INT || type_111 == LONG || type_111 == NEW || type_111 == NULL || type_111 == SHORT || type_111 == SUPER || type_111 == THIS || type_111 == TRUE || type_111 == VOID || type_111 == INTEGER_LITERAL || type_111 == FLOATING_POINT_LITERAL || type_111 == CHARACTER_LITERAL || type_111 == STRING_LITERAL || type_111 == IDENTIFIER || type_111 == LPAREN || type_111 == LBRACE || type_111 == BANG || type_111 == TILDE || type_111 == INCR || type_111 == DECR || type_111 == PLUS || type_111 == MINUS) {
            VariableInitializer();
            label_110:
            while (true) {
                if (jj_2_13(2)) {
                    ;
                } else {
                    break label_110;
                }
                jj_consume_token(COMMA);
                VariableInitializer();
            }
        } else {
            ;
        }
        IElementType type_112 = getType();
        if (type_112 == COMMA) {
            jj_consume_token(COMMA);
        } else {
            ;
        }
        jj_consume_token(RBRACE);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTARRAYINITIALIZER);
                }
            }
        }
    }


    final public void MethodDeclaration() {
        /*@bgen(jjtree) MethodDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_113 = getType();
        if (type_113 == LT) {
            TypeParameters();
        } else {
            ;
        }
        ResultType();
        MethodDeclarator();
        IElementType type_114 = getType();
        if (type_114 == THROWS) {
            jj_consume_token(THROWS);
            NameList();
        } else {
            ;
        }
        IElementType type_115 = getType();
        if (type_115 == LBRACE) {
            Block();
        } else if (type_115 == SEMICOLON) {
            jj_consume_token(SEMICOLON);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTMETHODDECLARATION);
                }
            }
        }
    }


    final public void MethodDeclarator() {
        /*@bgen(jjtree) MethodDeclarator */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(IDENTIFIER);
        FormalParameters();
        label_116:
        while (true) {
            IElementType type_117 = getType();
            if (type_117 == LBRACKET) {
                ;
            } else {
                break label_116;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTMETHODDECLARATOR);
                }
            }
        }
    }


    final public void FormalParameters() {
        /*@bgen(jjtree) FormalParameters */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(LPAREN);
        IElementType type_120 = getType();
        if (type_120 == ABSTRACT || type_120 == BOOLEAN || type_120 == BYTE || type_120 == CHAR || type_120 == DOUBLE || type_120 == FINAL || type_120 == FLOAT || type_120 == INT || type_120 == LONG || type_120 == NATIVE || type_120 == PRIVATE || type_120 == PROTECTED || type_120 == PUBLIC || type_120 == SHORT || type_120 == STATIC || type_120 == STRICTFP || type_120 == SYNCHRONIZED || type_120 == TRANSIENT || type_120 == VOLATILE || type_120 == IDENTIFIER || type_120 == AT) {
            FormalParameter();
            label_118:
            while (true) {
                IElementType type_119 = getType();
                if (type_119 == COMMA) {
                    ;
                } else {
                    break label_118;
                }
                jj_consume_token(COMMA);
                FormalParameter();
            }
        } else {
            ;
        }
        jj_consume_token(RPAREN);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTFORMALPARAMETERS);
                }
            }
        }
    }


    final public void FormalParameter() {
        /*@bgen(jjtree) FormalParameter */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        Modifiers();
        Type();
        IElementType type_121 = getType();
        if (type_121 == ELLIPSIS) {
            jj_consume_token(ELLIPSIS);
        } else {
            ;
        }
        VariableDeclaratorId();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTFORMALPARAMETER);
                }
            }
        }
    }


    final public void ConstructorDeclaration() {
        /*@bgen(jjtree) ConstructorDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_122 = getType();
        if (type_122 == LT) {
            TypeParameters();
        } else {
            ;
        }
        jj_consume_token(IDENTIFIER);
        FormalParameters();
        IElementType type_123 = getType();
        if (type_123 == THROWS) {
            jj_consume_token(THROWS);
            NameList();
        } else {
            ;
        }
        jj_consume_token(LBRACE);
        if (jj_2_14(2147483647)) {
            ExplicitConstructorInvocation();
        } else {
            ;
        }
        label_124:
        while (true) {
            IElementType type_125 = getType();
            if (type_125 == _LOOKAHEAD || type_125 == _IGNORE_CASE || type_125 == _PARSER_BEGIN || type_125 == _PARSER_END || type_125 == _JAVACODE || type_125 == _TOKEN || type_125 == _SPECIAL_TOKEN || type_125 == _MORE || type_125 == _SKIP || type_125 == _TOKEN_MGR_DECLS || type_125 == _EOF || type_125 == ABSTRACT || type_125 == ASSERT || type_125 == BOOLEAN || type_125 == BREAK || type_125 == BYTE || type_125 == CHAR || type_125 == CLASS || type_125 == CONTINUE || type_125 == DO || type_125 == DOUBLE || type_125 == FALSE || type_125 == FINAL || type_125 == FLOAT || type_125 == FOR || type_125 == IF || type_125 == INT || type_125 == INTERFACE || type_125 == LONG || type_125 == NATIVE || type_125 == NEW || type_125 == NULL || type_125 == PRIVATE || type_125 == PROTECTED || type_125 == PUBLIC || type_125 == RETURN || type_125 == SHORT || type_125 == STATIC || type_125 == STRICTFP || type_125 == SUPER || type_125 == SWITCH || type_125 == SYNCHRONIZED || type_125 == THIS || type_125 == THROW || type_125 == TRANSIENT || type_125 == TRUE || type_125 == TRY || type_125 == VOID || type_125 == VOLATILE || type_125 == WHILE || type_125 == INTEGER_LITERAL || type_125 == FLOATING_POINT_LITERAL || type_125 == CHARACTER_LITERAL || type_125 == STRING_LITERAL || type_125 == IDENTIFIER || type_125 == LPAREN || type_125 == LBRACE || type_125 == SEMICOLON || type_125 == INCR || type_125 == DECR || type_125 == AT) {
                ;
            } else {
                break label_124;
            }
            BlockStatement();
        }
        jj_consume_token(RBRACE);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCONSTRUCTORDECLARATION);
                }
            }
        }
    }


    final public void ExplicitConstructorInvocation() {
        /*@bgen(jjtree) ExplicitConstructorInvocation */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        if (jj_2_16(2147483647)) {
            jj_consume_token(THIS);
            Arguments();
            jj_consume_token(SEMICOLON);
        } else {
            IElementType type_126 = getType();
            if (type_126 == _LOOKAHEAD || type_126 == _IGNORE_CASE || type_126 == _PARSER_BEGIN || type_126 == _PARSER_END || type_126 == _JAVACODE || type_126 == _TOKEN || type_126 == _SPECIAL_TOKEN || type_126 == _MORE || type_126 == _SKIP || type_126 == _TOKEN_MGR_DECLS || type_126 == _EOF || type_126 == BOOLEAN || type_126 == BYTE || type_126 == CHAR || type_126 == DOUBLE || type_126 == FALSE || type_126 == FLOAT || type_126 == INT || type_126 == LONG || type_126 == NEW || type_126 == NULL || type_126 == SHORT || type_126 == SUPER || type_126 == THIS || type_126 == TRUE || type_126 == VOID || type_126 == INTEGER_LITERAL || type_126 == FLOATING_POINT_LITERAL || type_126 == CHARACTER_LITERAL || type_126 == STRING_LITERAL || type_126 == IDENTIFIER || type_126 == LPAREN) {
                if (jj_2_15(2)) {
                    PrimaryExpression();
                    jj_consume_token(DOT);
                } else {
                    ;
                }
                jj_consume_token(SUPER);
                Arguments();
                jj_consume_token(SEMICOLON);
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTEXPLICITCONSTRUCTORINVOCATION);
                }
            }
        }
    }


    final public void Initializer() {
        /*@bgen(jjtree) Initializer */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_127 = getType();
        if (type_127 == STATIC) {
            jj_consume_token(STATIC);
        } else {
            ;
        }
        Block();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTINITIALIZER);
                }
            }
        }
    }


    /*
     * Type, name and expression syntax follows.
     */
    final public void Type() {
        /*@bgen(jjtree) Type */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        if (jj_2_17(2)) {
            ReferenceType();
        } else {
            IElementType type_128 = getType();
            if (type_128 == BOOLEAN || type_128 == BYTE || type_128 == CHAR || type_128 == DOUBLE || type_128 == FLOAT || type_128 == INT || type_128 == LONG || type_128 == SHORT) {
                PrimitiveType();
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTTYPE);
                }
            }
        }
    }


    final public void ReferenceType() {
        /*@bgen(jjtree) ReferenceType */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_131 = getType();
        if (type_131 == BOOLEAN || type_131 == BYTE || type_131 == CHAR || type_131 == DOUBLE || type_131 == FLOAT || type_131 == INT || type_131 == LONG || type_131 == SHORT) {
            PrimitiveType();
            label_129:
            while (true) {
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
                if (jj_2_18(2)) {
                    ;
                } else {
                    break label_129;
                }
            }
        } else if (type_131 == IDENTIFIER) {
            ClassOrInterfaceType();
            label_130:
            while (true) {
                if (jj_2_19(2)) {
                    ;
                } else {
                    break label_130;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
            }
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTREFERENCETYPE);
                }
            }
        }
    }


    final public void ClassOrInterfaceType() {
        /*@bgen(jjtree) ClassOrInterfaceType */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(IDENTIFIER);
        if (jj_2_20(2)) {
            TypeArguments();
        } else {
            ;
        }
        label_132:
        while (true) {
            if (jj_2_21(2)) {
                ;
            } else {
                break label_132;
            }
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
            if (jj_2_22(2)) {
                TypeArguments();
            } else {
                ;
            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCLASSORINTERFACETYPE);
                }
            }
        }
    }


    final public void TypeArguments() {
        /*@bgen(jjtree) TypeArguments */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(LT);
        TypeArgument();
        label_133:
        while (true) {
            IElementType type_134 = getType();
            if (type_134 == COMMA) {
                ;
            } else {
                break label_133;
            }
            jj_consume_token(COMMA);
            TypeArgument();
        }
        jj_consume_token(GT);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTTYPEARGUMENTS);
                }
            }
        }
    }


    final public void TypeArgument() {
        /*@bgen(jjtree) TypeArgument */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_136 = getType();
        if (type_136 == BOOLEAN || type_136 == BYTE || type_136 == CHAR || type_136 == DOUBLE || type_136 == FLOAT || type_136 == INT || type_136 == LONG || type_136 == SHORT || type_136 == IDENTIFIER) {
            ReferenceType();
        } else if (type_136 == HOOK) {
            jj_consume_token(HOOK);
            IElementType type_135 = getType();
            if (type_135 == EXTENDS || type_135 == SUPER) {
                WildcardBounds();
            } else {
                ;
            }
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTTYPEARGUMENT);
                }
            }
        }
    }


    final public void WildcardBounds() {
        /*@bgen(jjtree) WildcardBounds */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_137 = getType();
        if (type_137 == EXTENDS) {
            jj_consume_token(EXTENDS);
            ReferenceType();
        } else if (type_137 == SUPER) {
            jj_consume_token(SUPER);
            ReferenceType();
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTWILDCARDBOUNDS);
                }
            }
        }
    }


    final public void PrimitiveType() {
        /*@bgen(jjtree) PrimitiveType */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_138 = getType();
        if (type_138 == BOOLEAN) {
            jj_consume_token(BOOLEAN);
        } else if (type_138 == CHAR) {
            jj_consume_token(CHAR);
        } else if (type_138 == BYTE) {
            jj_consume_token(BYTE);
        } else if (type_138 == SHORT) {
            jj_consume_token(SHORT);
        } else if (type_138 == INT) {
            jj_consume_token(INT);
        } else if (type_138 == LONG) {
            jj_consume_token(LONG);
        } else if (type_138 == FLOAT) {
            jj_consume_token(FLOAT);
        } else if (type_138 == DOUBLE) {
            jj_consume_token(DOUBLE);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTPRIMITIVETYPE);
                }
            }
        }
    }


    final public void ResultType() {
        /*@bgen(jjtree) ResultType */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_139 = getType();
        if (type_139 == VOID) {
            jj_consume_token(VOID);
        } else if (type_139 == BOOLEAN || type_139 == BYTE || type_139 == CHAR || type_139 == DOUBLE || type_139 == FLOAT || type_139 == INT || type_139 == LONG || type_139 == SHORT || type_139 == IDENTIFIER) {
            Type();
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTRESULTTYPE);
                }
            }
        }
    }


    final public void Name() {
        /*@bgen(jjtree) Name */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        JavaIdentifier();
        label_140:
        while (true) {
            if (jj_2_23(2)) {
                ;
            } else {
                break label_140;
            }
            jj_consume_token(DOT);
            JavaIdentifier();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTNAME);
                }
            }
        }
    }


    final public void NameList() {
        /*@bgen(jjtree) NameList */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        Name();
        label_141:
        while (true) {
            IElementType type_142 = getType();
            if (type_142 == COMMA) {
                ;
            } else {
                break label_141;
            }
            jj_consume_token(COMMA);
            Name();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTNAMELIST);
                }
            }
        }
    }


    /*
     * Expression syntax follows.
     */
    final public void Expression() {
        /*@bgen(jjtree) Expression */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        ConditionalExpression();
        if (jj_2_24(2)) {
            AssignmentOperator();
            Expression();
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTEXPRESSION);
                }
            }
        }
    }


    final public void AssignmentOperator() {
        /*@bgen(jjtree) AssignmentOperator */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_144 = getType();
        if (type_144 == ASSIGN) {
            jj_consume_token(ASSIGN);
        } else if (type_144 == STARASSIGN) {
            jj_consume_token(STARASSIGN);
        } else if (type_144 == SLASHASSIGN) {
            jj_consume_token(SLASHASSIGN);
        } else if (type_144 == REMASSIGN) {
            jj_consume_token(REMASSIGN);
        } else if (type_144 == PLUSASSIGN) {
            jj_consume_token(PLUSASSIGN);
        } else if (type_144 == MINUSASSIGN) {
            jj_consume_token(MINUSASSIGN);
        } else if (type_144 == LT) {
            jj_consume_token(LT);
            jj_consume_token(LT);
            jj_consume_token(ASSIGN);
        } else if (type_144 == GT) {
            jj_consume_token(GT);
            jj_consume_token(GT);
            IElementType type_143 = getType();
            if (type_143 == GT) {
                jj_consume_token(GT);
            } else {
                ;
            }
            jj_consume_token(ASSIGN);
        } else if (type_144 == ANDASSIGN) {
            jj_consume_token(ANDASSIGN);
        } else if (type_144 == XORASSIGN) {
            jj_consume_token(XORASSIGN);
        } else if (type_144 == ORASSIGN) {
            jj_consume_token(ORASSIGN);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTASSIGNMENTOPERATOR);
                }
            }
        }
    }


    final public void ConditionalExpression() {
        /*@bgen(jjtree) #ConditionalExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        ConditionalOrExpression();
        IElementType type_145 = getType();
        if (type_145 == HOOK) {
            jj_consume_token(HOOK);
            Expression();
            jj_consume_token(COLON);
            Expression();
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCONDITIONALEXPRESSION);
                }
            }
        }
    }


    final public void ConditionalOrExpression() {
        /*@bgen(jjtree) #ConditionalOrExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        ConditionalAndExpression();
        label_146:
        while (true) {
            IElementType type_147 = getType();
            if (type_147 == SC_OR) {
                ;
            } else {
                break label_146;
            }
            jj_consume_token(SC_OR);
            ConditionalAndExpression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCONDITIONALOREXPRESSION);
                }
            }
        }
    }


    final public void ConditionalAndExpression() {
        /*@bgen(jjtree) #ConditionalAndExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        InclusiveOrExpression();
        label_148:
        while (true) {
            IElementType type_149 = getType();
            if (type_149 == SC_AND) {
                ;
            } else {
                break label_148;
            }
            jj_consume_token(SC_AND);
            InclusiveOrExpression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCONDITIONALANDEXPRESSION);
                }
            }
        }
    }


    final public void InclusiveOrExpression() {
        /*@bgen(jjtree) #InclusiveOrExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        ExclusiveOrExpression();
        label_150:
        while (true) {
            IElementType type_151 = getType();
            if (type_151 == BIT_OR) {
                ;
            } else {
                break label_150;
            }
            jj_consume_token(BIT_OR);
            ExclusiveOrExpression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTINCLUSIVEOREXPRESSION);
                }
            }
        }
    }


    final public void ExclusiveOrExpression() {
        /*@bgen(jjtree) #ExclusiveOrExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        AndExpression();
        label_152:
        while (true) {
            IElementType type_153 = getType();
            if (type_153 == XOR) {
                ;
            } else {
                break label_152;
            }
            jj_consume_token(XOR);
            AndExpression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTEXCLUSIVEOREXPRESSION);
                }
            }
        }
    }


    final public void AndExpression() {
        /*@bgen(jjtree) #AndExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        EqualityExpression();
        label_154:
        while (true) {
            IElementType type_155 = getType();
            if (type_155 == BIT_AND) {
                ;
            } else {
                break label_154;
            }
            jj_consume_token(BIT_AND);
            EqualityExpression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTANDEXPRESSION);
                }
            }
        }
    }


    final public void EqualityExpression() {
        /*@bgen(jjtree) #EqualityExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        InstanceOfExpression();
        label_156:
        while (true) {
            IElementType type_157 = getType();
            if (type_157 == EQ || type_157 == NE) {
                ;
            } else {
                break label_156;
            }
            IElementType type_158 = getType();
            if (type_158 == EQ) {
                jj_consume_token(EQ);
            } else if (type_158 == NE) {
                jj_consume_token(NE);
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
            InstanceOfExpression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTEQUALITYEXPRESSION);
                }
            }
        }
    }


    final public void InstanceOfExpression() {
        /*@bgen(jjtree) #InstanceOfExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        RelationalExpression();
        IElementType type_159 = getType();
        if (type_159 == INSTANCEOF) {
            jj_consume_token(INSTANCEOF);
            Type();
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTINSTANCEOFEXPRESSION);
                }
            }
        }
    }


    final public void RelationalExpression() {
        /*@bgen(jjtree) #RelationalExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        ShiftExpression();
        label_160:
        while (true) {
            if (jj_2_25(2)) {
                ;
            } else {
                break label_160;
            }
            IElementType type_161 = getType();
            if (type_161 == GE) {
                jj_consume_token(GE);
            } else if (type_161 == LE) {
                jj_consume_token(LE);
            } else if (type_161 == GT) {
                jj_consume_token(GT);
            } else if (type_161 == LT) {
                jj_consume_token(LT);
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
            ShiftExpression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTRELATIONALEXPRESSION);
                }
            }
        }
    }


    final public void ShiftExpression() {
        /*@bgen(jjtree) #ShiftExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        AdditiveExpression();
        label_162:
        while (true) {
            if (jj_2_26(2)) {
                ;
            } else {
                break label_162;
            }
            IElementType type_163 = getType();
            if (type_163 == LT) {
                jj_consume_token(LT);
                jj_consume_token(LT);
            } else {
                if (jj_2_27(3)) {
                    RUNSIGNEDSHIFT();
                } else {
                    IElementType type_164 = getType();
                    if (type_164 == GT) {
                        RSIGNEDSHIFT();
                    } else {
                        if (!builder.eof()) {
                            PsiBuilder.Marker errorMarker = builder.mark();
                            String text = builder.getTokenText();
                            builder.advanceLexer();
                            errorMarker.error("Unexpected token " + text);
                        } else {
                            builder.error("Unexpected end of file");
                        }

                    }
                }
            }
            AdditiveExpression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTSHIFTEXPRESSION);
                }
            }
        }
    }


    final public void AdditiveExpression() {
        /*@bgen(jjtree) #AdditiveExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        MultiplicativeExpression();
        label_165:
        while (true) {
            IElementType type_166 = getType();
            if (type_166 == PLUS || type_166 == MINUS) {
                ;
            } else {
                break label_165;
            }
            IElementType type_167 = getType();
            if (type_167 == PLUS) {
                jj_consume_token(PLUS);
            } else if (type_167 == MINUS) {
                jj_consume_token(MINUS);
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
            MultiplicativeExpression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTADDITIVEEXPRESSION);
                }
            }
        }
    }


    final public void MultiplicativeExpression() {
        /*@bgen(jjtree) #MultiplicativeExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        UnaryExpression();
        label_168:
        while (true) {
            IElementType type_169 = getType();
            if (type_169 == STAR || type_169 == SLASH || type_169 == REM) {
                ;
            } else {
                break label_168;
            }
            IElementType type_170 = getType();
            if (type_170 == STAR) {
                jj_consume_token(STAR);
            } else if (type_170 == SLASH) {
                jj_consume_token(SLASH);
            } else if (type_170 == REM) {
                jj_consume_token(REM);
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
            UnaryExpression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTMULTIPLICATIVEEXPRESSION);
                }
            }
        }
    }


    final public void UnaryExpression() {
        /*@bgen(jjtree) UnaryExpression */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_172 = getType();
        if (type_172 == PLUS || type_172 == MINUS) {
            IElementType type_171 = getType();
            if (type_171 == PLUS) {
                jj_consume_token(PLUS);
            } else if (type_171 == MINUS) {
                jj_consume_token(MINUS);
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
            UnaryExpression();
        } else if (type_172 == INCR) {
            PreIncrementExpression();
        } else if (type_172 == DECR) {
            PreDecrementExpression();
        } else if (type_172 == _LOOKAHEAD || type_172 == _IGNORE_CASE || type_172 == _PARSER_BEGIN || type_172 == _PARSER_END || type_172 == _JAVACODE || type_172 == _TOKEN || type_172 == _SPECIAL_TOKEN || type_172 == _MORE || type_172 == _SKIP || type_172 == _TOKEN_MGR_DECLS || type_172 == _EOF || type_172 == BOOLEAN || type_172 == BYTE || type_172 == CHAR || type_172 == DOUBLE || type_172 == FALSE || type_172 == FLOAT || type_172 == INT || type_172 == LONG || type_172 == NEW || type_172 == NULL || type_172 == SHORT || type_172 == SUPER || type_172 == THIS || type_172 == TRUE || type_172 == VOID || type_172 == INTEGER_LITERAL || type_172 == FLOATING_POINT_LITERAL || type_172 == CHARACTER_LITERAL || type_172 == STRING_LITERAL || type_172 == IDENTIFIER || type_172 == LPAREN || type_172 == BANG || type_172 == TILDE) {
            UnaryExpressionNotPlusMinus();
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTUNARYEXPRESSION);
                }
            }
        }
    }


    final public void PreIncrementExpression() {
        /*@bgen(jjtree) PreIncrementExpression */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(INCR);
        PrimaryExpression();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTPREINCREMENTEXPRESSION);
                }
            }
        }
    }


    final public void PreDecrementExpression() {
        /*@bgen(jjtree) PreDecrementExpression */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(DECR);
        PrimaryExpression();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTPREDECREMENTEXPRESSION);
                }
            }
        }
    }


    final public void UnaryExpressionNotPlusMinus() {
        /*@bgen(jjtree) UnaryExpressionNotPlusMinus */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_174 = getType();
        if (type_174 == BANG || type_174 == TILDE) {
            IElementType type_173 = getType();
            if (type_173 == TILDE) {
                jj_consume_token(TILDE);
            } else if (type_173 == BANG) {
                jj_consume_token(BANG);
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
            UnaryExpression();
        } else {
            if (jj_2_28(2147483647)) {
                CastExpression();
            } else {
                IElementType type_175 = getType();
                if (type_175 == _LOOKAHEAD || type_175 == _IGNORE_CASE || type_175 == _PARSER_BEGIN || type_175 == _PARSER_END || type_175 == _JAVACODE || type_175 == _TOKEN || type_175 == _SPECIAL_TOKEN || type_175 == _MORE || type_175 == _SKIP || type_175 == _TOKEN_MGR_DECLS || type_175 == _EOF || type_175 == BOOLEAN || type_175 == BYTE || type_175 == CHAR || type_175 == DOUBLE || type_175 == FALSE || type_175 == FLOAT || type_175 == INT || type_175 == LONG || type_175 == NEW || type_175 == NULL || type_175 == SHORT || type_175 == SUPER || type_175 == THIS || type_175 == TRUE || type_175 == VOID || type_175 == INTEGER_LITERAL || type_175 == FLOATING_POINT_LITERAL || type_175 == CHARACTER_LITERAL || type_175 == STRING_LITERAL || type_175 == IDENTIFIER || type_175 == LPAREN) {
                    PostfixExpression();
                } else {
                    if (!builder.eof()) {
                        PsiBuilder.Marker errorMarker = builder.mark();
                        String text = builder.getTokenText();
                        builder.advanceLexer();
                        errorMarker.error("Unexpected token " + text);
                    } else {
                        builder.error("Unexpected end of file");
                    }

                }
            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTUNARYEXPRESSIONNOTPLUSMINUS);
                }
            }
        }
    }


    // This production is to determine lookahead only.  The LOOKAHEAD specifications
    // below are not used, but they are there just to indicate that we know about
    // this.
    final public void CastLookahead() {
        /*@bgen(jjtree) CastLookahead */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        if (jj_2_29(2)) {
            jj_consume_token(LPAREN);
            PrimitiveType();
        } else if (jj_2_30(2147483647)) {
            jj_consume_token(LPAREN);
            Type();
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        } else {
            IElementType type_177 = getType();
            if (type_177 == LPAREN) {
                jj_consume_token(LPAREN);
                Type();
                jj_consume_token(RPAREN);
                IElementType type_176 = getType();
                if (type_176 == TILDE) {
                    jj_consume_token(TILDE);
                } else if (type_176 == BANG) {
                    jj_consume_token(BANG);
                } else if (type_176 == LPAREN) {
                    jj_consume_token(LPAREN);
                } else if (type_176 == IDENTIFIER) {
                    jj_consume_token(IDENTIFIER);
                } else if (type_176 == THIS) {
                    jj_consume_token(THIS);
                } else if (type_176 == SUPER) {
                    jj_consume_token(SUPER);
                } else if (type_176 == NEW) {
                    jj_consume_token(NEW);
                } else if (type_176 == FALSE || type_176 == NULL || type_176 == TRUE || type_176 == INTEGER_LITERAL || type_176 == FLOATING_POINT_LITERAL || type_176 == CHARACTER_LITERAL || type_176 == STRING_LITERAL) {
                    Literal();
                } else {
                    if (!builder.eof()) {
                        PsiBuilder.Marker errorMarker = builder.mark();
                        String text = builder.getTokenText();
                        builder.advanceLexer();
                        errorMarker.error("Unexpected token " + text);
                    } else {
                        builder.error("Unexpected end of file");
                    }

                }
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCASTLOOKAHEAD);
                }
            }
        }
    }


    final public void PostfixExpression() {
        /*@bgen(jjtree) #PostfixExpression(> 1) */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        PrimaryExpression();
        IElementType type_179 = getType();
        if (type_179 == INCR || type_179 == DECR) {
            IElementType type_178 = getType();
            if (type_178 == INCR) {
                jj_consume_token(INCR);
            } else if (type_178 == DECR) {
                jj_consume_token(DECR);
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTPOSTFIXEXPRESSION);
                }
            }
        }
    }


    final public void CastExpression() {
        /*@bgen(jjtree) CastExpression */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        if (jj_2_31(2147483647)) {
            jj_consume_token(LPAREN);
            Type();
            jj_consume_token(RPAREN);
            UnaryExpression();
        } else {
            IElementType type_180 = getType();
            if (type_180 == LPAREN) {
                jj_consume_token(LPAREN);
                Type();
                jj_consume_token(RPAREN);
                UnaryExpressionNotPlusMinus();
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCASTEXPRESSION);
                }
            }
        }
    }


    final public void PrimaryExpression() {
        /*@bgen(jjtree) PrimaryExpression */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        PrimaryPrefix();
        label_181:
        while (true) {
            if (jj_2_32(2)) {
                ;
            } else {
                break label_181;
            }
            PrimarySuffix();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTPRIMARYEXPRESSION);
                }
            }
        }
    }


    final public void MemberSelector() {
        /*@bgen(jjtree) MemberSelector */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(DOT);
        TypeArguments();
        jj_consume_token(IDENTIFIER);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTMEMBERSELECTOR);
                }
            }
        }
    }


    final public void PrimaryPrefix() {
        /*@bgen(jjtree) PrimaryPrefix */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_182 = getType();
        if (type_182 == FALSE || type_182 == NULL || type_182 == TRUE || type_182 == INTEGER_LITERAL || type_182 == FLOATING_POINT_LITERAL || type_182 == CHARACTER_LITERAL || type_182 == STRING_LITERAL) {
            Literal();
        } else if (type_182 == THIS) {
            jj_consume_token(THIS);
        } else if (type_182 == SUPER) {
            jj_consume_token(SUPER);
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
        } else if (type_182 == LPAREN) {
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
        } else if (type_182 == NEW) {
            AllocationExpression();
        } else {
            if (jj_2_33(2147483647)) {
                ResultType();
                jj_consume_token(DOT);
                jj_consume_token(CLASS);
            } else {
                IElementType type_183 = getType();
                if (type_183 == _LOOKAHEAD || type_183 == _IGNORE_CASE || type_183 == _PARSER_BEGIN || type_183 == _PARSER_END || type_183 == _JAVACODE || type_183 == _TOKEN || type_183 == _SPECIAL_TOKEN || type_183 == _MORE || type_183 == _SKIP || type_183 == _TOKEN_MGR_DECLS || type_183 == _EOF || type_183 == IDENTIFIER) {
                    Name();
                } else {
                    if (!builder.eof()) {
                        PsiBuilder.Marker errorMarker = builder.mark();
                        String text = builder.getTokenText();
                        builder.advanceLexer();
                        errorMarker.error("Unexpected token " + text);
                    } else {
                        builder.error("Unexpected end of file");
                    }

                }
            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTPRIMARYPREFIX);
                }
            }
        }
    }


    final public void PrimarySuffix() {
        /*@bgen(jjtree) PrimarySuffix */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        if (jj_2_34(2)) {
            jj_consume_token(DOT);
            jj_consume_token(THIS);
        } else if (jj_2_35(2)) {
            jj_consume_token(DOT);
            AllocationExpression();
        } else if (jj_2_36(3)) {
            MemberSelector();
        } else {
            IElementType type_184 = getType();
            if (type_184 == LBRACKET) {
                jj_consume_token(LBRACKET);
                Expression();
                jj_consume_token(RBRACKET);
            } else if (type_184 == DOT) {
                jj_consume_token(DOT);
                jj_consume_token(IDENTIFIER);
            } else if (type_184 == LPAREN) {
                Arguments();
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTPRIMARYSUFFIX);
                }
            }
        }
    }


    final public void Literal() {
        /*@bgen(jjtree) Literal */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_185 = getType();
        if (type_185 == INTEGER_LITERAL) {
            jj_consume_token(INTEGER_LITERAL);
        } else if (type_185 == FLOATING_POINT_LITERAL) {
            jj_consume_token(FLOATING_POINT_LITERAL);
        } else if (type_185 == CHARACTER_LITERAL) {
            jj_consume_token(CHARACTER_LITERAL);
        } else if (type_185 == STRING_LITERAL) {
            jj_consume_token(STRING_LITERAL);
        } else if (type_185 == FALSE || type_185 == TRUE) {
            BooleanLiteral();
        } else if (type_185 == NULL) {
            NullLiteral();
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTLITERAL);
                }
            }
        }
    }


    final public void IntegerLiteral() {
        jj_consume_token(INTEGER_LITERAL);
    }


    final public void BooleanLiteral() {
        /*@bgen(jjtree) BooleanLiteral */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_186 = getType();
        if (type_186 == TRUE) {
            jj_consume_token(TRUE);
        } else if (type_186 == FALSE) {
            jj_consume_token(FALSE);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTBOOLEANLITERAL);
                }
            }
        }
    }


    final public void StringLiteral() {
        jj_consume_token(STRING_LITERAL);
    }


    final public void NullLiteral() {
        jj_consume_token(NULL);
    }


    final public void Arguments() {
        /*@bgen(jjtree) Arguments */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(LPAREN);
        IElementType type_187 = getType();
        if (type_187 == _LOOKAHEAD || type_187 == _IGNORE_CASE || type_187 == _PARSER_BEGIN || type_187 == _PARSER_END || type_187 == _JAVACODE || type_187 == _TOKEN || type_187 == _SPECIAL_TOKEN || type_187 == _MORE || type_187 == _SKIP || type_187 == _TOKEN_MGR_DECLS || type_187 == _EOF || type_187 == BOOLEAN || type_187 == BYTE || type_187 == CHAR || type_187 == DOUBLE || type_187 == FALSE || type_187 == FLOAT || type_187 == INT || type_187 == LONG || type_187 == NEW || type_187 == NULL || type_187 == SHORT || type_187 == SUPER || type_187 == THIS || type_187 == TRUE || type_187 == VOID || type_187 == INTEGER_LITERAL || type_187 == FLOATING_POINT_LITERAL || type_187 == CHARACTER_LITERAL || type_187 == STRING_LITERAL || type_187 == IDENTIFIER || type_187 == LPAREN || type_187 == BANG || type_187 == TILDE || type_187 == INCR || type_187 == DECR || type_187 == PLUS || type_187 == MINUS) {
            ArgumentList();
        } else {
            ;
        }
        jj_consume_token(RPAREN);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTARGUMENTS);
                }
            }
        }
    }


    final public void ArgumentList() {
        /*@bgen(jjtree) ArgumentList */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        Expression();
        label_188:
        while (true) {
            IElementType type_189 = getType();
            if (type_189 == COMMA) {
                ;
            } else {
                break label_188;
            }
            jj_consume_token(COMMA);
            Expression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTARGUMENTLIST);
                }
            }
        }
    }


    final public void AllocationExpression() {
        /*@bgen(jjtree) AllocationExpression */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        if (jj_2_37(2)) {
            jj_consume_token(NEW);
            PrimitiveType();
            ArrayDimsAndInits();
        } else {
            IElementType type_193 = getType();
            if (type_193 == NEW) {
                jj_consume_token(NEW);
                ClassOrInterfaceType();
                IElementType type_190 = getType();
                if (type_190 == LT) {
                    TypeArguments();
                } else {
                    ;
                }
                IElementType type_192 = getType();
                if (type_192 == LBRACKET) {
                    ArrayDimsAndInits();
                } else if (type_192 == LPAREN) {
                    Arguments();
                    IElementType type_191 = getType();
                    if (type_191 == LBRACE) {
                        ClassOrInterfaceBody();
                    } else {
                        ;
                    }
                } else {
                    if (!builder.eof()) {
                        PsiBuilder.Marker errorMarker = builder.mark();
                        String text = builder.getTokenText();
                        builder.advanceLexer();
                        errorMarker.error("Unexpected token " + text);
                    } else {
                        builder.error("Unexpected end of file");
                    }

                }
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTALLOCATIONEXPRESSION);
                }
            }
        }
    }


    /*
     * The third LOOKAHEAD specification below is to parse to PrimarySuffix
     * if there is an expression between the "[...]".
     */
    final public void ArrayDimsAndInits() {
        /*@bgen(jjtree) ArrayDimsAndInits */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        if (jj_2_40(2)) {
            label_194:
            while (true) {
                jj_consume_token(LBRACKET);
                Expression();
                jj_consume_token(RBRACKET);
                if (jj_2_38(2)) {
                    ;
                } else {
                    break label_194;
                }
            }
            label_195:
            while (true) {
                if (jj_2_39(2)) {
                    ;
                } else {
                    break label_195;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
            }
        } else {
            IElementType type_198 = getType();
            if (type_198 == LBRACKET) {
                label_196:
                while (true) {
                    jj_consume_token(LBRACKET);
                    jj_consume_token(RBRACKET);
                    IElementType type_197 = getType();
                    if (type_197 == LBRACKET) {
                        ;
                    } else {
                        break label_196;
                    }
                }
                ArrayInitializer();
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTARRAYDIMSANDINITS);
                }
            }
        }
    }


    /*
     * Statement syntax follows.
     */
    final public void Statement() {
        if (jj_2_41(2)) {
            LabeledStatement();
        } else {
            IElementType type_199 = getType();
            if (type_199 == ASSERT) {
                AssertStatement();
            } else if (type_199 == LBRACE) {
                Block();
            } else if (type_199 == SEMICOLON) {
                EmptyStatement();
            } else if (type_199 == _LOOKAHEAD || type_199 == _IGNORE_CASE || type_199 == _PARSER_BEGIN || type_199 == _PARSER_END || type_199 == _JAVACODE || type_199 == _TOKEN || type_199 == _SPECIAL_TOKEN || type_199 == _MORE || type_199 == _SKIP || type_199 == _TOKEN_MGR_DECLS || type_199 == _EOF || type_199 == BOOLEAN || type_199 == BYTE || type_199 == CHAR || type_199 == DOUBLE || type_199 == FALSE || type_199 == FLOAT || type_199 == INT || type_199 == LONG || type_199 == NEW || type_199 == NULL || type_199 == SHORT || type_199 == SUPER || type_199 == THIS || type_199 == TRUE || type_199 == VOID || type_199 == INTEGER_LITERAL || type_199 == FLOATING_POINT_LITERAL || type_199 == CHARACTER_LITERAL || type_199 == STRING_LITERAL || type_199 == IDENTIFIER || type_199 == LPAREN || type_199 == INCR || type_199 == DECR) {
                StatementExpression();
                jj_consume_token(SEMICOLON);
            } else if (type_199 == SWITCH) {
                SwitchStatement();
            } else if (type_199 == IF) {
                IfStatement();
            } else if (type_199 == WHILE) {
                WhileStatement();
            } else if (type_199 == DO) {
                DoStatement();
            } else if (type_199 == FOR) {
                ForStatement();
            } else if (type_199 == BREAK) {
                BreakStatement();
            } else if (type_199 == CONTINUE) {
                ContinueStatement();
            } else if (type_199 == RETURN) {
                ReturnStatement();
            } else if (type_199 == THROW) {
                ThrowStatement();
            } else if (type_199 == SYNCHRONIZED) {
                SynchronizedStatement();
            } else if (type_199 == TRY) {
                TryStatement();
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
    }


    final public void AssertStatement() {
        /*@bgen(jjtree) AssertStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(ASSERT);
        Expression();
        IElementType type_200 = getType();
        if (type_200 == COLON) {
            jj_consume_token(COLON);
            Expression();
        } else {
            ;
        }
        jj_consume_token(SEMICOLON);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTASSERTSTATEMENT);
                }
            }
        }
    }


    final public void LabeledStatement() {
        /*@bgen(jjtree) LabeledStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
        Statement();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTLABELEDSTATEMENT);
                }
            }
        }
    }


    final public void Block() {
        /*@bgen(jjtree) Block */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(LBRACE);
        label_201:
        while (true) {
            IElementType type_202 = getType();
            if (type_202 == _LOOKAHEAD || type_202 == _IGNORE_CASE || type_202 == _PARSER_BEGIN || type_202 == _PARSER_END || type_202 == _JAVACODE || type_202 == _TOKEN || type_202 == _SPECIAL_TOKEN || type_202 == _MORE || type_202 == _SKIP || type_202 == _TOKEN_MGR_DECLS || type_202 == _EOF || type_202 == ABSTRACT || type_202 == ASSERT || type_202 == BOOLEAN || type_202 == BREAK || type_202 == BYTE || type_202 == CHAR || type_202 == CLASS || type_202 == CONTINUE || type_202 == DO || type_202 == DOUBLE || type_202 == FALSE || type_202 == FINAL || type_202 == FLOAT || type_202 == FOR || type_202 == IF || type_202 == INT || type_202 == INTERFACE || type_202 == LONG || type_202 == NATIVE || type_202 == NEW || type_202 == NULL || type_202 == PRIVATE || type_202 == PROTECTED || type_202 == PUBLIC || type_202 == RETURN || type_202 == SHORT || type_202 == STATIC || type_202 == STRICTFP || type_202 == SUPER || type_202 == SWITCH || type_202 == SYNCHRONIZED || type_202 == THIS || type_202 == THROW || type_202 == TRANSIENT || type_202 == TRUE || type_202 == TRY || type_202 == VOID || type_202 == VOLATILE || type_202 == WHILE || type_202 == INTEGER_LITERAL || type_202 == FLOATING_POINT_LITERAL || type_202 == CHARACTER_LITERAL || type_202 == STRING_LITERAL || type_202 == IDENTIFIER || type_202 == LPAREN || type_202 == LBRACE || type_202 == SEMICOLON || type_202 == INCR || type_202 == DECR || type_202 == AT) {
                ;
            } else {
                break label_201;
            }
            BlockStatement();
        }
        jj_consume_token(RBRACE);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTBLOCK);
                }
            }
        }
    }


    final public void BlockStatement() {
        if (jj_2_42(2147483647)) {
            LocalVariableDeclaration();
            jj_consume_token(SEMICOLON);
        } else {
            IElementType type_203 = getType();
            if (type_203 == _LOOKAHEAD || type_203 == _IGNORE_CASE || type_203 == _PARSER_BEGIN || type_203 == _PARSER_END || type_203 == _JAVACODE || type_203 == _TOKEN || type_203 == _SPECIAL_TOKEN || type_203 == _MORE || type_203 == _SKIP || type_203 == _TOKEN_MGR_DECLS || type_203 == _EOF || type_203 == ASSERT || type_203 == BOOLEAN || type_203 == BREAK || type_203 == BYTE || type_203 == CHAR || type_203 == CONTINUE || type_203 == DO || type_203 == DOUBLE || type_203 == FALSE || type_203 == FLOAT || type_203 == FOR || type_203 == IF || type_203 == INT || type_203 == LONG || type_203 == NEW || type_203 == NULL || type_203 == RETURN || type_203 == SHORT || type_203 == SUPER || type_203 == SWITCH || type_203 == SYNCHRONIZED || type_203 == THIS || type_203 == THROW || type_203 == TRUE || type_203 == TRY || type_203 == VOID || type_203 == WHILE || type_203 == INTEGER_LITERAL || type_203 == FLOATING_POINT_LITERAL || type_203 == CHARACTER_LITERAL || type_203 == STRING_LITERAL || type_203 == IDENTIFIER || type_203 == LPAREN || type_203 == LBRACE || type_203 == SEMICOLON || type_203 == INCR || type_203 == DECR) {
                Statement();
            } else if (type_203 == CLASS || type_203 == INTERFACE) {
                ClassOrInterfaceDeclaration();
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
    }


    final public void LocalVariableDeclaration() {
        /*@bgen(jjtree) LocalVariableDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        Modifiers();
        Type();
        VariableDeclarator();
        label_204:
        while (true) {
            IElementType type_205 = getType();
            if (type_205 == COMMA) {
                ;
            } else {
                break label_204;
            }
            jj_consume_token(COMMA);
            VariableDeclarator();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTLOCALVARIABLEDECLARATION);
                }
            }
        }
    }


    final public void EmptyStatement() {
        /*@bgen(jjtree) EmptyStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(SEMICOLON);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTEMPTYSTATEMENT);
                }
            }
        }
    }


    final public void StatementExpression() {
        /*@bgen(jjtree) StatementExpression */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_208 = getType();
        if (type_208 == INCR) {
            PreIncrementExpression();
        } else if (type_208 == DECR) {
            PreDecrementExpression();
        } else if (type_208 == _LOOKAHEAD || type_208 == _IGNORE_CASE || type_208 == _PARSER_BEGIN || type_208 == _PARSER_END || type_208 == _JAVACODE || type_208 == _TOKEN || type_208 == _SPECIAL_TOKEN || type_208 == _MORE || type_208 == _SKIP || type_208 == _TOKEN_MGR_DECLS || type_208 == _EOF || type_208 == BOOLEAN || type_208 == BYTE || type_208 == CHAR || type_208 == DOUBLE || type_208 == FALSE || type_208 == FLOAT || type_208 == INT || type_208 == LONG || type_208 == NEW || type_208 == NULL || type_208 == SHORT || type_208 == SUPER || type_208 == THIS || type_208 == TRUE || type_208 == VOID || type_208 == INTEGER_LITERAL || type_208 == FLOATING_POINT_LITERAL || type_208 == CHARACTER_LITERAL || type_208 == STRING_LITERAL || type_208 == IDENTIFIER || type_208 == LPAREN) {
            PrimaryExpression();
            IElementType type_207 = getType();
            if (type_207 == ASSIGN || type_207 == GT || type_207 == LT || type_207 == INCR || type_207 == DECR || type_207 == PLUSASSIGN || type_207 == MINUSASSIGN || type_207 == STARASSIGN || type_207 == SLASHASSIGN || type_207 == ANDASSIGN || type_207 == ORASSIGN || type_207 == XORASSIGN || type_207 == REMASSIGN) {
                IElementType type_206 = getType();
                if (type_206 == INCR) {
                    jj_consume_token(INCR);
                } else if (type_206 == DECR) {
                    jj_consume_token(DECR);
                } else if (type_206 == ASSIGN || type_206 == GT || type_206 == LT || type_206 == PLUSASSIGN || type_206 == MINUSASSIGN || type_206 == STARASSIGN || type_206 == SLASHASSIGN || type_206 == ANDASSIGN || type_206 == ORASSIGN || type_206 == XORASSIGN || type_206 == REMASSIGN) {
                    AssignmentOperator();
                    Expression();
                } else {
                    if (!builder.eof()) {
                        PsiBuilder.Marker errorMarker = builder.mark();
                        String text = builder.getTokenText();
                        builder.advanceLexer();
                        errorMarker.error("Unexpected token " + text);
                    } else {
                        builder.error("Unexpected end of file");
                    }

                }
            } else {
                ;
            }
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTSTATEMENTEXPRESSION);
                }
            }
        }
    }


    final public void SwitchStatement() {
        /*@bgen(jjtree) SwitchStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(SWITCH);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        label_209:
        while (true) {
            IElementType type_210 = getType();
            if (type_210 == CASE || type_210 == _DEFAULT) {
                ;
            } else {
                break label_209;
            }
            SwitchLabel();
            label_211:
            while (true) {
                IElementType type_212 = getType();
                if (type_212 == _LOOKAHEAD || type_212 == _IGNORE_CASE || type_212 == _PARSER_BEGIN || type_212 == _PARSER_END || type_212 == _JAVACODE || type_212 == _TOKEN || type_212 == _SPECIAL_TOKEN || type_212 == _MORE || type_212 == _SKIP || type_212 == _TOKEN_MGR_DECLS || type_212 == _EOF || type_212 == ABSTRACT || type_212 == ASSERT || type_212 == BOOLEAN || type_212 == BREAK || type_212 == BYTE || type_212 == CHAR || type_212 == CLASS || type_212 == CONTINUE || type_212 == DO || type_212 == DOUBLE || type_212 == FALSE || type_212 == FINAL || type_212 == FLOAT || type_212 == FOR || type_212 == IF || type_212 == INT || type_212 == INTERFACE || type_212 == LONG || type_212 == NATIVE || type_212 == NEW || type_212 == NULL || type_212 == PRIVATE || type_212 == PROTECTED || type_212 == PUBLIC || type_212 == RETURN || type_212 == SHORT || type_212 == STATIC || type_212 == STRICTFP || type_212 == SUPER || type_212 == SWITCH || type_212 == SYNCHRONIZED || type_212 == THIS || type_212 == THROW || type_212 == TRANSIENT || type_212 == TRUE || type_212 == TRY || type_212 == VOID || type_212 == VOLATILE || type_212 == WHILE || type_212 == INTEGER_LITERAL || type_212 == FLOATING_POINT_LITERAL || type_212 == CHARACTER_LITERAL || type_212 == STRING_LITERAL || type_212 == IDENTIFIER || type_212 == LPAREN || type_212 == LBRACE || type_212 == SEMICOLON || type_212 == INCR || type_212 == DECR || type_212 == AT) {
                    ;
                } else {
                    break label_211;
                }
                BlockStatement();
            }
        }
        jj_consume_token(RBRACE);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTSWITCHSTATEMENT);
                }
            }
        }
    }


    final public void SwitchLabel() {
        /*@bgen(jjtree) SwitchLabel */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_213 = getType();
        if (type_213 == CASE) {
            jj_consume_token(CASE);
            Expression();
            jj_consume_token(COLON);
        } else if (type_213 == _DEFAULT) {
            jj_consume_token(_DEFAULT);
            jj_consume_token(COLON);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTSWITCHLABEL);
                }
            }
        }
    }


    final public void IfStatement() {
        /*@bgen(jjtree) IfStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Statement();
        IElementType type_214 = getType();
        if (type_214 == ELSE) {
            jj_consume_token(ELSE);
            Statement();
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTIFSTATEMENT);
                }
            }
        }
    }


    final public void WhileStatement() {
        /*@bgen(jjtree) WhileStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Statement();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTWHILESTATEMENT);
                }
            }
        }
    }


    final public void DoStatement() {
        /*@bgen(jjtree) DoStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(DO);
        Statement();
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMICOLON);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTDOSTATEMENT);
                }
            }
        }
    }


    final public void ForStatement() {
        /*@bgen(jjtree) ForStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        if (jj_2_43(2147483647)) {
            Modifiers();
            Type();
            jj_consume_token(IDENTIFIER);
            jj_consume_token(COLON);
            Expression();
        } else {
            IElementType type_218 = getType();
            if (type_218 == _LOOKAHEAD || type_218 == _IGNORE_CASE || type_218 == _PARSER_BEGIN || type_218 == _PARSER_END || type_218 == _JAVACODE || type_218 == _TOKEN || type_218 == _SPECIAL_TOKEN || type_218 == _MORE || type_218 == _SKIP || type_218 == _TOKEN_MGR_DECLS || type_218 == _EOF || type_218 == ABSTRACT || type_218 == BOOLEAN || type_218 == BYTE || type_218 == CHAR || type_218 == DOUBLE || type_218 == FALSE || type_218 == FINAL || type_218 == FLOAT || type_218 == INT || type_218 == LONG || type_218 == NATIVE || type_218 == NEW || type_218 == NULL || type_218 == PRIVATE || type_218 == PROTECTED || type_218 == PUBLIC || type_218 == SHORT || type_218 == STATIC || type_218 == STRICTFP || type_218 == SUPER || type_218 == SYNCHRONIZED || type_218 == THIS || type_218 == TRANSIENT || type_218 == TRUE || type_218 == VOID || type_218 == VOLATILE || type_218 == INTEGER_LITERAL || type_218 == FLOATING_POINT_LITERAL || type_218 == CHARACTER_LITERAL || type_218 == STRING_LITERAL || type_218 == IDENTIFIER || type_218 == LPAREN || type_218 == SEMICOLON || type_218 == INCR || type_218 == DECR || type_218 == AT) {
                IElementType type_215 = getType();
                if (type_215 == _LOOKAHEAD || type_215 == _IGNORE_CASE || type_215 == _PARSER_BEGIN || type_215 == _PARSER_END || type_215 == _JAVACODE || type_215 == _TOKEN || type_215 == _SPECIAL_TOKEN || type_215 == _MORE || type_215 == _SKIP || type_215 == _TOKEN_MGR_DECLS || type_215 == _EOF || type_215 == ABSTRACT || type_215 == BOOLEAN || type_215 == BYTE || type_215 == CHAR || type_215 == DOUBLE || type_215 == FALSE || type_215 == FINAL || type_215 == FLOAT || type_215 == INT || type_215 == LONG || type_215 == NATIVE || type_215 == NEW || type_215 == NULL || type_215 == PRIVATE || type_215 == PROTECTED || type_215 == PUBLIC || type_215 == SHORT || type_215 == STATIC || type_215 == STRICTFP || type_215 == SUPER || type_215 == SYNCHRONIZED || type_215 == THIS || type_215 == TRANSIENT || type_215 == TRUE || type_215 == VOID || type_215 == VOLATILE || type_215 == INTEGER_LITERAL || type_215 == FLOATING_POINT_LITERAL || type_215 == CHARACTER_LITERAL || type_215 == STRING_LITERAL || type_215 == IDENTIFIER || type_215 == LPAREN || type_215 == INCR || type_215 == DECR || type_215 == AT) {
                    ForInit();
                } else {
                    ;
                }
                jj_consume_token(SEMICOLON);
                IElementType type_216 = getType();
                if (type_216 == _LOOKAHEAD || type_216 == _IGNORE_CASE || type_216 == _PARSER_BEGIN || type_216 == _PARSER_END || type_216 == _JAVACODE || type_216 == _TOKEN || type_216 == _SPECIAL_TOKEN || type_216 == _MORE || type_216 == _SKIP || type_216 == _TOKEN_MGR_DECLS || type_216 == _EOF || type_216 == BOOLEAN || type_216 == BYTE || type_216 == CHAR || type_216 == DOUBLE || type_216 == FALSE || type_216 == FLOAT || type_216 == INT || type_216 == LONG || type_216 == NEW || type_216 == NULL || type_216 == SHORT || type_216 == SUPER || type_216 == THIS || type_216 == TRUE || type_216 == VOID || type_216 == INTEGER_LITERAL || type_216 == FLOATING_POINT_LITERAL || type_216 == CHARACTER_LITERAL || type_216 == STRING_LITERAL || type_216 == IDENTIFIER || type_216 == LPAREN || type_216 == BANG || type_216 == TILDE || type_216 == INCR || type_216 == DECR || type_216 == PLUS || type_216 == MINUS) {
                    Expression();
                } else {
                    ;
                }
                jj_consume_token(SEMICOLON);
                IElementType type_217 = getType();
                if (type_217 == _LOOKAHEAD || type_217 == _IGNORE_CASE || type_217 == _PARSER_BEGIN || type_217 == _PARSER_END || type_217 == _JAVACODE || type_217 == _TOKEN || type_217 == _SPECIAL_TOKEN || type_217 == _MORE || type_217 == _SKIP || type_217 == _TOKEN_MGR_DECLS || type_217 == _EOF || type_217 == BOOLEAN || type_217 == BYTE || type_217 == CHAR || type_217 == DOUBLE || type_217 == FALSE || type_217 == FLOAT || type_217 == INT || type_217 == LONG || type_217 == NEW || type_217 == NULL || type_217 == SHORT || type_217 == SUPER || type_217 == THIS || type_217 == TRUE || type_217 == VOID || type_217 == INTEGER_LITERAL || type_217 == FLOATING_POINT_LITERAL || type_217 == CHARACTER_LITERAL || type_217 == STRING_LITERAL || type_217 == IDENTIFIER || type_217 == LPAREN || type_217 == INCR || type_217 == DECR) {
                    ForUpdate();
                } else {
                    ;
                }
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        jj_consume_token(RPAREN);
        Statement();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTFORSTATEMENT);
                }
            }
        }
    }


    final public void ForInit() {
        /*@bgen(jjtree) ForInit */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        if (jj_2_44(2147483647)) {
            LocalVariableDeclaration();
        } else {
            IElementType type_219 = getType();
            if (type_219 == _LOOKAHEAD || type_219 == _IGNORE_CASE || type_219 == _PARSER_BEGIN || type_219 == _PARSER_END || type_219 == _JAVACODE || type_219 == _TOKEN || type_219 == _SPECIAL_TOKEN || type_219 == _MORE || type_219 == _SKIP || type_219 == _TOKEN_MGR_DECLS || type_219 == _EOF || type_219 == BOOLEAN || type_219 == BYTE || type_219 == CHAR || type_219 == DOUBLE || type_219 == FALSE || type_219 == FLOAT || type_219 == INT || type_219 == LONG || type_219 == NEW || type_219 == NULL || type_219 == SHORT || type_219 == SUPER || type_219 == THIS || type_219 == TRUE || type_219 == VOID || type_219 == INTEGER_LITERAL || type_219 == FLOATING_POINT_LITERAL || type_219 == CHARACTER_LITERAL || type_219 == STRING_LITERAL || type_219 == IDENTIFIER || type_219 == LPAREN || type_219 == INCR || type_219 == DECR) {
                StatementExpressionList();
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTFORINIT);
                }
            }
        }
    }


    final public void StatementExpressionList() {
        /*@bgen(jjtree) StatementExpressionList */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        StatementExpression();
        label_220:
        while (true) {
            IElementType type_221 = getType();
            if (type_221 == COMMA) {
                ;
            } else {
                break label_220;
            }
            jj_consume_token(COMMA);
            StatementExpression();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTSTATEMENTEXPRESSIONLIST);
                }
            }
        }
    }


    final public void ForUpdate() {
        /*@bgen(jjtree) ForUpdate */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        StatementExpressionList();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTFORUPDATE);
                }
            }
        }
    }


    final public void BreakStatement() {
        /*@bgen(jjtree) BreakStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(BREAK);
        IElementType type_222 = getType();
        if (type_222 == IDENTIFIER) {
            jj_consume_token(IDENTIFIER);
        } else {
            ;
        }
        jj_consume_token(SEMICOLON);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTBREAKSTATEMENT);
                }
            }
        }
    }


    final public void ContinueStatement() {
        /*@bgen(jjtree) ContinueStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(CONTINUE);
        IElementType type_223 = getType();
        if (type_223 == IDENTIFIER) {
            jj_consume_token(IDENTIFIER);
        } else {
            ;
        }
        jj_consume_token(SEMICOLON);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTCONTINUESTATEMENT);
                }
            }
        }
    }


    final public void ReturnStatement() {
        /*@bgen(jjtree) ReturnStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(RETURN);
        IElementType type_224 = getType();
        if (type_224 == _LOOKAHEAD || type_224 == _IGNORE_CASE || type_224 == _PARSER_BEGIN || type_224 == _PARSER_END || type_224 == _JAVACODE || type_224 == _TOKEN || type_224 == _SPECIAL_TOKEN || type_224 == _MORE || type_224 == _SKIP || type_224 == _TOKEN_MGR_DECLS || type_224 == _EOF || type_224 == BOOLEAN || type_224 == BYTE || type_224 == CHAR || type_224 == DOUBLE || type_224 == FALSE || type_224 == FLOAT || type_224 == INT || type_224 == LONG || type_224 == NEW || type_224 == NULL || type_224 == SHORT || type_224 == SUPER || type_224 == THIS || type_224 == TRUE || type_224 == VOID || type_224 == INTEGER_LITERAL || type_224 == FLOATING_POINT_LITERAL || type_224 == CHARACTER_LITERAL || type_224 == STRING_LITERAL || type_224 == IDENTIFIER || type_224 == LPAREN || type_224 == BANG || type_224 == TILDE || type_224 == INCR || type_224 == DECR || type_224 == PLUS || type_224 == MINUS) {
            Expression();
        } else {
            ;
        }
        jj_consume_token(SEMICOLON);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTRETURNSTATEMENT);
                }
            }
        }
    }


    final public void ThrowStatement() {
        /*@bgen(jjtree) ThrowStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(THROW);
        Expression();
        jj_consume_token(SEMICOLON);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTTHROWSTATEMENT);
                }
            }
        }
    }


    final public void SynchronizedStatement() {
        /*@bgen(jjtree) SynchronizedStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(SYNCHRONIZED);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Block();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTSYNCHRONIZEDSTATEMENT);
                }
            }
        }
    }


    final public void TryStatement() {
        /*@bgen(jjtree) TryStatement */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(TRY);
        Block();
        label_225:
        while (true) {
            IElementType type_226 = getType();
            if (type_226 == CATCH) {
                ;
            } else {
                break label_225;
            }
            jj_consume_token(CATCH);
            jj_consume_token(LPAREN);
            FormalParameter();
            jj_consume_token(RPAREN);
            Block();
        }
        IElementType type_227 = getType();
        if (type_227 == FINALLY) {
            jj_consume_token(FINALLY);
            Block();
        } else {
            ;
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTTRYSTATEMENT);
                }
            }
        }
    }


    /* We use productions to match >>>, >> and > so that we can keep the
     * type declaration syntax with generics clean
     */
    final public void RUNSIGNEDSHIFT() {
        /*@bgen(jjtree) RUNSIGNEDSHIFT */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(GT);
        jj_consume_token(GT);
        jj_consume_token(GT);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTRUNSIGNEDSHIFT);
                }
            }
        }
    }


    final public void RSIGNEDSHIFT() {
        /*@bgen(jjtree) RSIGNEDSHIFT */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(GT);
        jj_consume_token(GT);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTRSIGNEDSHIFT);
                }
            }
        }
    }


    /* Annotation syntax follows. */
    final public void Annotation() {
        /*@bgen(jjtree) Annotation */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        if (jj_2_45(2147483647)) {
            NormalAnnotation();
        } else if (jj_2_46(2147483647)) {
            SingleMemberAnnotation();
        } else {
            IElementType type_228 = getType();
            if (type_228 == AT) {
                MarkerAnnotation();
            } else {
                if (!builder.eof()) {
                    PsiBuilder.Marker errorMarker = builder.mark();
                    String text = builder.getTokenText();
                    builder.advanceLexer();
                    errorMarker.error("Unexpected token " + text);
                } else {
                    builder.error("Unexpected end of file");
                }

            }
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTANNOTATION);
                }
            }
        }
    }


    final public void NormalAnnotation() {
        /*@bgen(jjtree) NormalAnnotation */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(AT);
        Name();
        jj_consume_token(LPAREN);
        IElementType type_229 = getType();
        if (type_229 == IDENTIFIER) {
            MemberValuePairs();
        } else {
            ;
        }
        jj_consume_token(RPAREN);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTNORMALANNOTATION);
                }
            }
        }
    }


    final public void MarkerAnnotation() {
        /*@bgen(jjtree) MarkerAnnotation */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(AT);
        Name();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTMARKERANNOTATION);
                }
            }
        }
    }


    final public void SingleMemberAnnotation() {
        /*@bgen(jjtree) SingleMemberAnnotation */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(AT);
        Name();
        jj_consume_token(LPAREN);
        MemberValue();
        jj_consume_token(RPAREN);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTSINGLEMEMBERANNOTATION);
                }
            }
        }
    }


    final public void MemberValuePairs() {
        /*@bgen(jjtree) MemberValuePairs */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        MemberValuePair();
        label_230:
        while (true) {
            IElementType type_231 = getType();
            if (type_231 == COMMA) {
                ;
            } else {
                break label_230;
            }
            jj_consume_token(COMMA);
            MemberValuePair();
        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTMEMBERVALUEPAIRS);
                }
            }
        }
    }


    final public void MemberValuePair() {
        /*@bgen(jjtree) MemberValuePair */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(ASSIGN);
        MemberValue();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTMEMBERVALUEPAIR);
                }
            }
        }
    }


    final public void MemberValue() {
        /*@bgen(jjtree) MemberValue */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_232 = getType();
        if (type_232 == AT) {
            Annotation();
        } else if (type_232 == LBRACE) {
            MemberValueArrayInitializer();
        } else if (type_232 == _LOOKAHEAD || type_232 == _IGNORE_CASE || type_232 == _PARSER_BEGIN || type_232 == _PARSER_END || type_232 == _JAVACODE || type_232 == _TOKEN || type_232 == _SPECIAL_TOKEN || type_232 == _MORE || type_232 == _SKIP || type_232 == _TOKEN_MGR_DECLS || type_232 == _EOF || type_232 == BOOLEAN || type_232 == BYTE || type_232 == CHAR || type_232 == DOUBLE || type_232 == FALSE || type_232 == FLOAT || type_232 == INT || type_232 == LONG || type_232 == NEW || type_232 == NULL || type_232 == SHORT || type_232 == SUPER || type_232 == THIS || type_232 == TRUE || type_232 == VOID || type_232 == INTEGER_LITERAL || type_232 == FLOATING_POINT_LITERAL || type_232 == CHARACTER_LITERAL || type_232 == STRING_LITERAL || type_232 == IDENTIFIER || type_232 == LPAREN || type_232 == BANG || type_232 == TILDE || type_232 == INCR || type_232 == DECR || type_232 == PLUS || type_232 == MINUS) {
            ConditionalExpression();
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTMEMBERVALUE);
                }
            }
        }
    }


    final public void MemberValueArrayInitializer() {
        /*@bgen(jjtree) MemberValueArrayInitializer */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(LBRACE);
        MemberValue();
        label_233:
        while (true) {
            if (jj_2_47(2)) {
                ;
            } else {
                break label_233;
            }
            jj_consume_token(COMMA);
            MemberValue();
        }
        IElementType type_234 = getType();
        if (type_234 == COMMA) {
            jj_consume_token(COMMA);
        } else {
            ;
        }
        jj_consume_token(RBRACE);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTMEMBERVALUEARRAYINITIALIZER);
                }
            }
        }
    }


    /* Annotation Types. */
    final public void AnnotationTypeDeclaration() {
        /*@bgen(jjtree) AnnotationTypeDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(AT);
        jj_consume_token(INTERFACE);
        jj_consume_token(IDENTIFIER);
        AnnotationTypeBody();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTANNOTATIONTYPEDECLARATION);
                }
            }
        }
    }


    final public void AnnotationTypeBody() {
        /*@bgen(jjtree) AnnotationTypeBody */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(LBRACE);
        label_235:
        while (true) {
            IElementType type_236 = getType();
            if (type_236 == ABSTRACT || type_236 == BOOLEAN || type_236 == BYTE || type_236 == CHAR || type_236 == CLASS || type_236 == DOUBLE || type_236 == ENUM || type_236 == FINAL || type_236 == FLOAT || type_236 == INT || type_236 == INTERFACE || type_236 == LONG || type_236 == NATIVE || type_236 == PRIVATE || type_236 == PROTECTED || type_236 == PUBLIC || type_236 == SHORT || type_236 == STATIC || type_236 == STRICTFP || type_236 == SYNCHRONIZED || type_236 == TRANSIENT || type_236 == VOLATILE || type_236 == IDENTIFIER || type_236 == SEMICOLON || type_236 == AT) {
                ;
            } else {
                break label_235;
            }
            AnnotationTypeMemberDeclaration();
        }
        jj_consume_token(RBRACE);
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTANNOTATIONTYPEBODY);
                }
            }
        }
    }


    final public void AnnotationTypeMemberDeclaration() {
        /*@bgen(jjtree) AnnotationTypeMemberDeclaration */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        IElementType type_239 = getType();
        if (type_239 == ABSTRACT || type_239 == BOOLEAN || type_239 == BYTE || type_239 == CHAR || type_239 == CLASS || type_239 == DOUBLE || type_239 == ENUM || type_239 == FINAL || type_239 == FLOAT || type_239 == INT || type_239 == INTERFACE || type_239 == LONG || type_239 == NATIVE || type_239 == PRIVATE || type_239 == PROTECTED || type_239 == PUBLIC || type_239 == SHORT || type_239 == STATIC || type_239 == STRICTFP || type_239 == SYNCHRONIZED || type_239 == TRANSIENT || type_239 == VOLATILE || type_239 == IDENTIFIER || type_239 == AT) {
            Modifiers();
            if (jj_2_48(2147483647)) {
                Type();
                jj_consume_token(IDENTIFIER);
                jj_consume_token(LPAREN);
                jj_consume_token(RPAREN);
                IElementType type_237 = getType();
                if (type_237 == _DEFAULT) {
                    DefaultValue();
                } else {
                    ;
                }
                jj_consume_token(SEMICOLON);
            } else {
                IElementType type_238 = getType();
                if (type_238 == CLASS || type_238 == INTERFACE) {
                    ClassOrInterfaceDeclaration();
                } else if (type_238 == ENUM) {
                    EnumDeclaration();
                } else if (type_238 == AT) {
                    AnnotationTypeDeclaration();
                } else if (type_238 == BOOLEAN || type_238 == BYTE || type_238 == CHAR || type_238 == DOUBLE || type_238 == FLOAT || type_238 == INT || type_238 == LONG || type_238 == SHORT || type_238 == IDENTIFIER) {
                    FieldDeclaration();
                } else {
                    if (!builder.eof()) {
                        PsiBuilder.Marker errorMarker = builder.mark();
                        String text = builder.getTokenText();
                        builder.advanceLexer();
                        errorMarker.error("Unexpected token " + text);
                    } else {
                        builder.error("Unexpected end of file");
                    }

                }
            }
        } else if (type_239 == SEMICOLON) {
            jj_consume_token(SEMICOLON);
        } else {
            if (!builder.eof()) {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Unexpected token " + text);
            } else {
                builder.error("Unexpected end of file");
            }

        }
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTANNOTATIONTYPEMEMBERDECLARATION);
                }
            }
        }
    }


    final public void DefaultValue() {
        /*@bgen(jjtree) DefaultValue */
        boolean jjtc000 = true;
        PsiBuilder.Marker jjtn000 = builder.mark();
        jj_consume_token(_DEFAULT);
        MemberValue();
        {
            if (jjtc000) {
                jjtc000 = false;
                {
                    jjtn000.done(JJTDEFAULTVALUE);
                }
            }
        }
    }


    private boolean jj_2_1(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_1();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_2(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_2();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_3(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_3();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_4(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_4();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_5(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_5();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_6(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_6();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_7(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_7();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_8(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_8();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_9(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_9();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_10(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_10();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_11(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_11();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_12(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_12();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_13(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_13();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_14(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_14();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_15(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_15();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_16(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_16();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_17(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_17();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_18(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_18();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_19(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_19();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_20(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_20();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_21(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_21();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_22(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_22();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_23(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_23();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_24(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_24();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_25(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_25();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_26(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_26();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_27(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_27();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_28(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_28();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_29(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_29();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_30(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_30();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_31(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_31();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_32(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_32();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_33(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_33();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_34(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_34();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_35(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_35();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_36(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_36();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_37(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_37();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_38(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_38();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_39(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_39();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_40(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_40();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_41(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_41();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_42(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_42();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_43(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_43();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_44(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_44();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_45(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_45();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_46(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_46();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_47(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_47();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_2_48(int xla) {
        init(xla);
        PsiBuilder.Marker jj_scanpos = builder.mark();
        try {
            boolean result = !jj_3_48();
            return result;
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_scanpos.rollbackTo();
        }
    }


    private boolean jj_3R_327() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (jj_3R_275()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_47()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        {
            if (tokens.get(currentIndex) == (COMMA)) {
                jj_on_la1();
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_374() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_373()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_466() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_476()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_305() {
        if (jj_3R_293()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_304() {
        if (jj_3R_327()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_303() {
        if (jj_3R_279()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_275() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_303()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3R_304()) {
                    rollbackTo(jj_scanpos);
                    if (jj_3R_305()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3R_454() {
        if (jj_3R_466()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_467()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_373() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (jj_3R_275()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_11() {
        if (jj_3R_250()) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_251()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (COMMA)) {
                if (tokens.get(currentIndex) != (ASSIGN)) {
                    if (tokens.get(currentIndex) != (SEMICOLON)) {
                        return true;
                    } else {
                        jj_on_la1();
                    }
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_249() {
        if (jj_3R_280()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_442() {
        if (jj_3R_250()) {
            return true;
        }
        if (jj_3R_454()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_455()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3_10() {
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_249()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_359() {
        if (jj_3R_373()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_374()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_342() {
        if (jj_3R_359()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_360() {
        if (jj_scan_token(BIT_AND)) {
            return true;
        }
        if (jj_3R_321()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_438() {
        if (jj_3R_443()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_274() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_437() {
        if (jj_3R_442()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_331() {
        if (jj_scan_token(AT)) {
            return true;
        }
        if (jj_3R_273()) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_275()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_436() {
        if (jj_3R_441()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_435() {
        if (jj_3R_440()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_434() {
        if (jj_3R_363()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_479() {
        if (jj_3R_396()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_332() {
        if (jj_scan_token(AT)) {
            return true;
        }
        if (jj_3R_273()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_46() {
        if (jj_scan_token(AT)) {
            return true;
        }
        if (jj_3R_273()) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_330() {
        if (jj_scan_token(AT)) {
            return true;
        }
        if (jj_3R_273()) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_342()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_430() {
        if (jj_3R_272()) {
            return true;
        }
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_434()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3R_435()) {
                    rollbackTo(jj_scanpos);
                    jj_scanpos = currentIndex;
                    if (jj_3R_436()) {
                        rollbackTo(jj_scanpos);
                        jj_scanpos = currentIndex;
                        if (jj_3R_437()) {
                            rollbackTo(jj_scanpos);
                            if (jj_3R_438()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3_45() {
        if (jj_scan_token(AT)) {
            return true;
        }
        if (jj_3R_273()) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_274()) {
                rollbackTo(jj_scanpos);
                if (tokens.get(currentIndex) != (RPAREN)) {
                    return true;
                } else {
                    jj_on_la1();
                }
            }
        }
        return false;
    }


    private boolean jj_3_12() {
        if (jj_3R_252()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_417() {
        if (jj_3R_426()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_426() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3_12()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3R_430()) {
                    rollbackTo(jj_scanpos);
                    if (tokens.get(currentIndex) != (SEMICOLON)) {
                        return true;
                    } else {
                        jj_on_la1();
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3R_315() {
        if (jj_3R_332()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_317() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_316()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_314() {
        if (jj_3R_331()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_333() {
        if (jj_3R_343()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_396() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_417()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_478() {
        if (jj_3R_255()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_313() {
        if (jj_3R_330()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_279() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_313()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3R_314()) {
                    rollbackTo(jj_scanpos);
                    if (jj_3R_315()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3R_343() {
        if (jj_scan_token(EXTENDS)) {
            return true;
        }
        if (jj_3R_321()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_360()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_295() {
        if (jj_scan_token(GT)) {
            return true;
        }
        if (jj_scan_token(GT)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_316() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_333()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3_9() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_248()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_264() {
        if (jj_scan_token(GT)) {
            return true;
        }
        if (jj_scan_token(GT)) {
            return true;
        }
        if (jj_scan_token(GT)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_280() {
        if (jj_scan_token(LT)) {
            return true;
        }
        if (jj_3R_316()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_317()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        if (jj_scan_token(GT)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_488() {
        if (jj_scan_token(FINALLY)) {
            return true;
        }
        if (jj_3R_282()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_487() {
        if (jj_scan_token(CATCH)) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_473()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_3R_282()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_472() {
        if (jj_3R_426()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_247() {
        if (jj_3R_279()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_248() {
        if (jj_3R_272()) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_478()) {
                rollbackTo(jj_scanpos);
            }
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_479()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_411() {
        if (jj_scan_token(TRY)) {
            return true;
        }
        if (jj_3R_282()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_487()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_488()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_463() {
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_472()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_462() {
        if (jj_3R_248()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_9()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_448() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_462()) {
                rollbackTo(jj_scanpos);
            }
        }
        {
            if (tokens.get(currentIndex) == (COMMA)) {
                jj_on_la1();
            }
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_463()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_410() {
        if (jj_scan_token(SYNCHRONIZED)) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_3R_282()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_486() {
        if (jj_3R_260()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_447() {
        if (jj_3R_461()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_409() {
        if (jj_scan_token(THROW)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_440() {
        if (jj_scan_token(ENUM)) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_447()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_3R_448()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_494() {
        if (jj_3R_500()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_471() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_321()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_504() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_400()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_408() {
        if (jj_scan_token(RETURN)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_486()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_461() {
        if (jj_scan_token(IMPLEMENTS)) {
            return true;
        }
        if (jj_3R_321()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_471()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_470() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_321()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_407() {
        if (jj_scan_token(CONTINUE)) {
            return true;
        }
        {
            if (tokens.get(currentIndex) == (IDENTIFIER)) {
                jj_on_la1();
            }
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_460() {
        if (jj_scan_token(EXTENDS)) {
            return true;
        }
        if (jj_3R_321()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_470()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_406() {
        if (jj_scan_token(BREAK)) {
            return true;
        }
        {
            if (tokens.get(currentIndex) == (IDENTIFIER)) {
                jj_on_la1();
            }
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_446() {
        if (jj_3R_461()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_445() {
        if (jj_3R_460()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_444() {
        if (jj_3R_280()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_500() {
        if (jj_3R_503()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_493() {
        if (jj_3R_260()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_363() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (CLASS)) {
                if (tokens.get(currentIndex) != (INTERFACE)) {
                    return true;
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_444()) {
                rollbackTo(jj_scanpos);
            }
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_445()) {
                rollbackTo(jj_scanpos);
            }
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_446()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_3R_396()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_44() {
        if (jj_3R_272()) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_503() {
        if (jj_3R_400()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_504()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_483() {
        if (jj_scan_token(ELSE)) {
            return true;
        }
        if (jj_3R_362()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_502() {
        if (jj_3R_503()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_43() {
        if (jj_3R_272()) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_501() {
        if (jj_3R_361()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_499() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_501()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_502()) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean jj_3R_492() {
        if (jj_3R_499()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_485() {
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_492()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_493()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_494()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_484() {
        if (jj_3R_272()) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_8() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (PUBLIC)) {
                if (tokens.get(currentIndex) != (STATIC)) {
                    if (tokens.get(currentIndex) != (PROTECTED)) {
                        if (tokens.get(currentIndex) != (PRIVATE)) {
                            if (tokens.get(currentIndex) != (FINAL)) {
                                if (tokens.get(currentIndex) != (ABSTRACT)) {
                                    if (tokens.get(currentIndex) != (SYNCHRONIZED)) {
                                        if (tokens.get(currentIndex) != (NATIVE)) {
                                            if (tokens.get(currentIndex) != (TRANSIENT)) {
                                                if (tokens.get(currentIndex) != (VOLATILE)) {
                                                    if (tokens.get(currentIndex) != (STRICTFP)) {
                                                        if (jj_3R_247()) {
                                                            return true;
                                                        }
                                                    } else {
                                                        jj_on_la1();
                                                    }
                                                } else {
                                                    jj_on_la1();
                                                }
                                            } else {
                                                jj_on_la1();
                                            }
                                        } else {
                                            jj_on_la1();
                                        }
                                    } else {
                                        jj_on_la1();
                                    }
                                } else {
                                    jj_on_la1();
                                }
                            } else {
                                jj_on_la1();
                            }
                        } else {
                            jj_on_la1();
                        }
                    } else {
                        jj_on_la1();
                    }
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_405() {
        if (jj_scan_token(FOR)) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_484()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_485()) {
                    return true;
                }
            }
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_3R_362()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_272() {
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_8()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_404() {
        if (jj_scan_token(DO)) {
            return true;
        }
        if (jj_3R_362()) {
            return true;
        }
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_246() {
        if (jj_3R_279()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_403() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_3R_362()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_7() {
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_246()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        if (jj_scan_token(PACKAGE)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_491() {
        if (jj_3R_334()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_402() {
        if (jj_scan_token(IF)) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_3R_362()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_483()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_498() {
        if (jj_scan_token(_DEFAULT)) {
            return true;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_497() {
        if (jj_scan_token(CASE)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_490() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_497()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_498()) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean jj_3R_480() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_454()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_482() {
        if (jj_3R_490()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_491()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_401() {
        if (jj_scan_token(SWITCH)) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_482()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_496() {
        if (jj_3R_259()) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_489() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (INCR)) {
                if (tokens.get(currentIndex) != (DECR)) {
                    if (jj_3R_496()) {
                        return true;
                    }
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_258() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (IDENTIFIER)) {
                if (tokens.get(currentIndex) != (_LOOKAHEAD)) {
                    if (tokens.get(currentIndex) != (_IGNORE_CASE)) {
                        if (tokens.get(currentIndex) != (_PARSER_BEGIN)) {
                            if (tokens.get(currentIndex) != (_PARSER_END)) {
                                if (tokens.get(currentIndex) != (_JAVACODE)) {
                                    if (tokens.get(currentIndex) != (_TOKEN)) {
                                        if (tokens.get(currentIndex) != (_SPECIAL_TOKEN)) {
                                            if (tokens.get(currentIndex) != (_MORE)) {
                                                if (tokens.get(currentIndex) != (_SKIP)) {
                                                    if (tokens.get(currentIndex) != (_TOKEN_MGR_DECLS)) {
                                                        if (tokens.get(currentIndex) != (_EOF)) {
                                                            return true;
                                                        } else {
                                                            jj_on_la1();
                                                        }
                                                    } else {
                                                        jj_on_la1();
                                                    }
                                                } else {
                                                    jj_on_la1();
                                                }
                                            } else {
                                                jj_on_la1();
                                            }
                                        } else {
                                            jj_on_la1();
                                        }
                                    } else {
                                        jj_on_la1();
                                    }
                                } else {
                                    jj_on_la1();
                                }
                            } else {
                                jj_on_la1();
                            }
                        } else {
                            jj_on_la1();
                        }
                    } else {
                        jj_on_la1();
                    }
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_421() {
        if (jj_3R_240()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_489()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_420() {
        if (jj_3R_366()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_400() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_419()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3R_420()) {
                    rollbackTo(jj_scanpos);
                    if (jj_3R_421()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3R_419() {
        if (jj_3R_365()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_399() {
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3_42() {
        if (jj_3R_272()) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_361() {
        if (jj_3R_272()) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        if (jj_3R_454()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_480()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_346() {
        if (jj_3R_363()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_345() {
        if (jj_3R_362()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_481() {
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_318() {
        if (jj_3R_334()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_334() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_344()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3R_345()) {
                    rollbackTo(jj_scanpos);
                    if (jj_3R_346()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3R_344() {
        if (jj_3R_361()) {
            return true;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_282() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_318()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_271() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (jj_3R_362()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_398() {
        if (jj_scan_token(ASSERT)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_481()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_372() {
        if (jj_3R_397()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_241() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (IDENTIFIER)) {
                if (tokens.get(currentIndex) != (_OPTIONS)) {
                    return true;
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_389() {
        if (jj_3R_411()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_388() {
        if (jj_3R_410()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_39() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_397() {
        if (jj_scan_token(STRING_LITERAL)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_387() {
        if (jj_3R_409()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_278() {
        if (jj_scan_token(BIT_OR)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_386() {
        if (jj_3R_408()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_385() {
        if (jj_3R_407()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_358() {
        {
            if (tokens.get(currentIndex) == (TILDE)) {
                jj_on_la1();
            }
        }
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_372()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_384() {
        if (jj_3R_406()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_383() {
        if (jj_3R_405()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_382() {
        if (jj_3R_404()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_381() {
        if (jj_3R_403()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_380() {
        if (jj_3R_402()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_243() {
        if (jj_3R_240()) {
            return true;
        }
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_341() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_245()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_379() {
        if (jj_3R_401()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_340() {
        if (jj_3R_358()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_378() {
        if (jj_3R_400()) {
            return true;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_339() {
        if (jj_scan_token(LT)) {
            return true;
        }
        if (jj_3R_241()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_377() {
        if (jj_3R_399()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_329() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (STRING_LITERAL)) {
                jj_scanpos = currentIndex;
                if (jj_3R_339()) {
                    rollbackTo(jj_scanpos);
                    jj_scanpos = currentIndex;
                    if (jj_3R_340()) {
                        rollbackTo(jj_scanpos);
                        if (jj_3R_341()) {
                            return true;
                        }
                    }
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_376() {
        if (jj_3R_282()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_375() {
        if (jj_3R_398()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_312() {
        if (jj_3R_329()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_355() {
        if (jj_3R_257()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_277() {
        if (jj_3R_312()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_312()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3_41() {
        if (jj_3R_271()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_362() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3_41()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3R_375()) {
                    rollbackTo(jj_scanpos);
                    jj_scanpos = currentIndex;
                    if (jj_3R_376()) {
                        rollbackTo(jj_scanpos);
                        jj_scanpos = currentIndex;
                        if (jj_3R_377()) {
                            rollbackTo(jj_scanpos);
                            jj_scanpos = currentIndex;
                            if (jj_3R_378()) {
                                rollbackTo(jj_scanpos);
                                jj_scanpos = currentIndex;
                                if (jj_3R_379()) {
                                    rollbackTo(jj_scanpos);
                                    jj_scanpos = currentIndex;
                                    if (jj_3R_380()) {
                                        rollbackTo(jj_scanpos);
                                        jj_scanpos = currentIndex;
                                        if (jj_3R_381()) {
                                            rollbackTo(jj_scanpos);
                                            jj_scanpos = currentIndex;
                                            if (jj_3R_382()) {
                                                rollbackTo(jj_scanpos);
                                                jj_scanpos = currentIndex;
                                                if (jj_3R_383()) {
                                                    rollbackTo(jj_scanpos);
                                                    jj_scanpos = currentIndex;
                                                    if (jj_3R_384()) {
                                                        rollbackTo(jj_scanpos);
                                                        jj_scanpos = currentIndex;
                                                        if (jj_3R_385()) {
                                                            rollbackTo(jj_scanpos);
                                                            jj_scanpos = currentIndex;
                                                            if (jj_3R_386()) {
                                                                rollbackTo(jj_scanpos);
                                                                jj_scanpos = currentIndex;
                                                                if (jj_3R_387()) {
                                                                    rollbackTo(jj_scanpos);
                                                                    jj_scanpos = currentIndex;
                                                                    if (jj_3R_388()) {
                                                                        rollbackTo(jj_scanpos);
                                                                        if (jj_3R_389()) {
                                                                            return true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3R_245() {
        if (jj_3R_277()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_278()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_370() {
        if (jj_3R_396()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_395() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_244() {
        {
            if (tokens.get(currentIndex) == (SHARP)) {
                jj_on_la1();
            }
        }
        if (jj_3R_241()) {
            return true;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3_38() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_369() {
        if (jj_3R_395()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_395()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        if (jj_3R_319()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_40() {
        if (jj_3_38()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_38()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_39()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_354() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3_40()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_369()) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean jj_3_6() {
        if (jj_scan_token(LT)) {
            return true;
        }
        if (jj_3R_241()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_3() {
        if (jj_3R_241()) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3_5() {
        if (jj_scan_token(LT)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_244()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_3R_245()) {
            return true;
        }
        if (jj_scan_token(GT)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_357() {
        if (jj_3R_255()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_370()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_335() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_356() {
        if (jj_3R_354()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_2() {
        if (jj_3R_240()) {
            return true;
        }
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3_4() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_242()) {
                rollbackTo(jj_scanpos);
                if (tokens.get(currentIndex) != (STRING_LITERAL)) {
                    if (tokens.get(currentIndex) != (LT)) {
                        if (jj_3R_243()) {
                            return true;
                        }
                    } else {
                        jj_on_la1();
                    }
                } else {
                    jj_on_la1();
                }
            }
        }
        return false;
    }


    private boolean jj_3R_242() {
        if (jj_3R_241()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_302() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (jj_3R_321()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_355()) {
                rollbackTo(jj_scanpos);
            }
        }
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_356()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_357()) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean jj_3R_269() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3_37()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_302()) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean jj_3_37() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (jj_3R_266()) {
            return true;
        }
        if (jj_3R_354()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_320() {
        if (jj_3R_260()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_335()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_287() {
        if (jj_3R_320()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_255() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_287()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_352() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (TRUE)) {
                if (tokens.get(currentIndex) != (FALSE)) {
                    return true;
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_338() {
        if (jj_3R_352()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_326() {
        if (jj_3R_328()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_328() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (INTEGER_LITERAL)) {
                if (tokens.get(currentIndex) != (FLOATING_POINT_LITERAL)) {
                    if (tokens.get(currentIndex) != (CHARACTER_LITERAL)) {
                        if (tokens.get(currentIndex) != (STRING_LITERAL)) {
                            jj_scanpos = currentIndex;
                            if (jj_3R_338()) {
                                rollbackTo(jj_scanpos);
                                if (tokens.get(currentIndex) != (NULL)) {
                                    return true;
                                } else {
                                    jj_on_la1();
                                }
                            }
                        } else {
                            jj_on_la1();
                        }
                    } else {
                        jj_on_la1();
                    }
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_300() {
        if (jj_3R_255()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_299() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_298() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3_36() {
        if (jj_3R_270()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_35() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_3R_269()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_33() {
        if (jj_3R_268()) {
            return true;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_scan_token(CLASS)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_267() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3_34()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3_35()) {
                    rollbackTo(jj_scanpos);
                    jj_scanpos = currentIndex;
                    if (jj_3_36()) {
                        rollbackTo(jj_scanpos);
                        jj_scanpos = currentIndex;
                        if (jj_3R_298()) {
                            rollbackTo(jj_scanpos);
                            jj_scanpos = currentIndex;
                            if (jj_3R_299()) {
                                rollbackTo(jj_scanpos);
                                if (jj_3R_300()) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3_34() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_scan_token(THIS)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_311() {
        if (jj_3R_273()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_310() {
        if (jj_3R_268()) {
            return true;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_scan_token(CLASS)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_309() {
        if (jj_3R_269()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_308() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3_32() {
        if (jj_3R_267()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_307() {
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_306() {
        if (jj_3R_328()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_276() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_306()) {
                rollbackTo(jj_scanpos);
                if (tokens.get(currentIndex) != (THIS)) {
                    jj_scanpos = currentIndex;
                    if (jj_3R_307()) {
                        rollbackTo(jj_scanpos);
                        jj_scanpos = currentIndex;
                        if (jj_3R_308()) {
                            rollbackTo(jj_scanpos);
                            jj_scanpos = currentIndex;
                            if (jj_3R_309()) {
                                rollbackTo(jj_scanpos);
                                jj_scanpos = currentIndex;
                                if (jj_3R_310()) {
                                    rollbackTo(jj_scanpos);
                                    if (jj_3R_311()) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                } else {
                    jj_on_la1();
                }
            }
        }
        return false;
    }


    private boolean jj_3R_495() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (INCR)) {
                if (tokens.get(currentIndex) != (DECR)) {
                    return true;
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_270() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_3R_257()) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        return false;
    }


    private boolean jj_3_31() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_266()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_240() {
        if (jj_3R_276()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_32()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3_1() {
        if (jj_scan_token(LT)) {
            return true;
        }
        if (jj_scan_token(STAR)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_263() {
        if (jj_3R_295()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_424() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_3R_367()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_413() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_423()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_424()) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean jj_3R_423() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_3R_337()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_30() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_414() {
        if (jj_3R_240()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_495()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_297() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (TILDE)) {
                if (tokens.get(currentIndex) != (BANG)) {
                    if (tokens.get(currentIndex) != (LPAREN)) {
                        if (tokens.get(currentIndex) != (IDENTIFIER)) {
                            if (tokens.get(currentIndex) != (THIS)) {
                                if (tokens.get(currentIndex) != (SUPER)) {
                                    if (tokens.get(currentIndex) != (NEW)) {
                                        if (jj_3R_326()) {
                                            return true;
                                        }
                                    } else {
                                        jj_on_la1();
                                    }
                                } else {
                                    jj_on_la1();
                                }
                            } else {
                                jj_on_la1();
                            }
                        } else {
                            jj_on_la1();
                        }
                    } else {
                        jj_on_la1();
                    }
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_296() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_265() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3_29()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3R_296()) {
                    rollbackTo(jj_scanpos);
                    if (jj_3R_297()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3_29() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_266()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_28() {
        if (jj_3R_265()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_27() {
        if (jj_3R_264()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_393() {
        if (jj_3R_414()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_392() {
        if (jj_3R_413()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_367() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_391()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3R_392()) {
                    rollbackTo(jj_scanpos);
                    if (jj_3R_393()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3R_391() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (TILDE)) {
                if (tokens.get(currentIndex) != (BANG)) {
                    return true;
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        if (jj_3R_337()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_262() {
        if (jj_scan_token(LT)) {
            return true;
        }
        if (jj_scan_token(LT)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_366() {
        if (jj_scan_token(DECR)) {
            return true;
        }
        if (jj_3R_240()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_469() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (PLUS)) {
                if (tokens.get(currentIndex) != (MINUS)) {
                    return true;
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        if (jj_3R_325()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_477() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (STAR)) {
                if (tokens.get(currentIndex) != (SLASH)) {
                    if (tokens.get(currentIndex) != (REM)) {
                        return true;
                    } else {
                        jj_on_la1();
                    }
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        if (jj_3R_337()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_365() {
        if (jj_scan_token(INCR)) {
            return true;
        }
        if (jj_3R_240()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_351() {
        if (jj_3R_367()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_26() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_262()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3_27()) {
                    rollbackTo(jj_scanpos);
                    if (jj_3R_263()) {
                        return true;
                    }
                }
            }
        }
        if (jj_3R_294()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_350() {
        if (jj_3R_366()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_349() {
        if (jj_3R_365()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_337() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_348()) {
                rollbackTo(jj_scanpos);
                jj_scanpos = currentIndex;
                if (jj_3R_349()) {
                    rollbackTo(jj_scanpos);
                    jj_scanpos = currentIndex;
                    if (jj_3R_350()) {
                        rollbackTo(jj_scanpos);
                        if (jj_3R_351()) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3R_348() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (PLUS)) {
                if (tokens.get(currentIndex) != (MINUS)) {
                    return true;
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        if (jj_3R_337()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_25() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (GE)) {
                if (tokens.get(currentIndex) != (LE)) {
                    if (tokens.get(currentIndex) != (GT)) {
                        if (tokens.get(currentIndex) != (LT)) {
                            return true;
                        } else {
                            jj_on_la1();
                        }
                    } else {
                        jj_on_la1();
                    }
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        if (jj_3R_261()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_439() {
        if (jj_scan_token(INSTANCEOF)) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_325() {
        if (jj_3R_337()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_477()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_433() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (EQ)) {
                if (tokens.get(currentIndex) != (NE)) {
                    return true;
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        if (jj_3R_422()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_294() {
        if (jj_3R_325()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_469()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_261() {
        if (jj_3R_294()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_26()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_429() {
        if (jj_scan_token(BIT_AND)) {
            return true;
        }
        if (jj_3R_412()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_292() {
        if (jj_scan_token(GT)) {
            return true;
        }
        if (jj_scan_token(GT)) {
            return true;
        }
        {
            if (tokens.get(currentIndex) == (GT)) {
                jj_on_la1();
            }
        }
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_428() {
        if (jj_3R_261()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_25()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_415() {
        if (jj_scan_token(BIT_OR)) {
            return true;
        }
        if (jj_3R_364()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_422() {
        if (jj_3R_428()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_439()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_425() {
        if (jj_scan_token(XOR)) {
            return true;
        }
        if (jj_3R_390()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_394() {
        if (jj_scan_token(SC_AND)) {
            return true;
        }
        if (jj_3R_347()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_412() {
        if (jj_3R_422()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_433()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_291() {
        if (jj_scan_token(LT)) {
            return true;
        }
        if (jj_scan_token(LT)) {
            return true;
        }
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_368() {
        if (jj_scan_token(SC_OR)) {
            return true;
        }
        if (jj_3R_336()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_390() {
        if (jj_3R_412()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_429()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_353() {
        if (jj_scan_token(HOOK)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_364() {
        if (jj_3R_390()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_425()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_347() {
        if (jj_3R_364()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_415()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3_24() {
        if (jj_3R_259()) {
            return true;
        }
        if (jj_3R_260()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_336() {
        if (jj_3R_347()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_394()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_324() {
        if (jj_3R_336()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_368()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_293() {
        if (jj_3R_324()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_353()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_259() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (ASSIGN)) {
                if (tokens.get(currentIndex) != (STARASSIGN)) {
                    if (tokens.get(currentIndex) != (SLASHASSIGN)) {
                        if (tokens.get(currentIndex) != (REMASSIGN)) {
                            if (tokens.get(currentIndex) != (PLUSASSIGN)) {
                                if (tokens.get(currentIndex) != (MINUSASSIGN)) {
                                    jj_scanpos = currentIndex;
                                    if (jj_3R_291()) {
                                        rollbackTo(jj_scanpos);
                                        jj_scanpos = currentIndex;
                                        if (jj_3R_292()) {
                                            rollbackTo(jj_scanpos);
                                            if (tokens.get(currentIndex) != (ANDASSIGN)) {
                                                if (tokens.get(currentIndex) != (XORASSIGN)) {
                                                    if (tokens.get(currentIndex) != (ORASSIGN)) {
                                                        return true;
                                                    } else {
                                                        jj_on_la1();
                                                    }
                                                } else {
                                                    jj_on_la1();
                                                }
                                            } else {
                                                jj_on_la1();
                                            }
                                        }
                                    }
                                } else {
                                    jj_on_la1();
                                }
                            } else {
                                jj_on_la1();
                            }
                        } else {
                            jj_on_la1();
                        }
                    } else {
                        jj_on_la1();
                    }
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_260() {
        if (jj_3R_293()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3_24()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_475() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_273()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_465() {
        if (jj_3R_273()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_475()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3_23() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_3R_258()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_273() {
        if (jj_3R_258()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_23()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_301() {
        if (jj_3R_250()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_268() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (VOID)) {
                if (jj_3R_301()) {
                    return true;
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3_22() {
        if (jj_3R_257()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_266() {
        {
            int jj_scanpos;
            if (tokens.get(currentIndex) != (BOOLEAN)) {
                if (tokens.get(currentIndex) != (CHAR)) {
                    if (tokens.get(currentIndex) != (BYTE)) {
                        if (tokens.get(currentIndex) != (SHORT)) {
                            if (tokens.get(currentIndex) != (INT)) {
                                if (tokens.get(currentIndex) != (LONG)) {
                                    if (tokens.get(currentIndex) != (FLOAT)) {
                                        if (tokens.get(currentIndex) != (DOUBLE)) {
                                            return true;
                                        } else {
                                            jj_on_la1();
                                        }
                                    } else {
                                        jj_on_la1();
                                    }
                                } else {
                                    jj_on_la1();
                                }
                            } else {
                                jj_on_la1();
                            }
                        } else {
                            jj_on_la1();
                        }
                    } else {
                        jj_on_la1();
                    }
                } else {
                    jj_on_la1();
                }
            } else {
                jj_on_la1();
            }
        }
        return false;
    }


    private boolean jj_3R_371() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_290()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_19() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_432() {
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (jj_3R_256()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_418() {
        if (jj_3R_427()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_427() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_431()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_432()) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean jj_3R_431() {
        if (jj_scan_token(EXTENDS)) {
            return true;
        }
        if (jj_3R_256()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_323() {
        if (jj_scan_token(HOOK)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_418()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3_20() {
        if (jj_3R_257()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_322() {
        if (jj_3R_256()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_290() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_322()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_323()) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean jj_3_18() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_257() {
        if (jj_scan_token(LT)) {
            return true;
        }
        if (jj_3R_290()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_371()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        if (jj_scan_token(GT)) {
            return true;
        }
        return false;
    }


    private boolean jj_3_21() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3_22()) {
                rollbackTo(jj_scanpos);
            }
        }
        return false;
    }


    private boolean jj_3R_321() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3_20()) {
                rollbackTo(jj_scanpos);
            }
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_21()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_289() {
        if (jj_3R_321()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_19()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_288() {
        if (jj_3R_266()) {
            return true;
        }
        if (jj_3_18()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_18()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_256() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_288()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_289()) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean jj_3R_451() {
        if (jj_scan_token(THROWS)) {
            return true;
        }
        if (jj_3R_465()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_281() {
        if (jj_3R_266()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_17() {
        if (jj_3R_256()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_250() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3_17()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_281()) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean jj_3_16() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (jj_3R_255()) {
            return true;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_252() {
        {
            if (tokens.get(currentIndex) == (STATIC)) {
                jj_on_la1();
            }
        }
        if (jj_3R_282()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_14() {
        if (jj_3R_254()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_15() {
        if (jj_3R_240()) {
            return true;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_286() {
        {
            int jj_scanpos = currentIndex;
            if (jj_3_15()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (jj_3R_255()) {
            return true;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_474() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_473()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_468() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_285() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (jj_3R_255()) {
            return true;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_254() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_285()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_286()) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean jj_3R_453() {
        if (jj_3R_334()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_452() {
        if (jj_3R_254()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_449() {
        if (jj_3R_280()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_441() {
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_449()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_3R_450()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_451()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_452()) {
                rollbackTo(jj_scanpos);
            }
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_453()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_473() {
        if (jj_3R_272()) {
            return true;
        }
        if (jj_3R_250()) {
            return true;
        }
        {
            if (tokens.get(currentIndex) == (ELLIPSIS)) {
                jj_on_la1();
            }
        }
        if (jj_3R_466()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_464() {
        if (jj_3R_473()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_474()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_458() {
        if (jj_scan_token(THROWS)) {
            return true;
        }
        if (jj_3R_465()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_13() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_253()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_450() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_464()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3_48() {
        if (jj_3R_250()) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_457() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_3R_450()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3R_468()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_459() {
        if (jj_3R_282()) {
            return true;
        }
        return false;
    }


    private boolean jj_3_47() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_275()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_456() {
        if (jj_3R_280()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_443() {
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_456()) {
                rollbackTo(jj_scanpos);
            }
        }
        if (jj_3R_268()) {
            return true;
        }
        if (jj_3R_457()) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_458()) {
                rollbackTo(jj_scanpos);
            }
        }
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_459()) {
                rollbackTo(jj_scanpos);
                if (tokens.get(currentIndex) != (SEMICOLON)) {
                    return true;
                } else {
                    jj_on_la1();
                }
            }
        }
        return false;
    }


    private boolean jj_3R_416() {
        if (jj_3R_253()) {
            return true;
        }
        while (true) {
            int jj_scanpos = currentIndex;
            if (jj_3_13()) {
                rollbackTo(jj_scanpos);
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_467() {
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (jj_3R_253()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_455() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_454()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_476() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_319() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        {
            int jj_scanpos = currentIndex;
            if (jj_3R_416()) {
                rollbackTo(jj_scanpos);
            }
        }
        {
            if (tokens.get(currentIndex) == (COMMA)) {
                jj_on_la1();
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_251() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_284() {
        if (jj_3R_260()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_283() {
        if (jj_3R_319()) {
            return true;
        }
        return false;
    }


    private boolean jj_3R_253() {
        {
            int jj_scanpos;
            jj_scanpos = currentIndex;
            if (jj_3R_283()) {
                rollbackTo(jj_scanpos);
                if (jj_3R_284()) {
                    return true;
                }
            }
        }
        return false;
    }


    private void rollbackTo(int scanpos) {
        currentIndex = scanpos;
    }


    private void init(int la) {
        jj_la = la;
        tokens.clear();
        tokens.add(builder.getTokenType());
        currentIndex = 0;
        maxIndex = 0;
    }


    private IElementType jj_consume_token(IElementType type) {
        IElementType actualType = builder.getTokenType();
        if (actualType == type) {
            builder.advanceLexer();
        } else {
            if (builder.eof()) {
                if (!reportEof) {
                    reportEof = true;
                    builder.error("Unexpected end of file");
                }
            } else {
                PsiBuilder.Marker errorMarker = builder.mark();
                String text = builder.getTokenText();
                builder.advanceLexer();
                errorMarker.error("Expected " + type + ", but get: " + text);
            }
        }
        return type;
    }


    private void jj_on_la1() {
        advanceLexer();
        jj_test_jj_la();
    }


    private void jj_test_jj_la() {
        if (jj_la == 0 && maxIndex == currentIndex) {
            throw jj_ls;
        }
    }


    private IElementType advanceLexer() {
        if (maxIndex == currentIndex) {
            IElementType result = tokens.get(currentIndex);
            builder.advanceLexer();
            tokens.add(builder.getTokenType());
            maxIndex++;
            currentIndex++;
            jj_la--;
            return result;
        }
        return tokens.get(currentIndex++);
    }


    private boolean jj_scan_token(IElementType kind) {
        IElementType nextType = advanceLexer();
        if (nextType != kind) {
            return true;
        }
        jj_test_jj_la();
        return false;
    }


    /** Get the specific Token. */
    final public IElementType getTokenType(int index) {
        IElementType t = null;
        for (int i = 0; i < index; i++) {
            t = builder.getTokenType();
        }
        return t;
    }


    /**
     * Get the next Token. Use getNextTokenType instead.
     * final public Token getNextToken() {
     * if (token.next != null) token = token.next;
     * else token = token.next = token_source.getNextToken();
     * jj_ntk = -1;
     * return token;
     * }
     */


    private IElementType getType() {
        return builder.getTokenType();
    }


    /** Enable tracing. */
    final public void enable_tracing() {
    }


    /** Disable tracing. */
    final public void disable_tracing() {
    }


    static private final class LookaheadSuccess extends java.lang.Error {
    }

}
