/*@bgen(jjtree) Generated By:JJTree(jj2IntelliJ output version): Do not edit this line. JavaCC.jj.jj */
/*@egen*//* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This file contains the grammar and actions that describe
 * JavaCCParser.  When passed as input to JavaCCParser it generates
 * another copy of itself.  Hence JavaCCParser may be modified by
 * modifying this file, and therefore this file is to be considered
 * the master version of JavaCCParser.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  AUTOMATIC_ERROR_RECOVERY = true;
}

PARSER_BEGIN(JavaCC)

package org.gark87.idea.javacc.generated;

public class JavaCC/*@bgen(jjtree)*/implements JavaCCTreeConstants/*@egen*/ {/*@bgen(jjtree)*/

/*@egen*/

  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    IElementType t;
    t = getTokenType(1);
    if (t == BIT_OR || t == COMMA || t == RPAREN || t == RBRACE || t == RBRACKET || t == null) return false;
    return true;
  }

}

PARSER_END(JavaCC)


/**********************************************
 * THE JAVACC TOKEN SPECIFICATION STARTS HERE *
 **********************************************/

/* JAVACC RESERVED WORDS: These are the only tokens in JavaCC but not in Java */

TOKEN :
{
// "options" is no longer reserved (see issue 126).
  < _OPTIONS: "options" >
| < _LOOKAHEAD: "LOOKAHEAD" >
| < _IGNORE_CASE: "IGNORE_CASE" >
| < _PARSER_BEGIN: "PARSER_BEGIN" >
| < _PARSER_END: "PARSER_END" >
| < _JAVACODE: "JAVACODE" >
| < _TOKEN: "TOKEN" >
| < _SPECIAL_TOKEN: "SPECIAL_TOKEN" >
| < _MORE: "MORE" >
| < _SKIP: "SKIP" >
| < _TOKEN_MGR_DECLS: "TOKEN_MGR_DECLS" >
| < _EOF: "EOF" >
}

/*
 * The remainder of the tokens are exactly (except for the removal of tokens
 * containing ">>" and "<<") as in the Java grammar and must be diff equivalent
 * (again with the exceptions above) to it.
 */

/* WHITE SPACE */

SKIP :
{
 " "
 | "\t"
 | "\n"
 | "\r"
 | "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* JAVA RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* JAVA LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
	    | "u" (["0"-"9","a","A","b","B","c","C","d","D","e","E","f","F"]){4}
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
	    | "u" (["0"-"9","a","A","b","B","c","C","d","D","e","E","f","F"]){4}
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         "$",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u064a",
         "\u0671"-"\u06d3",
         "\u06d5",
         "\u06e5"-"\u06e6",
         "\u06fa"-"\u06fc",
         "\u0710",
         "\u0712"-"\u072c",
         "\u0780"-"\u07a5",
         "\u0905"-"\u0939",
         "\u093d",
         "\u0950",
         "\u0958"-"\u0961",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",
         "\u09f0"-"\u09f3",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a72"-"\u0a74",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abd",
         "\u0ad0",
         "\u0ae0",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3d",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c60"-"\u0c61",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d60"-"\u0d61",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",
         "\u0e32"-"\u0e33",
         "\u0e3f"-"\u0e46",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb0",
         "\u0eb2"-"\u0eb3",
         "\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f40"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f88"-"\u0f8b",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u1050"-"\u1055",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17b3",
         "\u17db",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a8",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u203f"-"\u2040",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u3029",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d",
         "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\uff04",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u007f"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u034e",
         "\u0360"-"\u0362",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u0655",
         "\u0660"-"\u0669",
         "\u0670"-"\u06d3",
         "\u06d5"-"\u06dc",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06ed",
         "\u06f0"-"\u06fc",
         "\u070f"-"\u072c",
         "\u0730"-"\u074a",
         "\u0780"-"\u07b0",
         "\u0901"-"\u0903",
         "\u0905"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc",
         "\u09be"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a02",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0",
         "\u0ae6"-"\u0aef",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbe"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17d3",
         "\u17db",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180e",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u206a"-"\u206f",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u3099"-"\u309a",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
//	| < LSHIFT: "<<" >
//	| < RSIGNEDSHIFT: ">>" >
//	| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < SHARP: "#" >
| < ELLIPSIS: "..." >
| < AT: "@" >
//	| < LSHIFTASSIGN: "<<=" >
//	| < RSIGNEDSHIFTASSIGN: ">>=" >
//	| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}

/* >'s need special attention due to generics syntax. */
/*
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
     matchedToken.image = ">";
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
     matchedToken.image = ">";
  }
|  < GT: ">" >
}
*/
SPECIAL_TOKEN:
{
  < ERROR: ~[] >
}

/************************************************
 * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

void javacc_input() :
{/*@bgen(jjtree) javacc_input */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) javacc_input */
  (
/*@egen*/
  javacc_options()
  "PARSER_BEGIN" "(" identifier() ")"
  CompilationUnit()
  "PARSER_END" "(" identifier() ")"
  ( production() )+
  <EOF>/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVACC_INPUT); }
        }
      }
  }
/*@egen*/
}

void javacc_options() :
{/*@bgen(jjtree) javacc_options */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) javacc_options */
  (
/*@egen*/
  [ <_OPTIONS>  "{" ( option_binding() )* "}" ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVACC_OPTIONS); }
        }
      }
  }
/*@egen*/
}

void option_binding() :
{/*@bgen(jjtree) option_binding */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) option_binding */
  (
/*@egen*/
  ( <IDENTIFIER> | "LOOKAHEAD" | "IGNORE_CASE" | "static" )
  "="
  ( IntegerLiteral() | BooleanLiteral() | StringLiteral() )
  ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTOPTION_BINDING); }
        }
      }
  }
/*@egen*/
}

void production() :
{/*@bgen(jjtree) production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) production */
  (
/*@egen*/
  LOOKAHEAD(1)
  /*
   * Since JAVACODE is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "javacode_production" over
   * "bnf_production".
   */
  javacode_production()
|
  LOOKAHEAD(1)
  /*
   * Since SKIP, TOKEN, etc. are both JavaCC reserved words and Java
   * identifiers, we need to give preference to "regular_expression_production"
   * over "bnf_production".
   */
  regular_expr_production()
|
  LOOKAHEAD(1)
  /*
   * Since TOKEN_MGR_DECLS is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "token_manager_decls" over
   * "bnf_production".
   */
  token_manager_decls()
|
  bnf_production()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRODUCTION); }
        }
      }
  }
/*@egen*/
}

void javacode_production() :
{/*@bgen(jjtree) javacode_production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) javacode_production */
  (
/*@egen*/
  "JAVACODE"
  AccessModifier()
  ResultType() identifier() FormalParameters()
  [ "throws" Name() ( "," Name() )* ]
  [ node_descriptor() ]
  Block()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVACODE_PRODUCTION); }
        }
      }
  }
/*@egen*/
}

void bnf_production() :
{/*@bgen(jjtree) bnf_production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) bnf_production */
  (
/*@egen*/
  AccessModifier() ResultType() identifier() FormalParameters()
  [ "throws" Name() ( "," Name() )* ]
  [ node_descriptor() ]
  ":"
  Block()
  "{" expansion_choices() "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBNF_PRODUCTION); }
        }
      }
  }
/*@egen*/
}

void AccessModifier() :
{/*@bgen(jjtree) AccessModifier */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) AccessModifier */
  (
/*@egen*/
  ( "public" | "protected" | "private" )?/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTACCESSMODIFIER); }
        }
      }
  }
/*@egen*/
}

void regular_expr_production() :
{/*@bgen(jjtree) regular_expr_production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) regular_expr_production */
  (
/*@egen*/
  [
    LOOKAHEAD(2) "<" "*" ">"
  |
    "<" <IDENTIFIER> ( "," <IDENTIFIER> )* ">"
  ]
  regexpr_kind() [ "[" "IGNORE_CASE" "]" ] ":"
  "{" regexpr_spec() ( "|" regexpr_spec() )* "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGULAR_EXPR_PRODUCTION); }
        }
      }
  }
/*@egen*/
}

void token_manager_decls() :
{/*@bgen(jjtree) token_manager_decls */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) token_manager_decls */
  (
/*@egen*/
  "TOKEN_MGR_DECLS" ":" ClassOrInterfaceBody()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTOKEN_MANAGER_DECLS); }
        }
      }
  }
/*@egen*/
}

void regexpr_kind() :
{/*@bgen(jjtree) regexpr_kind */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) regexpr_kind */
  (
/*@egen*/
  "TOKEN"
|
  "SPECIAL_TOKEN"
|
  "SKIP"
|
  "MORE"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGEXPR_KIND); }
        }
      }
  }
/*@egen*/
}

void regexpr_spec() :
{/*@bgen(jjtree) regexpr_spec */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) regexpr_spec */
  (
/*@egen*/
  regular_expression() [ Block() ] [ ":" <IDENTIFIER> ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGEXPR_SPEC); }
        }
      }
  }
/*@egen*/
}

void expansion_choices() :
{/*@bgen(jjtree) expansion_choices */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) expansion_choices */
  (
/*@egen*/
  expansion() ( "|" expansion() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPANSION_CHOICES); }
        }
      }
  }
/*@egen*/
}

void expansion() :
{/*@bgen(jjtree) expansion */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}{/*@bgen(jjtree) expansion */
  (
/*@egen*/
  ( LOOKAHEAD(1)
    "LOOKAHEAD" "(" local_lookahead() ")"
  )?
  ( LOOKAHEAD(0, {notTailOfExpansionUnit() } )
    expansion_unit()
    [ node_descriptor() ]
  )+/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPANSION); }
        }
      }
  }
/*@egen*/
}

void local_lookahead() :
	{/*@bgen(jjtree) local_lookahead */
          boolean jjtc000 = true;
          PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/
	  boolean commaAtEnd = false, emptyLA = true;
	}
{/*@bgen(jjtree) local_lookahead */
  (
/*@egen*/
  [
    /*
     * The lookahead of 1 is to turn off the warning message that lets
     * us know that an expansion choice can also start with an integer
     * literal because a primary expression can do the same.  But we
     * know that this is what we want.
     */
    LOOKAHEAD(1)
    IntegerLiteral()
	{
	  emptyLA = false;
	}
  ]
  [ LOOKAHEAD(0, { !emptyLA && (getTokenType(1) != RPAREN) } )
    ","
	{
	  commaAtEnd = true;
	}
  ]
  [ LOOKAHEAD(0, { getTokenType(1) != RPAREN && getTokenType(1) != LBRACE } )
    expansion_choices()
	{
	  emptyLA = false; commaAtEnd = false;
	}
  ]
  [ LOOKAHEAD(0, { !emptyLA && !commaAtEnd && (getTokenType(1) != RPAREN) } )
    ","
	{
	  commaAtEnd = true;
	}
  ]
  [ LOOKAHEAD(0, { emptyLA || commaAtEnd } )
    "{" Expression() "}"
  ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLOCAL_LOOKAHEAD); }
        }
      }
  }
/*@egen*/
}

void expansion_unit() :
{/*@bgen(jjtree) expansion_unit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) expansion_unit */
  (
/*@egen*/
  LOOKAHEAD(1)
  /*
   * We give this priority over primary expressions which use LOOKAHEAD as the
   * name of its identifier.
   */
  "LOOKAHEAD" "(" local_lookahead() ")"
|
  Block()
|
  "[" expansion_choices() "]"
|
  "try" "{" expansion_choices() "}"
  ( "catch" "(" Name() <IDENTIFIER> ")" Block())*
  [ "finally" Block() ]
|
  LOOKAHEAD( identifier() | StringLiteral() | "<" | PrimaryExpression() "=" )
  [
    LOOKAHEAD(PrimaryExpression() "=")
    PrimaryExpression() "="
  ]
  (
	LOOKAHEAD( identifier() "(")
   identifier() Arguments()
  |
    regular_expression() [ "." <IDENTIFIER>  ]
  )
|
  "(" expansion_choices() ")" ( "+" | "*" | "?" )?/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPANSION_UNIT); }
        }
      }
  }
/*@egen*/
}

void regular_expression() :
{/*@bgen(jjtree) regular_expression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) regular_expression */
  (
/*@egen*/
  StringLiteral()
|
  LOOKAHEAD(3)
  "<" [ [ "#" ] identifier() ":" ] complex_regular_expression_choices() ">"
|
  LOOKAHEAD(2)
  "<" identifier() ">"
|
  "<" "EOF" ">"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGULAR_EXPRESSION); }
        }
      }
  }
/*@egen*/
}

void complex_regular_expression_choices() :
{/*@bgen(jjtree) complex_regular_expression_choices */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) complex_regular_expression_choices */
  (
/*@egen*/
  complex_regular_expression() ( "|" complex_regular_expression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION_CHOICES); }
        }
      }
  }
/*@egen*/
}

void complex_regular_expression() :
{/*@bgen(jjtree) complex_regular_expression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) complex_regular_expression */
  (
/*@egen*/
  ( complex_regular_expression_unit() )+/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION); }
        }
      }
  }
/*@egen*/
}

void complex_regular_expression_unit() :
{/*@bgen(jjtree) complex_regular_expression_unit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) complex_regular_expression_unit */
  (
/*@egen*/
  StringLiteral()
|
  "<" identifier() ">"
|
  character_list()
|
  "(" complex_regular_expression_choices() ")"
  (  "+" | "*" | "?"
   | "{" IntegerLiteral() [ ","  [ IntegerLiteral() ] ] "}"
  )?/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION_UNIT); }
        }
      }
  }
/*@egen*/
}

void character_list() :
{/*@bgen(jjtree) character_list */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) character_list */
  (
/*@egen*/
  [ "~" ] "[" [ character_descriptor() ( "," character_descriptor() )* ] "]"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCHARACTER_LIST); }
        }
      }
  }
/*@egen*/
}

void character_descriptor() :
{/*@bgen(jjtree) character_descriptor */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) character_descriptor */
  (
/*@egen*/
  StringLiteral() [ "-" StringLiteral() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCHARACTER_DESCRIPTOR); }
        }
      }
  }
/*@egen*/
}

void identifier() :
{/*@bgen(jjtree) identifier */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) identifier */
  (
/*@egen*/
  <IDENTIFIER> | <_OPTIONS>/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTIDENTIFIER); }
        }
      }
  }
/*@egen*/
}

/**********************************************
 * THE JJTREE PRODUCTIONS START HERE          *
 **********************************************/

void node_descriptor() :
{/*@bgen(jjtree) node_descriptor */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) node_descriptor */
  (
/*@egen*/
  "#"
  ( Name() | <VOID> )
  [
   LOOKAHEAD(1)
   "("
      [ ">" ]
      node_descriptor_expression()
   ")"
  ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNODE_DESCRIPTOR); }
        }
      }
  }
/*@egen*/
}


JAVACODE
void node_descriptor_expression()
{/*@bgen(jjtree) node_descriptor_expression */
boolean jjtc000 = true;
PsiBuilder.Marker jjtn000 = builder.mark();
try {
/*@egen*/
  IElementType kind;
  int nesting = 1;
  while (true) {
    kind = getType();
    if (kind == JavaCCConstants._EOF)
      builder.error("Unexpected <EOF>");
    if (kind == JavaCCConstants.LPAREN) nesting++;
    if (kind == JavaCCConstants.RPAREN) {
      nesting--;
      if (nesting == 0) break;
    }
    builder.advanceLexer();
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    {
      if (jjtc000) {
        jjtc000 = false;
        {jjtn000.done(JJTNODE_DESCRIPTOR_EXPRESSION); }
      }
    }
  }
}
/*@egen*/
}


/**********************************************
 * THE JAVA GRAMMAR SPECIFICATION STARTS HERE *
 **********************************************/

/*
 * The Java grammar is modified to use sequences of tokens
 * for the missing tokens - those that include "<<" and ">>".
 */

/*
 * The following production defines Java identifiers - it
 * includes the reserved words of JavaCC also.
 */

void JavaIdentifier() :
{/*@bgen(jjtree) JavaIdentifier */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) JavaIdentifier */
  (
/*@egen*/
  <IDENTIFIER>
| "LOOKAHEAD"
| "IGNORE_CASE"
| "PARSER_BEGIN"
| "PARSER_END"
| "JAVACODE"
| "TOKEN"
| "SPECIAL_TOKEN"
| "MORE"
| "SKIP"
| "TOKEN_MGR_DECLS"
| "EOF"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVAIDENTIFIER); }
        }
      }
  }
/*@egen*/
}

/*
 * Program structuring syntax follows.
 */

void CompilationUnit() :
/*
 * The <EOF> is deleted since the compilation unit is embedded
 * within grammar code.
 */
{/*@bgen(jjtree) CompilationUnit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) CompilationUnit */
  (
/*@egen*/
  [ LOOKAHEAD( ( Annotation() )* "package" ) PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPILATIONUNIT); }
        }
      }
  }
/*@egen*/
}

void PackageDeclaration() :
{/*@bgen(jjtree) PackageDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PackageDeclaration */
  (
/*@egen*/
  Modifiers() "package" Name() ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPACKAGEDECLARATION); }
        }
      }
  }
/*@egen*/
}

void ImportDeclaration() :
{/*@bgen(jjtree) ImportDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ImportDeclaration */
  (
/*@egen*/
  "import" [ "static" ] Name() [ "." "*" ] ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTIMPORTDECLARATION); }
        }
      }
  }
/*@egen*/
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

void Modifiers() :
{/*@bgen(jjtree) Modifiers */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Modifiers */
 (
/*@egen*/
 (
  LOOKAHEAD(2)
  ( "public" | "static" | "protected" | "private" | "final" | "abstract" | 
    "synchronized" | "native" | "transient" | "volatile" | "strictfp" | Annotation()
  )
 )*/*@bgen(jjtree)*/
 ) {
     {
       if (jjtc000) {
         jjtc000 = false;
         {jjtn000.done(JJTMODIFIERS); }
       }
     }
 }
/*@egen*/
}

/*
 * Declaration syntax follows.
 */
void TypeDeclaration() :
{/*@bgen(jjtree) TypeDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) TypeDeclaration */
  (
/*@egen*/
  ";" |
  Modifiers()
  (
     ClassOrInterfaceDeclaration()
   |
     EnumDeclaration()
   |
     AnnotationTypeDeclaration()
  )/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTYPEDECLARATION); }
        }
      }
  }
/*@egen*/
}


void ClassOrInterfaceDeclaration() :
{/*@bgen(jjtree) ClassOrInterfaceDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ClassOrInterfaceDeclaration */
  (
/*@egen*/
  ( "class" | "interface" )
  <IDENTIFIER>
  [ TypeParameters() ]
  [ ExtendsList() ]
  [ ImplementsList() ]
  ClassOrInterfaceBody()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCLASSORINTERFACEDECLARATION); }
        }
      }
  }
/*@egen*/
}

void ExtendsList() :
{/*@bgen(jjtree) ExtendsList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ExtendsList */
   (
/*@egen*/
   "extends" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() )*/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTEXTENDSLIST); }
         }
       }
   }
/*@egen*/
}

void ImplementsList() :
{/*@bgen(jjtree) ImplementsList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ImplementsList */
   (
/*@egen*/
   "implements" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() )*/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTIMPLEMENTSLIST); }
         }
       }
   }
/*@egen*/
}

void EnumDeclaration() :
{/*@bgen(jjtree) EnumDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) EnumDeclaration */
  (
/*@egen*/
  "enum" <IDENTIFIER>
  [ ImplementsList() ]
  EnumBody()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTENUMDECLARATION); }
        }
      }
  }
/*@egen*/
}

void EnumBody() :
{/*@bgen(jjtree) EnumBody */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) EnumBody */
   (
/*@egen*/
   "{"
   [ EnumConstant() ( LOOKAHEAD(2) "," EnumConstant() )* ]
   [ "," ]
   [ ";" ( ClassOrInterfaceBodyDeclaration() )* ]
   "}"/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTENUMBODY); }
         }
       }
   }
/*@egen*/
}

void EnumConstant() :
{/*@bgen(jjtree) EnumConstant */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) EnumConstant */
  (
/*@egen*/
  Modifiers() <IDENTIFIER> [ Arguments() ] [ ClassOrInterfaceBody() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTENUMCONSTANT); }
        }
      }
  }
/*@egen*/
}

void TypeParameters() :
{/*@bgen(jjtree) TypeParameters */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) TypeParameters */
   (
/*@egen*/
   "<" TypeParameter() ( "," TypeParameter() )* ">"/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPEPARAMETERS); }
         }
       }
   }
/*@egen*/
}

void TypeParameter() :
{/*@bgen(jjtree) TypeParameter */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) TypeParameter */
   (
/*@egen*/
   <IDENTIFIER> [ TypeBound() ]/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPEPARAMETER); }
         }
       }
   }
/*@egen*/
}

void TypeBound() :
{/*@bgen(jjtree) TypeBound */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) TypeBound */
   (
/*@egen*/
   "extends" ClassOrInterfaceType() ( "&" ClassOrInterfaceType() )*/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPEBOUND); }
         }
       }
   }
/*@egen*/
}

void ClassOrInterfaceBody() :
/*
 * Parsing this fills "tokens" with all tokens of the block
 * excluding the braces at each end.
 */
{/*@bgen(jjtree) ClassOrInterfaceBody */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ClassOrInterfaceBody */
  (
/*@egen*/
  "{" ( ClassOrInterfaceBodyDeclaration() )* "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCLASSORINTERFACEBODY); }
        }
      }
  }
/*@egen*/
}

void ClassOrInterfaceBodyDeclaration() :
{/*@bgen(jjtree) ClassOrInterfaceBodyDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ClassOrInterfaceBodyDeclaration */
  (
/*@egen*/
  LOOKAHEAD(2)
  Initializer()
|
  Modifiers() // Just get all the modifiers out of the way. If you want to do
              // more checks, pass the modifiers down to the member
  (
      ClassOrInterfaceDeclaration()
    |
      EnumDeclaration()
    |
      LOOKAHEAD( [ TypeParameters() ] <IDENTIFIER> "(" )
      ConstructorDeclaration()
    |
      LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
      FieldDeclaration()
    |
      MethodDeclaration()
  )
|
  ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCLASSORINTERFACEBODYDECLARATION); }
        }
      }
  }
/*@egen*/
}

void FieldDeclaration() :
{/*@bgen(jjtree) FieldDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) FieldDeclaration */
  (
/*@egen*/
  // Modifiers are already matched in the caller
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFIELDDECLARATION); }
        }
      }
  }
/*@egen*/
}

void VariableDeclarator() :
{/*@bgen(jjtree) VariableDeclarator */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) VariableDeclarator */
  (
/*@egen*/
  VariableDeclaratorId() [ "=" VariableInitializer() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTVARIABLEDECLARATOR); }
        }
      }
  }
/*@egen*/
}

void VariableDeclaratorId() :
{/*@bgen(jjtree) VariableDeclaratorId */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) VariableDeclaratorId */
  (
/*@egen*/
  <IDENTIFIER> ( "[" "]" )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTVARIABLEDECLARATORID); }
        }
      }
  }
/*@egen*/
}

void VariableInitializer() :
{/*@bgen(jjtree) VariableInitializer */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) VariableInitializer */
  (
/*@egen*/
  ArrayInitializer()
|
  Expression()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTVARIABLEINITIALIZER); }
        }
      }
  }
/*@egen*/
}

void ArrayInitializer() :
{/*@bgen(jjtree) ArrayInitializer */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ArrayInitializer */
  (
/*@egen*/
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARRAYINITIALIZER); }
        }
      }
  }
/*@egen*/
}

void MethodDeclaration() :
{/*@bgen(jjtree) MethodDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MethodDeclaration */
  (
/*@egen*/
  // Modifiers already matched in the caller!
  [ TypeParameters() ]
  ResultType()
  MethodDeclarator() [ "throws" NameList() ]
  ( Block() | ";" )/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMETHODDECLARATION); }
        }
      }
  }
/*@egen*/
}

void MethodDeclarator() :
{/*@bgen(jjtree) MethodDeclarator */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MethodDeclarator */
  (
/*@egen*/
  <IDENTIFIER> FormalParameters() ( "[" "]" )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMETHODDECLARATOR); }
        }
      }
  }
/*@egen*/
}

void FormalParameters() :
/*
 * Parsing this fills "tokens" with all tokens of the formal
 * parameters excluding the parentheses at each end.
 */
{/*@bgen(jjtree) FormalParameters */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) FormalParameters */
  (
/*@egen*/
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORMALPARAMETERS); }
        }
      }
  }
/*@egen*/
}

void FormalParameter() :
{/*@bgen(jjtree) FormalParameter */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) FormalParameter */
  (
/*@egen*/
  Modifiers() Type() [ "..." ] VariableDeclaratorId()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORMALPARAMETER); }
        }
      }
  }
/*@egen*/
}

void ConstructorDeclaration() :
{/*@bgen(jjtree) ConstructorDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ConstructorDeclaration */
  (
/*@egen*/
  [ TypeParameters() ]
  // Modifiers matched in the caller
  <IDENTIFIER> FormalParameters() [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONSTRUCTORDECLARATION); }
        }
      }
  }
/*@egen*/
}

void ExplicitConstructorInvocation() :
{/*@bgen(jjtree) ExplicitConstructorInvocation */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ExplicitConstructorInvocation */
  (
/*@egen*/
  LOOKAHEAD("this" Arguments() ";")
  "this" Arguments() ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments() ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPLICITCONSTRUCTORINVOCATION); }
        }
      }
  }
/*@egen*/
}

void Initializer() :
{/*@bgen(jjtree) Initializer */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Initializer */
  (
/*@egen*/
  [ "static" ] Block()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINITIALIZER); }
        }
      }
  }
/*@egen*/
}


/*
 * Type, name and expression syntax follows.
 */

void Type() :
{/*@bgen(jjtree) Type */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Type */
   (
/*@egen*/
   LOOKAHEAD(2) ReferenceType()
 |
   PrimitiveType()/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPE); }
         }
       }
   }
/*@egen*/
}

void ReferenceType() :
{/*@bgen(jjtree) ReferenceType */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ReferenceType */
   (
/*@egen*/
   PrimitiveType() ( LOOKAHEAD(2) "[" "]" )+
  |
   ( ClassOrInterfaceType() ) ( LOOKAHEAD(2) "[" "]" )*/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTREFERENCETYPE); }
         }
       }
   }
/*@egen*/
}

void ClassOrInterfaceType() :
{/*@bgen(jjtree) ClassOrInterfaceType */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ClassOrInterfaceType */
  (
/*@egen*/
  <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments() ]
  ( LOOKAHEAD(2) "." <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments() ] )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCLASSORINTERFACETYPE); }
        }
      }
  }
/*@egen*/
}

void TypeArguments() :
{/*@bgen(jjtree) TypeArguments */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) TypeArguments */
   (
/*@egen*/
   "<" TypeArgument() ( "," TypeArgument() )* ">"/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPEARGUMENTS); }
         }
       }
   }
/*@egen*/
}

void TypeArgument() :
{/*@bgen(jjtree) TypeArgument */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) TypeArgument */
   (
/*@egen*/
   ReferenceType()
 |
   "?" [ WildcardBounds() ]/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPEARGUMENT); }
         }
       }
   }
/*@egen*/
}

void WildcardBounds() :
{/*@bgen(jjtree) WildcardBounds */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) WildcardBounds */
   (
/*@egen*/
   "extends" ReferenceType()
 |
   "super" ReferenceType()/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTWILDCARDBOUNDS); }
         }
       }
   }
/*@egen*/
}


void PrimitiveType() :
{/*@bgen(jjtree) PrimitiveType */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PrimitiveType */
  (
/*@egen*/
  "boolean"
|
  "char"
|
  "byte"
|
  "short"
|
  "int"
|
  "long"
|
  "float"
|
  "double"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMITIVETYPE); }
        }
      }
  }
/*@egen*/
}


void ResultType() :
{/*@bgen(jjtree) ResultType */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ResultType */
  (
/*@egen*/
  "void"
|
  Type()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRESULTTYPE); }
        }
      }
  }
/*@egen*/
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{/*@bgen(jjtree) Name */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Name */
  (
/*@egen*/
  JavaIdentifier()
  ( LOOKAHEAD(2) "." JavaIdentifier() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNAME); }
        }
      }
  }
/*@egen*/
}


void NameList() :
{/*@bgen(jjtree) NameList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) NameList */
  (
/*@egen*/
  Name() ( "," Name() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNAMELIST); }
        }
      }
  }
/*@egen*/
}


/*
 * Expression syntax follows.
 */

void Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{/*@bgen(jjtree) Expression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Expression */
  (
/*@egen*/
  ConditionalExpression() [ LOOKAHEAD(2) AssignmentOperator() Expression() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPRESSION); }
        }
      }
  }
/*@egen*/
}


void AssignmentOperator() :
{/*@bgen(jjtree) AssignmentOperator */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) AssignmentOperator */
  (
/*@egen*/
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<" "<" "=" | ">" ">" (">")? "=" | "&=" | "^=" | "|="/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTASSIGNMENTOPERATOR); }
        }
      }
  }
/*@egen*/
}

void ConditionalExpression()                           :
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
  (
/*@egen*/
  ConditionalOrExpression() [ "?" Expression() ":" Expression() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONDITIONALEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void ConditionalOrExpression()                             :
{/*@bgen(jjtree) #ConditionalOrExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #ConditionalOrExpression(> 1) */
  (
/*@egen*/
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONDITIONALOREXPRESSION); }
        }
      }
  }
/*@egen*/
}

void ConditionalAndExpression()                              :
{/*@bgen(jjtree) #ConditionalAndExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #ConditionalAndExpression(> 1) */
  (
/*@egen*/
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONDITIONALANDEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void InclusiveOrExpression()                           :
{/*@bgen(jjtree) #InclusiveOrExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #InclusiveOrExpression(> 1) */
  (
/*@egen*/
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINCLUSIVEOREXPRESSION); }
        }
      }
  }
/*@egen*/
}

void ExclusiveOrExpression()                           :
{/*@bgen(jjtree) #ExclusiveOrExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #ExclusiveOrExpression(> 1) */
  (
/*@egen*/
  AndExpression() ( "^" AndExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXCLUSIVEOREXPRESSION); }
        }
      }
  }
/*@egen*/
}

void AndExpression()                   :
{/*@bgen(jjtree) #AndExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #AndExpression(> 1) */
  (
/*@egen*/
  EqualityExpression() ( "&" EqualityExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTANDEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void EqualityExpression()                        :
{/*@bgen(jjtree) #EqualityExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #EqualityExpression(> 1) */
  (
/*@egen*/
  InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEQUALITYEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void InstanceOfExpression()                          :
{/*@bgen(jjtree) #InstanceOfExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #InstanceOfExpression(> 1) */
  (
/*@egen*/
  RelationalExpression() [ "instanceof" Type() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINSTANCEOFEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void RelationalExpression()                          :
{/*@bgen(jjtree) #RelationalExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #RelationalExpression(> 1) */
  (
/*@egen*/
  ShiftExpression() ( LOOKAHEAD(2) (<GE> | <LE> | <GT> | <LT>) ShiftExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRELATIONALEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void ShiftExpression()                     :
{/*@bgen(jjtree) #ShiftExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #ShiftExpression(> 1) */
  (
/*@egen*/
  AdditiveExpression() ( LOOKAHEAD(2) ( "<" "<" |LOOKAHEAD(3) RUNSIGNEDSHIFT() | RSIGNEDSHIFT() ) AdditiveExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSHIFTEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void AdditiveExpression()                        :
{/*@bgen(jjtree) #AdditiveExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #AdditiveExpression(> 1) */
  (
/*@egen*/
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTADDITIVEEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void MultiplicativeExpression()                              :
{/*@bgen(jjtree) #MultiplicativeExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #MultiplicativeExpression(> 1) */
  (
/*@egen*/
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMULTIPLICATIVEEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) UnaryExpression */
  (
/*@egen*/
  ( "+" | "-" ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTUNARYEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void PreIncrementExpression() :
{/*@bgen(jjtree) PreIncrementExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PreIncrementExpression */
  (
/*@egen*/
  "++" PrimaryExpression()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPREINCREMENTEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void PreDecrementExpression() :
{/*@bgen(jjtree) PreDecrementExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PreDecrementExpression */
  (
/*@egen*/
  "--" PrimaryExpression()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPREDECREMENTEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void UnaryExpressionNotPlusMinus() :
{/*@bgen(jjtree) UnaryExpressionNotPlusMinus */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) UnaryExpressionNotPlusMinus */
  (
/*@egen*/
  ( "~" | "!" ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTUNARYEXPRESSIONNOTPLUSMINUS); }
        }
      }
  }
/*@egen*/
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{/*@bgen(jjtree) CastLookahead */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) CastLookahead */
  (
/*@egen*/
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Type() "[")
  "(" Type() "[" "]"
|
  "(" Type() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCASTLOOKAHEAD); }
        }
      }
  }
/*@egen*/
}

void PostfixExpression()                       :
{/*@bgen(jjtree) #PostfixExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) #PostfixExpression(> 1) */
  (
/*@egen*/
  PrimaryExpression() [ "++" | "--" ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPOSTFIXEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void CastExpression() :
{/*@bgen(jjtree) CastExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) CastExpression */
  (
/*@egen*/
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression()
|
  "(" Type() ")" UnaryExpressionNotPlusMinus()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCASTEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void PrimaryExpression() :
{/*@bgen(jjtree) PrimaryExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PrimaryExpression */
  (
/*@egen*/
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMARYEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void MemberSelector() :
{/*@bgen(jjtree) MemberSelector */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MemberSelector */
  (
/*@egen*/
  "." TypeArguments() <IDENTIFIER>/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMEMBERSELECTOR); }
        }
      }
  }
/*@egen*/
}

void PrimaryPrefix() :
{/*@bgen(jjtree) PrimaryPrefix */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PrimaryPrefix */
  (
/*@egen*/
  Literal()
|
  "this"
|
  "super" "." <IDENTIFIER>
|
  "(" Expression() ")"
|
  AllocationExpression()
|
  LOOKAHEAD( ResultType() "." "class" )
  ResultType() "." "class"
|
  Name()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMARYPREFIX); }
        }
      }
  }
/*@egen*/
}

void PrimarySuffix() :
{/*@bgen(jjtree) PrimarySuffix */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PrimarySuffix */
  (
/*@egen*/
  LOOKAHEAD(2)
  "." "this"
|
  LOOKAHEAD(2)
  "." AllocationExpression()
|
  LOOKAHEAD(3)
  MemberSelector()
|
  "[" Expression() "]"
|
  "." <IDENTIFIER>
|
  Arguments()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMARYSUFFIX); }
        }
      }
  }
/*@egen*/
}

void Literal() :
{/*@bgen(jjtree) Literal */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Literal */
  (
/*@egen*/
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLITERAL); }
        }
      }
  }
/*@egen*/
}

void IntegerLiteral()      :
{}
{
  <INTEGER_LITERAL>
}

void BooleanLiteral() :
{/*@bgen(jjtree) BooleanLiteral */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) BooleanLiteral */
  (
/*@egen*/
  "true"
|
  "false"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBOOLEANLITERAL); }
        }
      }
  }
/*@egen*/
}

void StringLiteral()       :
{}
{
  <STRING_LITERAL>
}

void NullLiteral()      :
{}
{
  "null"
}

void Arguments() :
/*
 * Parsing this fills "tokens" with all tokens of the arguments
 * excluding the parentheses at each end.
 */
{/*@bgen(jjtree) Arguments */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Arguments */
  (
/*@egen*/
  "(" [ ArgumentList() ] ")"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARGUMENTS); }
        }
      }
  }
/*@egen*/
}

void ArgumentList() :
{/*@bgen(jjtree) ArgumentList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
  (
/*@egen*/
  Expression() ( "," Expression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARGUMENTLIST); }
        }
      }
  }
/*@egen*/
}

void AllocationExpression() :
{/*@bgen(jjtree) AllocationExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) AllocationExpression */
  (
/*@egen*/
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits()
|
  "new" ClassOrInterfaceType() [ TypeArguments() ]
    (
      ArrayDimsAndInits()
    |
      Arguments() [ ClassOrInterfaceBody() ]
    )/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTALLOCATIONEXPRESSION); }
        }
      }
  }
/*@egen*/
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{/*@bgen(jjtree) ArrayDimsAndInits */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ArrayDimsAndInits */
  (
/*@egen*/
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARRAYDIMSANDINITS); }
        }
      }
  }
/*@egen*/
}


/*
 * Statement syntax follows.
 */

void Statement()      :
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  AssertStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
}

void AssertStatement() :
{/*@bgen(jjtree) AssertStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) AssertStatement */
  (
/*@egen*/
  "assert" Expression() [ ":" Expression() ] ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTASSERTSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void LabeledStatement() :
{/*@bgen(jjtree) LabeledStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) LabeledStatement */
  (
/*@egen*/
  <IDENTIFIER> ":" Statement()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLABELEDSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void Block() :
/*
 * Parsing this fills "tokens" with all tokens of the block
 * excluding the braces at each end.
 */
{/*@bgen(jjtree) Block */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Block */
  (
/*@egen*/
  "{" ( BlockStatement() )* "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBLOCK); }
        }
      }
  }
/*@egen*/
}

void BlockStatement()      :
{}
{
  LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
  LocalVariableDeclaration() ";"
|
  Statement()
|
  ClassOrInterfaceDeclaration()
}

void LocalVariableDeclaration() :
{/*@bgen(jjtree) LocalVariableDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) LocalVariableDeclaration */
  (
/*@egen*/
  Modifiers() Type() VariableDeclarator() ( "," VariableDeclarator() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLOCALVARIABLEDECLARATION); }
        }
      }
  }
/*@egen*/
}

void EmptyStatement() :
{/*@bgen(jjtree) EmptyStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) EmptyStatement */
  (
/*@egen*/
  ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEMPTYSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{/*@bgen(jjtree) StatementExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) StatementExpression */
  (
/*@egen*/
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression()
  ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSTATEMENTEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void SwitchStatement() :
{/*@bgen(jjtree) SwitchStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) SwitchStatement */
  (
/*@egen*/
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSWITCHSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void SwitchLabel() :
{/*@bgen(jjtree) SwitchLabel */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) SwitchLabel */
  (
/*@egen*/
  "case" Expression() ":"
|
  "default" ":"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSWITCHLABEL); }
        }
      }
  }
/*@egen*/
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{/*@bgen(jjtree) IfStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
  (
/*@egen*/
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTIFSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void WhileStatement() :
{/*@bgen(jjtree) WhileStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
  (
/*@egen*/
  "while" "(" Expression() ")" Statement()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTWHILESTATEMENT); }
        }
      }
  }
/*@egen*/
}

void DoStatement() :
{/*@bgen(jjtree) DoStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) DoStatement */
  (
/*@egen*/
  "do" Statement() "while" "(" Expression() ")" ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTDOSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void ForStatement() :
{/*@bgen(jjtree) ForStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ForStatement */
  (
/*@egen*/
  "for" "("

  (
      LOOKAHEAD(Modifiers() Type() <IDENTIFIER> ":")
      Modifiers() Type() <IDENTIFIER> ":" Expression()
    |
     [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ]
  )

  ")" Statement()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void ForInit() :
{/*@bgen(jjtree) ForInit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ForInit */
  (
/*@egen*/
  LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORINIT); }
        }
      }
  }
/*@egen*/
}

void StatementExpressionList() :
{/*@bgen(jjtree) StatementExpressionList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) StatementExpressionList */
  (
/*@egen*/
  StatementExpression() ( "," StatementExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSTATEMENTEXPRESSIONLIST); }
        }
      }
  }
/*@egen*/
}

void ForUpdate() :
{/*@bgen(jjtree) ForUpdate */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ForUpdate */
  (
/*@egen*/
  StatementExpressionList()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORUPDATE); }
        }
      }
  }
/*@egen*/
}

void BreakStatement() :
{/*@bgen(jjtree) BreakStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) BreakStatement */
  (
/*@egen*/
  "break" [ <IDENTIFIER> ] ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBREAKSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void ContinueStatement() :
{/*@bgen(jjtree) ContinueStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ContinueStatement */
  (
/*@egen*/
  "continue" [ <IDENTIFIER> ] ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONTINUESTATEMENT); }
        }
      }
  }
/*@egen*/
}

void ReturnStatement() :
{/*@bgen(jjtree) ReturnStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
  (
/*@egen*/
  "return" [ Expression() ] ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRETURNSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void ThrowStatement() :
{/*@bgen(jjtree) ThrowStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ThrowStatement */
  (
/*@egen*/
  "throw" Expression() ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTHROWSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void SynchronizedStatement() :
{/*@bgen(jjtree) SynchronizedStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) SynchronizedStatement */
  (
/*@egen*/
  "synchronized" "(" Expression() ")" Block()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSYNCHRONIZEDSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{/*@bgen(jjtree) TryStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) TryStatement */
  (
/*@egen*/
  "try" Block()
  ( "catch" "(" FormalParameter() ")" Block() )*
  [ "finally" Block() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTRYSTATEMENT); }
        }
      }
  }
/*@egen*/
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */

void RUNSIGNEDSHIFT() :
{/*@bgen(jjtree) RUNSIGNEDSHIFT */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) RUNSIGNEDSHIFT */
  (
/*@egen*/
  ">" ">" ">"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRUNSIGNEDSHIFT); }
        }
      }
  }
/*@egen*/
}

void RSIGNEDSHIFT() :
{/*@bgen(jjtree) RSIGNEDSHIFT */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) RSIGNEDSHIFT */
  (
/*@egen*/
  ">" ">"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRSIGNEDSHIFT); }
        }
      }
  }
/*@egen*/
}

/* Annotation syntax follows. */

void Annotation() :
{/*@bgen(jjtree) Annotation */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Annotation */
   (
/*@egen*/
   LOOKAHEAD( "@" Name() "(" ( <IDENTIFIER> "=" | ")" ))
   NormalAnnotation()
 |
   LOOKAHEAD( "@" Name() "(" )
   SingleMemberAnnotation()
 |
   MarkerAnnotation()/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTANNOTATION); }
         }
       }
   }
/*@egen*/
}

void NormalAnnotation() :
{/*@bgen(jjtree) NormalAnnotation */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) NormalAnnotation */
   (
/*@egen*/
   "@" Name() "(" [ MemberValuePairs() ] ")"/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTNORMALANNOTATION); }
         }
       }
   }
/*@egen*/
}

void MarkerAnnotation() :
{/*@bgen(jjtree) MarkerAnnotation */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MarkerAnnotation */
  (
/*@egen*/
  "@" Name()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMARKERANNOTATION); }
        }
      }
  }
/*@egen*/
}

void SingleMemberAnnotation() :
{/*@bgen(jjtree) SingleMemberAnnotation */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) SingleMemberAnnotation */
  (
/*@egen*/
  "@" Name() "(" MemberValue() ")"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSINGLEMEMBERANNOTATION); }
        }
      }
  }
/*@egen*/
}

void MemberValuePairs() :
{/*@bgen(jjtree) MemberValuePairs */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MemberValuePairs */
   (
/*@egen*/
   MemberValuePair() ( "," MemberValuePair() )*/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTMEMBERVALUEPAIRS); }
         }
       }
   }
/*@egen*/
}

void MemberValuePair() :
{/*@bgen(jjtree) MemberValuePair */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MemberValuePair */
    (
/*@egen*/
    <IDENTIFIER> "=" MemberValue()/*@bgen(jjtree)*/
    ) {
        {
          if (jjtc000) {
            jjtc000 = false;
            {jjtn000.done(JJTMEMBERVALUEPAIR); }
          }
        }
    }
/*@egen*/
}

void MemberValue() :
{/*@bgen(jjtree) MemberValue */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MemberValue */
   (
/*@egen*/
   Annotation()
 |
   MemberValueArrayInitializer()
 |
   ConditionalExpression()/*@bgen(jjtree)*/
   ) {
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTMEMBERVALUE); }
         }
       }
   }
/*@egen*/
}

void  MemberValueArrayInitializer() :
{/*@bgen(jjtree) MemberValueArrayInitializer */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MemberValueArrayInitializer */
  (
/*@egen*/
  "{" MemberValue() ( LOOKAHEAD(2) "," MemberValue() )* [ "," ] "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMEMBERVALUEARRAYINITIALIZER); }
        }
      }
  }
/*@egen*/
}


/* Annotation Types. */

void AnnotationTypeDeclaration() :
{/*@bgen(jjtree) AnnotationTypeDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) AnnotationTypeDeclaration */
  (
/*@egen*/
  "@" "interface" <IDENTIFIER> AnnotationTypeBody()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTANNOTATIONTYPEDECLARATION); }
        }
      }
  }
/*@egen*/
}

void AnnotationTypeBody() :
{/*@bgen(jjtree) AnnotationTypeBody */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) AnnotationTypeBody */
  (
/*@egen*/
  "{" ( AnnotationTypeMemberDeclaration() )* "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTANNOTATIONTYPEBODY); }
        }
      }
  }
/*@egen*/
}

void AnnotationTypeMemberDeclaration() :
{/*@bgen(jjtree) AnnotationTypeMemberDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) AnnotationTypeMemberDeclaration */
 (
/*@egen*/
 Modifiers()
 (
   LOOKAHEAD(Type() <IDENTIFIER> "(")
   Type() <IDENTIFIER> "(" ")" [ DefaultValue() ] ";"
  |
   ClassOrInterfaceDeclaration()
  |
   EnumDeclaration()
  |
   AnnotationTypeDeclaration()
  |
   FieldDeclaration()
 )
 |
   ( ";" )/*@bgen(jjtree)*/
 ) {
     {
       if (jjtc000) {
         jjtc000 = false;
         {jjtn000.done(JJTANNOTATIONTYPEMEMBERDECLARATION); }
       }
     }
 }
/*@egen*/
}

void DefaultValue() :
{/*@bgen(jjtree) DefaultValue */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) DefaultValue */
  (
/*@egen*/
  "default" MemberValue()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTDEFAULTVALUE); }
        }
      }
  }
/*@egen*/
}

