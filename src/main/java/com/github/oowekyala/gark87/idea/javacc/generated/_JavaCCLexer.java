/* The following code was generated by JFlex 1.4.3 on 27.03.11 0:12 */

/* Generated By:JJTree(jj2IntelliJ output version)&JavaCC(jj2IntelliJ output version): Do not edit this line. _JavaCCLexer.flex */
/**
 * It's an automatically generated code. Do not modify it.
 * ATTENTION! It was generated by JFlex patched by the JetBrains guys.
 *
 * # git clone git://git.jetbrains.org/idea/community.git $IDEADIR
 * # $IDEADIR/tools/lexer/jflex-1.4/bin/jflex --skel $IDEADIR/tools/lexer/idea-flex.skeleton \
 * --charat --jlex -d . _JavaCCLexer.flex
 */

package com.github.oowekyala.gark87.idea.javacc.generated;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27.03.11 0:12 from the specification file
 * <tt>_JavaCCLexer.flex</tt>
 */
class _JavaCCLexer implements FlexLexer {
    /** lexical states */
    public static final int IN_MULTI_LINE_COMMENT = 6;
    public static final int IN_SINGLE_LINE_COMMENT = 2;
    public static final int YYINITIAL = 0;
    public static final int IN_FORMAL_COMMENT = 4;
    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\72\1\124\1\123\1\0\1\124\1\65\16\72\4\0\1\124\1\106" +
                    "\1\67\1\121\1\71\1\120\1\113\1\64\1\73\1\74\1\115\1\114" +
                    "\1\102\1\63\1\62\1\116\1\57\3\70\4\61\2\56\1\111\1\101" +
                    "\1\105\1\103\1\104\1\110\1\122\1\12\1\26\1\23\1\15\1\14" +
                    "\1\33\1\17\1\13\1\16\1\27\1\11\1\7\1\32\1\20\1\10" +
                    "\1\25\1\71\1\21\1\24\1\31\1\71\1\30\1\71\1\60\2\71" +
                    "\1\77\1\66\1\100\1\117\1\22\1\0\1\34\1\35\1\37\1\46" +
                    "\1\40\1\47\1\52\1\44\1\4\1\71\1\42\1\41\1\50\1\5" +
                    "\1\1\1\2\1\71\1\36\1\6\1\3\1\45\1\53\1\54\1\51" +
                    "\1\43\1\55\1\75\1\112\1\76\1\107\41\72\2\0\4\71\4\0" +
                    "\1\71\12\0\1\71\4\0\1\71\5\0\27\71\1\0\37\71\1\0" +
                    "\u0128\71\2\0\22\71\34\0\136\71\2\0\11\71\2\0\7\71\16\0" +
                    "\2\71\16\0\5\71\11\0\1\71\21\0\117\72\21\0\3\72\27\0" +
                    "\1\71\13\0\1\71\1\0\3\71\1\0\1\71\1\0\24\71\1\0" +
                    "\54\71\1\0\10\71\2\0\32\71\14\0\202\71\1\0\4\72\5\0" +
                    "\71\71\2\0\2\71\2\0\2\71\3\0\46\71\2\0\2\71\67\0" +
                    "\46\71\2\0\1\71\7\0\47\71\11\0\21\72\1\0\27\72\1\0" +
                    "\3\72\1\0\1\72\1\0\2\72\1\0\1\72\13\0\33\71\5\0" +
                    "\3\71\56\0\32\71\5\0\13\71\13\72\12\0\12\72\6\0\1\72" +
                    "\143\71\1\0\1\71\7\72\2\0\6\72\2\71\2\72\1\0\4\72" +
                    "\2\0\12\72\3\71\22\0\1\72\1\71\1\72\33\71\3\0\33\72" +
                    "\65\0\46\71\13\72\u0150\0\3\72\1\0\65\71\2\0\1\72\1\71" +
                    "\20\72\2\0\1\71\4\72\3\0\12\71\2\72\2\0\12\72\21\0" +
                    "\3\72\1\0\10\71\2\0\2\71\2\0\26\71\1\0\7\71\1\0" +
                    "\1\71\3\0\4\71\2\0\1\72\1\0\7\72\2\0\2\72\2\0" +
                    "\3\72\11\0\1\72\4\0\2\71\1\0\3\71\2\72\2\0\12\72" +
                    "\4\71\16\0\1\72\2\0\6\71\4\0\2\71\2\0\26\71\1\0" +
                    "\7\71\1\0\2\71\1\0\2\71\1\0\2\71\2\0\1\72\1\0" +
                    "\5\72\4\0\2\72\2\0\3\72\13\0\4\71\1\0\1\71\7\0" +
                    "\14\72\3\71\14\0\3\72\1\0\7\71\1\0\1\71\1\0\3\71" +
                    "\1\0\26\71\1\0\7\71\1\0\2\71\1\0\5\71\2\0\1\72" +
                    "\1\71\10\72\1\0\3\72\1\0\3\72\2\0\1\71\17\0\1\71" +
                    "\5\0\12\72\21\0\3\72\1\0\10\71\2\0\2\71\2\0\26\71" +
                    "\1\0\7\71\1\0\2\71\2\0\4\71\2\0\1\72\1\71\6\72" +
                    "\3\0\2\72\2\0\3\72\10\0\2\72\4\0\2\71\1\0\3\71" +
                    "\4\0\12\72\22\0\2\72\1\0\6\71\3\0\3\71\1\0\4\71" +
                    "\3\0\2\71\1\0\1\71\1\0\2\71\3\0\2\71\3\0\3\71" +
                    "\3\0\10\71\1\0\3\71\4\0\5\72\3\0\3\72\1\0\4\72" +
                    "\11\0\1\72\17\0\11\72\21\0\3\72\1\0\10\71\1\0\3\71" +
                    "\1\0\27\71\1\0\12\71\1\0\5\71\4\0\7\72\1\0\3\72" +
                    "\1\0\4\72\7\0\2\72\11\0\2\71\4\0\12\72\22\0\2\72" +
                    "\1\0\10\71\1\0\3\71\1\0\27\71\1\0\12\71\1\0\5\71" +
                    "\4\0\7\72\1\0\3\72\1\0\4\72\7\0\2\72\7\0\1\71" +
                    "\1\0\2\71\4\0\12\72\22\0\2\72\1\0\10\71\1\0\3\71" +
                    "\1\0\27\71\1\0\20\71\4\0\6\72\2\0\3\72\1\0\4\72" +
                    "\11\0\1\72\10\0\2\71\4\0\12\72\22\0\2\72\1\0\22\71" +
                    "\3\0\30\71\1\0\11\71\1\0\1\71\2\0\7\71\3\0\1\72" +
                    "\4\0\6\72\1\0\1\72\1\0\10\72\22\0\2\72\15\0\60\71" +
                    "\1\72\2\71\7\72\4\0\10\71\10\72\1\0\12\72\47\0\2\71" +
                    "\1\0\1\71\2\0\2\71\1\0\1\71\2\0\1\71\6\0\4\71" +
                    "\1\0\7\71\1\0\3\71\1\0\1\71\1\0\1\71\2\0\2\71" +
                    "\1\0\4\71\1\72\2\71\6\72\1\0\2\72\1\71\2\0\5\71" +
                    "\1\0\1\71\1\0\6\72\2\0\12\72\2\0\2\71\42\0\1\71" +
                    "\27\0\2\72\6\0\12\72\13\0\1\72\1\0\1\72\1\0\1\72" +
                    "\4\0\2\72\10\71\1\0\42\71\6\0\24\72\1\0\2\72\4\71" +
                    "\4\0\10\72\1\0\44\72\11\0\1\72\71\0\42\71\1\0\5\71" +
                    "\1\0\2\71\1\0\7\72\3\0\4\72\6\0\12\72\6\0\6\71" +
                    "\4\72\106\0\46\71\12\0\47\71\11\0\132\71\5\0\104\71\5\0" +
                    "\122\71\6\0\7\71\1\0\77\71\1\0\1\71\1\0\4\71\2\0" +
                    "\7\71\1\0\1\71\1\0\4\71\2\0\47\71\1\0\1\71\1\0" +
                    "\4\71\2\0\37\71\1\0\1\71\1\0\4\71\2\0\7\71\1\0" +
                    "\1\71\1\0\4\71\2\0\7\71\1\0\7\71\1\0\27\71\1\0" +
                    "\37\71\1\0\1\71\1\0\4\71\2\0\7\71\1\0\47\71\1\0" +
                    "\23\71\16\0\11\72\56\0\125\71\14\0\u026c\71\2\0\10\71\12\0" +
                    "\32\71\5\0\113\71\225\0\64\71\40\72\7\0\1\71\4\0\12\72" +
                    "\41\0\4\72\1\0\12\72\6\0\130\71\10\0\51\71\1\72\u0556\0" +
                    "\234\71\4\0\132\71\6\0\26\71\2\0\6\71\2\0\46\71\2\0" +
                    "\6\71\2\0\10\71\1\0\1\71\1\0\1\71\1\0\1\71\1\0" +
                    "\37\71\2\0\65\71\1\0\7\71\1\0\1\71\3\0\3\71\1\0" +
                    "\7\71\3\0\4\71\2\0\6\71\4\0\15\71\5\0\3\71\1\0" +
                    "\7\71\17\0\4\72\32\0\5\72\20\0\2\71\51\0\6\72\17\0" +
                    "\1\71\40\0\20\71\40\0\15\72\4\0\1\72\40\0\1\71\4\0" +
                    "\1\71\2\0\12\71\1\0\1\71\3\0\5\71\6\0\1\71\1\0" +
                    "\1\71\1\0\1\71\1\0\4\71\1\0\3\71\1\0\7\71\46\0" +
                    "\44\71\u0e81\0\3\71\31\0\11\71\6\72\1\0\5\71\2\0\3\71" +
                    "\6\0\124\71\4\0\2\72\2\0\2\71\2\0\136\71\6\0\50\71" +
                    "\4\0\136\71\21\0\30\71\u0248\0\u19b6\71\112\0\u51a6\71\132\0\u048d\71" +
                    "\u0773\0\u2ba4\71\u215c\0\u012e\71\322\0\7\71\14\0\5\71\5\0\1\71" +
                    "\1\72\12\71\1\0\15\71\1\0\5\71\1\0\1\71\1\0\2\71" +
                    "\1\0\2\71\1\0\154\71\41\0\u016b\71\22\0\100\71\2\0\66\71" +
                    "\50\0\14\71\44\0\4\72\17\0\2\71\30\0\3\71\31\0\1\71" +
                    "\6\0\3\71\1\0\1\71\1\0\207\71\2\0\1\72\4\0\1\71" +
                    "\13\0\12\72\7\0\32\71\4\0\1\71\1\0\32\71\12\0\132\71" +
                    "\3\0\6\71\2\0\6\71\2\0\6\71\2\0\3\71\3\0\2\71" +
                    "\3\0\2\71\22\0\3\72\4\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    private static final String ZZ_ACTION_PACKED_0 =
            "\4\0\1\1\32\2\2\3\1\4\1\5\1\1\1\6" +
                    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35" +
                    "\1\36\1\37\2\40\2\37\7\2\1\41\40\2\1\42" +
                    "\10\2\1\3\1\0\2\43\2\0\1\3\1\0\1\44" +
                    "\1\45\4\0\1\46\1\47\1\50\1\51\1\52\1\53" +
                    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63" +
                    "\1\64\1\65\1\66\1\67\1\70\6\2\1\71\3\2" +
                    "\1\72\3\2\1\73\10\2\1\74\30\2\1\75\7\2" +
                    "\1\43\1\0\1\3\1\0\1\76\1\77\5\0\6\2" +
                    "\1\100\1\101\6\2\1\102\10\2\1\103\4\2\1\104" +
                    "\4\2\1\105\4\2\1\106\1\2\1\107\1\110\1\111" +
                    "\1\2\1\112\5\2\1\113\1\114\2\2\2\0\1\115" +
                    "\6\2\1\116\10\2\1\117\1\120\6\2\1\121\3\2" +
                    "\1\122\2\2\1\123\1\124\1\125\3\2\1\126\1\127" +
                    "\1\130\1\2\1\131\4\2\1\132\1\2\1\133\2\2" +
                    "\1\134\1\2\1\135\1\136\2\2\1\137\6\2\1\140" +
                    "\2\2\1\141\2\2\1\142\3\2\1\143\1\144\1\2" +
                    "\1\145\15\2\1\146\1\2\1\147\1\150\1\151\6\2" +
                    "\1\152\6\2\1\153\1\2\1\154\1\155\1\156\1\157" +
                    "\1\160\1\161\3\2\1\162\5\2\1\163\1\164\3\2" +
                    "\1\165\3\2\1\166\3\2\1\167\1\2\1\170\1\2" +
                    "\1\171\2\2\1\172";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253" +
                    "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6\0\u04fb" +
                    "\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e\0\u07a3" +
                    "\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\u09a1\0\u09f6\0\u0a4b" +
                    "\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0154\0\u0bf4\0\u0154\0\u0154" +
                    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0c49\0\u0c9e" +
                    "\0\u0cf3\0\u0d48\0\u0154\0\u0154\0\u0154\0\u0d9d\0\u0df2\0\u0e47" +
                    "\0\u0e9c\0\u0ef1\0\u0f46\0\u0f9b\0\u0154\0\u0154\0\u0154\0\u0ff0" +
                    "\0\u0154\0\u1045\0\u109a\0\u10ef\0\u1144\0\u1199\0\u11ee\0\u1243" +
                    "\0\u1298\0\u12ed\0\u03fc\0\u1342\0\u1397\0\u13ec\0\u1441\0\u1496" +
                    "\0\u14eb\0\u1540\0\u1595\0\u15ea\0\u163f\0\u1694\0\u16e9\0\u173e" +
                    "\0\u1793\0\u17e8\0\u183d\0\u1892\0\u18e7\0\u193c\0\u1991\0\u19e6" +
                    "\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u1b8f\0\u1be4\0\u1c39\0\u1c8e" +
                    "\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c\0\u1ee1\0\u1f36" +
                    "\0\u1f8b\0\u1fe0\0\u2035\0\u208a\0\u0154\0\u20df\0\u0154\0\u2134" +
                    "\0\u2189\0\u21de\0\u2233\0\u2288\0\u0154\0\u0154\0\u22dd\0\u2332" +
                    "\0\u0bf4\0\u2387\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154" +
                    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u23dc" +
                    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u2431\0\u2486\0\u24db" +
                    "\0\u2530\0\u2585\0\u25da\0\u03fc\0\u262f\0\u2684\0\u26d9\0\u272e" +
                    "\0\u2783\0\u27d8\0\u282d\0\u03fc\0\u2882\0\u28d7\0\u292c\0\u2981" +
                    "\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5\0\u03fc\0\u2b2a\0\u2b7f\0\u2bd4" +
                    "\0\u2c29\0\u2c7e\0\u2cd3\0\u2d28\0\u2d7d\0\u2dd2\0\u2e27\0\u2e7c" +
                    "\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0\0\u3025\0\u307a\0\u30cf\0\u3124" +
                    "\0\u3179\0\u31ce\0\u3223\0\u3278\0\u32cd\0\u03fc\0\u3322\0\u3377" +
                    "\0\u33cc\0\u3421\0\u3476\0\u34cb\0\u3520\0\u3575\0\u35ca\0\u361f" +
                    "\0\u3674\0\u0154\0\u0154\0\u36c9\0\u371e\0\u3773\0\u37c8\0\u381d" +
                    "\0\u3872\0\u38c7\0\u391c\0\u3971\0\u39c6\0\u3a1b\0\u03fc\0\u03fc" +
                    "\0\u3a70\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4\0\u3c19\0\u03fc\0\u3c6e" +
                    "\0\u3cc3\0\u3d18\0\u3d6d\0\u3dc2\0\u3e17\0\u3e6c\0\u3ec1\0\u03fc" +
                    "\0\u3f16\0\u3f6b\0\u3fc0\0\u4015\0\u03fc\0\u406a\0\u40bf\0\u4114" +
                    "\0\u4169\0\u03fc\0\u41be\0\u4213\0\u4268\0\u42bd\0\u03fc\0\u4312" +
                    "\0\u03fc\0\u03fc\0\u03fc\0\u4367\0\u03fc\0\u43bc\0\u4411\0\u4466" +
                    "\0\u44bb\0\u4510\0\u03fc\0\u03fc\0\u4565\0\u45ba\0\u460f\0\u4664" +
                    "\0\u0154\0\u46b9\0\u470e\0\u4763\0\u47b8\0\u480d\0\u4862\0\u48b7" +
                    "\0\u490c\0\u4961\0\u49b6\0\u4a0b\0\u4a60\0\u4ab5\0\u4b0a\0\u4b5f" +
                    "\0\u03fc\0\u03fc\0\u4bb4\0\u4c09\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d" +
                    "\0\u4db2\0\u4e07\0\u4e5c\0\u4eb1\0\u03fc\0\u4f06\0\u4f5b\0\u03fc" +
                    "\0\u03fc\0\u03fc\0\u4fb0\0\u5005\0\u505a\0\u50af\0\u03fc\0\u03fc" +
                    "\0\u5104\0\u03fc\0\u5159\0\u51ae\0\u5203\0\u5258\0\u03fc\0\u52ad" +
                    "\0\u03fc\0\u5302\0\u5357\0\u03fc\0\u53ac\0\u03fc\0\u03fc\0\u5401" +
                    "\0\u5456\0\u03fc\0\u54ab\0\u5500\0\u5555\0\u55aa\0\u55ff\0\u5654" +
                    "\0\u03fc\0\u56a9\0\u56fe\0\u03fc\0\u5753\0\u57a8\0\u03fc\0\u57fd" +
                    "\0\u5852\0\u58a7\0\u03fc\0\u03fc\0\u58fc\0\u03fc\0\u5951\0\u59a6" +
                    "\0\u59fb\0\u5a50\0\u5aa5\0\u5afa\0\u5b4f\0\u5ba4\0\u5bf9\0\u5c4e" +
                    "\0\u5ca3\0\u5cf8\0\u5d4d\0\u03fc\0\u5da2\0\u03fc\0\u03fc\0\u03fc" +
                    "\0\u5df7\0\u5e4c\0\u5ea1\0\u5ef6\0\u5f4b\0\u5fa0\0\u03fc\0\u5ff5" +
                    "\0\u604a\0\u609f\0\u60f4\0\u6149\0\u619e\0\u03fc\0\u61f3\0\u03fc" +
                    "\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u6248\0\u629d\0\u62f2" +
                    "\0\u03fc\0\u6347\0\u639c\0\u63f1\0\u6446\0\u649b\0\u03fc\0\u03fc" +
                    "\0\u64f0\0\u6545\0\u659a\0\u03fc\0\u65ef\0\u6644\0\u6699\0\u03fc" +
                    "\0\u66ee\0\u6743\0\u6798\0\u03fc\0\u67ed\0\u03fc\0\u6842\0\u03fc" +
                    "\0\u6897\0\u68ec\0\u03fc";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14" +
                    "\4\15\1\16\1\15\1\17\5\15\1\20\1\21\1\15" +
                    "\1\22\1\15\1\23\1\24\1\15\1\25\1\26\1\27" +
                    "\1\30\1\31\1\32\4\15\1\33\1\34\2\15\1\35" +
                    "\1\36\1\37\1\15\1\40\1\41\1\15\1\40\1\42" +
                    "\1\43\1\44\1\45\1\5\1\46\1\40\1\15\1\5" +
                    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56" +
                    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66" +
                    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76" +
                    "\2\45\65\77\1\100\35\77\1\101\116\77\1\102\124\77" +
                    "\1\103\7\77\126\0\1\15\1\104\57\15\6\0\3\15" +
                    "\33\0\33\15\1\105\1\15\1\106\6\15\1\107\14\15" +
                    "\6\0\3\15\33\0\35\15\1\110\5\15\1\111\15\15" +
                    "\6\0\3\15\33\0\4\15\1\112\41\15\1\113\1\114" +
                    "\11\15\6\0\3\15\33\0\33\15\1\115\3\15\1\116" +
                    "\4\15\1\117\14\15\6\0\3\15\33\0\2\15\1\120" +
                    "\37\15\1\121\1\122\1\123\6\15\1\124\5\15\6\0" +
                    "\3\15\33\0\7\15\1\125\51\15\6\0\3\15\33\0" +
                    "\61\15\6\0\3\15\33\0\7\15\1\126\51\15\6\0" +
                    "\3\15\33\0\16\15\1\127\42\15\6\0\3\15\33\0" +
                    "\10\15\1\130\13\15\1\131\34\15\6\0\3\15\33\0" +
                    "\11\15\1\132\47\15\6\0\3\15\33\0\11\15\1\133" +
                    "\47\15\6\0\3\15\33\0\7\15\1\134\51\15\6\0" +
                    "\3\15\33\0\7\15\1\135\51\15\6\0\3\15\33\0" +
                    "\5\15\1\136\26\15\1\137\24\15\6\0\3\15\33\0" +
                    "\1\140\34\15\1\141\4\15\1\142\16\15\6\0\3\15" +
                    "\33\0\37\15\1\143\21\15\6\0\3\15\33\0\1\144" +
                    "\32\15\1\145\4\15\1\146\2\15\1\147\15\15\6\0" +
                    "\3\15\33\0\4\15\1\150\33\15\1\151\7\15\1\152" +
                    "\10\15\6\0\3\15\33\0\1\153\60\15\6\0\3\15" +
                    "\33\0\1\154\36\15\1\155\21\15\6\0\3\15\33\0" +
                    "\1\156\2\15\1\157\27\15\1\160\4\15\1\161\20\15" +
                    "\6\0\3\15\33\0\1\162\60\15\6\0\3\15\33\0" +
                    "\1\163\60\15\6\0\3\15\33\0\43\15\1\164\15\15" +
                    "\6\0\3\15\41\0\1\165\4\0\1\166\1\167\15\0" +
                    "\1\167\4\0\1\166\1\165\4\0\2\167\6\0\2\40" +
                    "\1\0\1\40\1\170\5\0\1\40\43\0\1\165\4\0" +
                    "\1\166\1\167\15\0\1\167\4\0\1\166\1\165\4\0" +
                    "\2\167\1\0\1\171\4\0\1\172\1\173\1\171\1\173" +
                    "\1\170\5\0\1\173\112\0\2\170\1\0\1\170\1\174" +
                    "\5\0\1\170\117\0\1\175\17\0\1\176\21\0\64\177" +
                    "\2\0\1\200\34\177\1\0\1\177\65\201\1\0\1\202" +
                    "\1\203\33\201\1\0\1\201\103\0\1\204\124\0\1\205" +
                    "\124\0\1\206\124\0\1\207\124\0\1\210\6\0\1\211" +
                    "\115\0\1\212\7\0\1\213\114\0\1\214\10\0\1\215" +
                    "\113\0\1\216\124\0\1\217\11\0\1\220\1\221\111\0" +
                    "\1\222\124\0\1\223\144\0\1\101\117\0\1\224\124\0" +
                    "\1\225\7\0\2\15\1\226\56\15\6\0\3\15\33\0" +
                    "\36\15\1\227\22\15\6\0\3\15\33\0\1\230\2\15" +
                    "\1\231\55\15\6\0\3\15\33\0\34\15\1\232\24\15" +
                    "\6\0\3\15\33\0\33\15\1\233\6\15\1\234\1\15" +
                    "\1\235\14\15\6\0\3\15\33\0\3\15\1\236\31\15" +
                    "\1\237\23\15\6\0\3\15\33\0\2\15\1\240\2\15" +
                    "\1\241\53\15\6\0\3\15\33\0\1\15\1\242\57\15" +
                    "\6\0\3\15\33\0\2\15\1\243\56\15\6\0\3\15" +
                    "\33\0\53\15\1\244\5\15\6\0\3\15\33\0\40\15" +
                    "\1\245\20\15\6\0\3\15\33\0\33\15\1\246\1\15" +
                    "\1\247\23\15\6\0\3\15\33\0\4\15\1\250\54\15" +
                    "\6\0\3\15\33\0\1\251\60\15\6\0\3\15\33\0" +
                    "\1\15\1\252\57\15\6\0\3\15\33\0\3\15\1\253" +
                    "\55\15\6\0\3\15\33\0\7\15\1\254\51\15\6\0" +
                    "\3\15\33\0\32\15\1\255\26\15\6\0\3\15\33\0" +
                    "\17\15\1\256\41\15\6\0\3\15\33\0\15\15\1\257" +
                    "\43\15\6\0\3\15\33\0\13\15\1\260\45\15\6\0" +
                    "\3\15\33\0\20\15\1\261\40\15\6\0\3\15\33\0" +
                    "\27\15\1\262\31\15\6\0\3\15\33\0\10\15\1\263" +
                    "\50\15\6\0\3\15\33\0\20\15\1\264\40\15\6\0" +
                    "\3\15\33\0\5\15\1\265\53\15\6\0\3\15\33\0" +
                    "\5\15\1\266\53\15\6\0\3\15\33\0\1\267\60\15" +
                    "\6\0\3\15\33\0\37\15\1\270\21\15\6\0\3\15" +
                    "\33\0\2\15\1\271\56\15\6\0\3\15\33\0\2\15" +
                    "\1\272\56\15\6\0\3\15\33\0\4\15\1\273\54\15" +
                    "\6\0\3\15\33\0\2\15\1\274\2\15\1\275\53\15" +
                    "\6\0\3\15\33\0\33\15\1\276\25\15\6\0\3\15" +
                    "\33\0\33\15\1\277\25\15\6\0\3\15\33\0\44\15" +
                    "\1\300\14\15\6\0\3\15\33\0\5\15\1\301\53\15" +
                    "\6\0\3\15\33\0\2\15\1\302\56\15\6\0\3\15" +
                    "\33\0\4\15\1\303\54\15\6\0\3\15\33\0\44\15" +
                    "\1\304\14\15\6\0\3\15\33\0\46\15\1\305\12\15" +
                    "\6\0\3\15\33\0\35\15\1\306\23\15\6\0\3\15" +
                    "\33\0\4\15\1\307\54\15\6\0\3\15\33\0\40\15" +
                    "\1\310\20\15\6\0\3\15\33\0\1\311\60\15\6\0" +
                    "\3\15\33\0\2\15\1\312\56\15\6\0\3\15\33\0" +
                    "\3\15\1\313\34\15\1\314\20\15\6\0\3\15\33\0" +
                    "\3\15\1\315\55\15\6\0\3\15\110\0\2\316\1\0" +
                    "\1\316\1\0\1\317\4\0\1\316\23\0\1\317\24\0" +
                    "\1\166\1\167\15\0\1\167\4\0\1\166\5\0\2\167" +
                    "\6\0\2\170\1\0\1\170\6\0\1\170\46\0\1\320" +
                    "\1\0\2\320\5\0\1\320\2\0\1\320\4\0\3\320" +
                    "\1\0\2\320\5\0\2\320\6\0\2\320\1\0\1\320" +
                    "\1\321\5\0\1\320\50\0\1\166\1\167\15\0\1\167" +
                    "\4\0\1\166\5\0\2\167\6\0\2\172\1\0\1\172" +
                    "\1\170\5\0\1\172\43\0\1\165\4\0\1\166\1\167" +
                    "\15\0\1\167\4\0\1\166\1\165\4\0\2\167\6\0" +
                    "\1\172\1\173\1\0\1\173\1\170\5\0\1\173\116\0" +
                    "\1\322\126\0\1\323\43\0\1\177\1\0\1\177\27\0" +
                    "\2\177\6\0\1\324\1\0\1\177\7\0\1\325\1\0" +
                    "\1\326\2\0\1\177\1\0\2\177\1\325\37\0\1\201" +
                    "\1\0\1\201\27\0\2\201\6\0\1\327\1\0\1\201" +
                    "\7\0\1\201\1\0\1\201\2\0\1\201\1\0\3\201" +
                    "\151\0\1\330\10\0\3\15\1\331\55\15\6\0\3\15" +
                    "\33\0\41\15\1\332\17\15\6\0\3\15\33\0\2\15" +
                    "\1\333\56\15\6\0\3\15\33\0\52\15\1\334\6\15" +
                    "\6\0\3\15\33\0\40\15\1\335\20\15\6\0\3\15" +
                    "\33\0\4\15\1\336\54\15\6\0\3\15\33\0\37\15" +
                    "\1\337\21\15\6\0\3\15\33\0\5\15\1\340\53\15" +
                    "\6\0\3\15\33\0\1\341\60\15\6\0\3\15\33\0" +
                    "\37\15\1\342\21\15\6\0\3\15\33\0\2\15\1\343" +
                    "\56\15\6\0\3\15\33\0\1\344\37\15\1\345\20\15" +
                    "\6\0\3\15\33\0\3\15\1\346\55\15\6\0\3\15" +
                    "\33\0\40\15\1\347\20\15\6\0\3\15\33\0\2\15" +
                    "\1\350\56\15\6\0\3\15\33\0\3\15\1\351\55\15" +
                    "\6\0\3\15\33\0\36\15\1\352\22\15\6\0\3\15" +
                    "\33\0\35\15\1\353\23\15\6\0\3\15\33\0\37\15" +
                    "\1\354\21\15\6\0\3\15\33\0\2\15\1\355\56\15" +
                    "\6\0\3\15\33\0\10\15\1\356\50\15\6\0\3\15" +
                    "\33\0\7\15\1\357\51\15\6\0\3\15\33\0\24\15" +
                    "\1\360\34\15\6\0\3\15\33\0\22\15\1\361\36\15" +
                    "\6\0\3\15\33\0\23\15\1\362\35\15\6\0\3\15" +
                    "\33\0\11\15\1\363\47\15\6\0\3\15\33\0\13\15" +
                    "\1\364\45\15\6\0\3\15\33\0\13\15\1\365\45\15" +
                    "\6\0\3\15\33\0\37\15\1\366\21\15\6\0\3\15" +
                    "\33\0\2\15\1\367\56\15\6\0\3\15\33\0\40\15" +
                    "\1\370\20\15\6\0\3\15\33\0\33\15\1\371\25\15" +
                    "\6\0\3\15\33\0\37\15\1\372\21\15\6\0\3\15" +
                    "\33\0\44\15\1\373\14\15\6\0\3\15\33\0\2\15" +
                    "\1\374\2\15\1\375\53\15\6\0\3\15\33\0\36\15" +
                    "\1\376\22\15\6\0\3\15\33\0\37\15\1\377\21\15" +
                    "\6\0\3\15\33\0\5\15\1\u0100\53\15\6\0\3\15" +
                    "\33\0\35\15\1\u0101\23\15\6\0\3\15\33\0\47\15" +
                    "\1\u0102\11\15\6\0\3\15\33\0\37\15\1\u0103\21\15" +
                    "\6\0\3\15\33\0\37\15\1\u0104\21\15\6\0\3\15" +
                    "\33\0\51\15\1\u0105\7\15\6\0\3\15\33\0\34\15" +
                    "\1\u0106\24\15\6\0\3\15\33\0\33\15\1\u0107\25\15" +
                    "\6\0\3\15\33\0\33\15\1\u0108\25\15\6\0\3\15" +
                    "\33\0\5\15\1\u0109\53\15\6\0\3\15\33\0\33\15" +
                    "\1\u010a\25\15\6\0\3\15\33\0\1\u010b\60\15\6\0" +
                    "\3\15\33\0\45\15\1\u010c\13\15\6\0\3\15\33\0" +
                    "\33\15\1\u010d\25\15\6\0\3\15\33\0\40\15\1\u010e" +
                    "\20\15\6\0\3\15\47\0\1\167\15\0\1\167\12\0" +
                    "\2\167\6\0\2\316\1\0\1\316\6\0\1\316\112\0" +
                    "\2\316\1\0\1\316\6\0\1\316\36\0\1\166\4\0" +
                    "\1\165\2\0\1\320\1\0\2\320\5\0\1\320\1\0" +
                    "\1\166\1\320\4\0\3\320\1\0\2\320\1\165\4\0" +
                    "\2\320\6\0\2\320\1\0\1\320\1\u010f\5\0\1\320" +
                    "\46\0\1\u010f\1\0\2\u010f\5\0\1\u010f\2\0\1\u010f" +
                    "\4\0\3\u010f\1\0\2\u010f\5\0\2\u010f\6\0\2\u010f" +
                    "\1\0\1\u010f\6\0\1\u010f\46\0\1\u0110\1\0\2\u0110" +
                    "\5\0\1\u0110\2\0\1\u0110\4\0\3\u0110\1\0\2\u0110" +
                    "\5\0\2\u0110\6\0\2\u0110\1\0\1\u0110\6\0\1\u0110" +
                    "\113\0\1\326\1\0\1\326\2\0\1\323\3\0\1\326" +
                    "\113\0\1\177\1\0\1\177\2\0\1\323\3\0\1\177" +
                    "\46\0\1\201\1\0\2\201\5\0\1\201\2\0\1\201" +
                    "\4\0\3\201\1\0\2\201\5\0\2\201\6\0\2\201" +
                    "\1\0\1\201\6\0\1\201\34\0\116\u0111\1\0\6\u0111" +
                    "\1\0\1\u0112\60\15\6\0\3\15\33\0\33\15\1\u0113" +
                    "\25\15\6\0\3\15\33\0\37\15\1\u0114\21\15\6\0" +
                    "\3\15\33\0\33\15\1\u0115\25\15\6\0\3\15\33\0" +
                    "\3\15\1\u0116\55\15\6\0\3\15\33\0\5\15\1\u0117" +
                    "\53\15\6\0\3\15\33\0\53\15\1\u0118\5\15\6\0" +
                    "\3\15\33\0\35\15\1\u0119\23\15\6\0\3\15\33\0" +
                    "\33\15\1\u011a\25\15\6\0\3\15\33\0\35\15\1\u011b" +
                    "\23\15\6\0\3\15\33\0\37\15\1\u011c\21\15\6\0" +
                    "\3\15\33\0\52\15\1\u011d\6\15\6\0\3\15\33\0" +
                    "\3\15\1\u011e\55\15\6\0\3\15\33\0\36\15\1\u011f" +
                    "\22\15\6\0\3\15\33\0\43\15\1\u0120\15\15\6\0" +
                    "\3\15\33\0\2\15\1\u0121\56\15\6\0\3\15\33\0" +
                    "\35\15\1\u0122\23\15\6\0\3\15\33\0\36\15\1\u0123" +
                    "\22\15\6\0\3\15\33\0\11\15\1\u0124\47\15\6\0" +
                    "\3\15\33\0\20\15\1\u0125\40\15\6\0\3\15\33\0" +
                    "\15\15\1\u0126\43\15\6\0\3\15\33\0\13\15\1\u0127" +
                    "\45\15\6\0\3\15\33\0\22\15\1\u0128\36\15\6\0" +
                    "\3\15\33\0\17\15\1\u0129\41\15\6\0\3\15\33\0" +
                    "\35\15\1\u012a\23\15\6\0\3\15\33\0\35\15\1\u012b" +
                    "\23\15\6\0\3\15\33\0\37\15\1\u012c\21\15\6\0" +
                    "\3\15\33\0\41\15\1\u012d\17\15\6\0\3\15\33\0" +
                    "\35\15\1\u012e\23\15\6\0\3\15\33\0\3\15\1\u012f" +
                    "\55\15\6\0\3\15\33\0\2\15\1\u0130\56\15\6\0" +
                    "\3\15\33\0\43\15\1\u0131\15\15\6\0\3\15\33\0" +
                    "\5\15\1\u0132\53\15\6\0\3\15\33\0\4\15\1\u0133" +
                    "\54\15\6\0\3\15\33\0\40\15\1\u0134\20\15\6\0" +
                    "\3\15\33\0\44\15\1\u0135\14\15\6\0\3\15\33\0" +
                    "\40\15\1\u0136\20\15\6\0\3\15\33\0\37\15\1\u0137" +
                    "\21\15\6\0\3\15\33\0\2\15\1\u0138\56\15\6\0" +
                    "\3\15\33\0\2\15\1\u0139\56\15\6\0\3\15\33\0" +
                    "\37\15\1\u013a\21\15\6\0\3\15\34\0\1\166\7\0" +
                    "\1\u010f\1\0\2\u010f\5\0\1\u010f\1\0\1\166\1\u010f" +
                    "\4\0\3\u010f\1\0\2\u010f\5\0\2\u010f\6\0\2\u010f" +
                    "\1\0\1\u010f\6\0\1\u010f\46\0\1\u0110\1\0\2\u0110" +
                    "\5\0\1\u0110\2\0\1\u0110\4\0\3\u0110\1\0\2\u0110" +
                    "\5\0\2\u0110\6\0\2\u0110\1\0\1\u0110\2\0\1\323" +
                    "\3\0\1\u0110\35\0\4\15\1\u013b\54\15\6\0\3\15" +
                    "\33\0\51\15\1\u013c\7\15\6\0\3\15\33\0\36\15" +
                    "\1\u013d\22\15\6\0\3\15\33\0\2\15\1\u013e\56\15" +
                    "\6\0\3\15\33\0\36\15\1\u013f\22\15\6\0\3\15" +
                    "\33\0\3\15\1\u0140\55\15\6\0\3\15\33\0\5\15" +
                    "\1\u0141\53\15\6\0\3\15\33\0\46\15\1\u0142\12\15" +
                    "\6\0\3\15\33\0\4\15\1\u0143\54\15\6\0\3\15" +
                    "\33\0\2\15\1\u0144\56\15\6\0\3\15\33\0\47\15" +
                    "\1\u0145\11\15\6\0\3\15\33\0\37\15\1\u0146\21\15" +
                    "\6\0\3\15\33\0\36\15\1\u0147\22\15\6\0\3\15" +
                    "\33\0\2\15\1\u0148\56\15\6\0\3\15\33\0\35\15" +
                    "\1\u0149\23\15\6\0\3\15\33\0\43\15\1\u014a\15\15" +
                    "\6\0\3\15\33\0\12\15\1\u014b\46\15\6\0\3\15" +
                    "\33\0\13\15\1\u014c\45\15\6\0\3\15\33\0\11\15" +
                    "\1\u014d\47\15\6\0\3\15\33\0\20\15\1\u014e\40\15" +
                    "\6\0\3\15\33\0\7\15\1\u014f\51\15\6\0\3\15" +
                    "\33\0\21\15\1\u0150\37\15\6\0\3\15\33\0\2\15" +
                    "\1\u0151\56\15\6\0\3\15\33\0\33\15\1\u0152\25\15" +
                    "\6\0\3\15\33\0\33\15\1\u0153\25\15\6\0\3\15" +
                    "\33\0\4\15\1\u0154\54\15\6\0\3\15\33\0\4\15" +
                    "\1\u0155\54\15\6\0\3\15\33\0\45\15\1\u0156\13\15" +
                    "\6\0\3\15\33\0\37\15\1\u0157\21\15\6\0\3\15" +
                    "\33\0\40\15\1\u0158\20\15\6\0\3\15\33\0\40\15" +
                    "\1\u0159\20\15\6\0\3\15\33\0\3\15\1\u015a\55\15" +
                    "\6\0\3\15\33\0\5\15\1\u015b\53\15\6\0\3\15" +
                    "\33\0\37\15\1\u015c\21\15\6\0\3\15\33\0\2\15" +
                    "\1\u015d\56\15\6\0\3\15\33\0\37\15\1\u015e\21\15" +
                    "\6\0\3\15\33\0\37\15\1\u015f\21\15\6\0\3\15" +
                    "\33\0\33\15\1\u0160\25\15\6\0\3\15\33\0\36\15" +
                    "\1\u0161\22\15\6\0\3\15\33\0\37\15\1\u0162\21\15" +
                    "\6\0\3\15\33\0\46\15\1\u0163\12\15\6\0\3\15" +
                    "\33\0\1\u0164\60\15\6\0\3\15\33\0\13\15\1\u0165" +
                    "\45\15\6\0\3\15\33\0\21\15\1\u0166\37\15\6\0" +
                    "\3\15\33\0\6\15\1\u0167\52\15\6\0\3\15\33\0" +
                    "\21\15\1\u0168\37\15\6\0\3\15\33\0\14\15\1\u0169" +
                    "\44\15\6\0\3\15\33\0\31\15\1\u016a\27\15\6\0" +
                    "\3\15\33\0\36\15\1\u016b\22\15\6\0\3\15\33\0" +
                    "\4\15\1\u016c\54\15\6\0\3\15\33\0\44\15\1\u016d" +
                    "\14\15\6\0\3\15\33\0\5\15\1\u016e\53\15\6\0" +
                    "\3\15\33\0\2\15\1\u016f\56\15\6\0\3\15\33\0" +
                    "\42\15\1\u0170\16\15\6\0\3\15\33\0\40\15\1\u0171" +
                    "\20\15\6\0\3\15\33\0\37\15\1\u0172\21\15\6\0" +
                    "\3\15\33\0\4\15\1\u0173\54\15\6\0\3\15\33\0" +
                    "\36\15\1\u0174\22\15\6\0\3\15\33\0\37\15\1\u0175" +
                    "\21\15\6\0\3\15\33\0\4\15\1\u0176\54\15\6\0" +
                    "\3\15\33\0\1\15\1\u0177\57\15\6\0\3\15\33\0" +
                    "\4\15\1\u0178\54\15\6\0\3\15\33\0\11\15\1\u0179" +
                    "\47\15\6\0\3\15\33\0\22\15\1\u017a\36\15\6\0" +
                    "\3\15\33\0\21\15\1\u017b\37\15\6\0\3\15\33\0" +
                    "\13\15\1\u017c\11\15\1\u017d\33\15\6\0\3\15\33\0" +
                    "\13\15\1\u017e\45\15\6\0\3\15\33\0\16\15\1\u017f" +
                    "\42\15\6\0\3\15\33\0\2\15\1\u0180\56\15\6\0" +
                    "\3\15\33\0\37\15\1\u0181\21\15\6\0\3\15\33\0" +
                    "\37\15\1\u0182\21\15\6\0\3\15\33\0\45\15\1\u0183" +
                    "\13\15\6\0\3\15\33\0\2\15\1\u0184\56\15\6\0" +
                    "\3\15\33\0\37\15\1\u0185\21\15\6\0\3\15\33\0" +
                    "\1\u0186\60\15\6\0\3\15\33\0\2\15\1\u0187\56\15" +
                    "\6\0\3\15\33\0\3\15\1\u0188\55\15\6\0\3\15" +
                    "\33\0\14\15\1\u0189\44\15\6\0\3\15\33\0\11\15" +
                    "\1\u018a\47\15\6\0\3\15\33\0\30\15\1\u018b\30\15" +
                    "\6\0\3\15\33\0\17\15\1\u018c\41\15\6\0\3\15" +
                    "\33\0\13\15\1\u018d\45\15\6\0\3\15\33\0\20\15" +
                    "\1\u018e\40\15\6\0\3\15\33\0\46\15\1\u018f\12\15" +
                    "\6\0\3\15\33\0\5\15\1\u0190\53\15\6\0\3\15" +
                    "\33\0\54\15\1\u0191\4\15\6\0\3\15\33\0\23\15" +
                    "\1\u0192\35\15\6\0\3\15\33\0\7\15\1\u0193\51\15" +
                    "\6\0\3\15\33\0\14\15\1\u0194\44\15\6\0\3\15" +
                    "\33\0\16\15\1\u0195\42\15\6\0\3\15\33\0\21\15" +
                    "\1\u0196\37\15\6\0\3\15\33\0\37\15\1\u0197\21\15" +
                    "\6\0\3\15\33\0\13\15\1\u0198\45\15\6\0\3\15" +
                    "\33\0\10\15\1\u0199\50\15\6\0\3\15\33\0\15\15" +
                    "\1\u019a\43\15\6\0\3\15\33\0\14\15\1\u019b\44\15" +
                    "\6\0\3\15\33\0\45\15\1\u019c\13\15\6\0\3\15" +
                    "\33\0\13\15\1\u019d\45\15\6\0\3\15\33\0\17\15" +
                    "\1\u019e\41\15\6\0\3\15\33\0\13\15\1\u019f\45\15" +
                    "\6\0\3\15\33\0\17\15\1\u01a0\41\15\6\0\3\15" +
                    "\33\0\22\15\1\u01a1\36\15\6\0\3\15\33\0\6\15" +
                    "\1\u01a2\52\15\6\0\3\15\33\0\23\15\1\u01a3\35\15" +
                    "\6\0\3\15\32\0";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final char[] EMPTY_BUFFER = new char[0];
    private static final int YYEOF = -1;
    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\4\0\1\11\37\1\1\11\1\1\10\11\4\1\3\11" +
                    "\7\1\3\11\1\1\1\11\63\1\1\11\1\0\1\11" +
                    "\1\1\2\0\1\1\1\0\2\11\4\0\15\11\1\1" +
                    "\5\11\71\1\1\0\1\1\1\0\2\11\5\0\66\1" +
                    "\2\0\1\11\222\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    private static java.io.Reader zzReader = null; // Fake
    /** the current state of the DFA */
    private int zzState;
    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";
    /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
    private char[] zzBufferArray;
    /** the textposition at the last accepting state */
    private int zzMarkedPos;
    /** the textposition at the last state to be included in yytext */
    private int zzPushbackPos;
    /** the current text position in the buffer */
    private int zzCurrentPos;
    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;
    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;


    _JavaCCLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    _JavaCCLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }


    /* user code: */
    public void goTo(int offset) {
        zzCurrentPos = zzMarkedPos = zzStartRead = offset;
        zzPushbackPos = 0;
        zzAtEOF = offset < zzEndRead;
    }


    public IElementType advance() throws java.io.IOException {
        IElementType result = internalAdvance();
        int start = zzStartRead;
        while (result != null && (result == JavaCCConstants.MORE)) {
            result = internalAdvance();
        }
        zzStartRead = start;
        return result;
    }


    public final int getTokenStart() {
        return zzStartRead;
    }


    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }


    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     *
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     *
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType internalAdvance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;
        char[] zzBufferArrayL = zzBufferArray;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL.charAt(zzCurrentPosL++);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL.charAt(zzCurrentPosL++);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
            case 94: {
                return JavaCCConstants.STATIC;
            }
            case 123:
                break;
            case 83: {
                return JavaCCConstants.CONST;
            }
            case 124:
                break;
            case 57: {
                return JavaCCConstants.TRY;
            }
            case 125:
                break;
            case 13: {
                return JavaCCConstants.SEMICOLON;
            }
            case 126:
                break;
            case 53: {
                return JavaCCConstants.XORASSIGN;
            }
            case 127:
                break;
            case 21: {
                return JavaCCConstants.COLON;
            }
            case 128:
                break;
            case 82: {
                return JavaCCConstants.BREAK;
            }
            case 129:
                break;
            case 50: {
                return JavaCCConstants.SLASHASSIGN;
            }
            case 130:
                break;
            case 6: {
                return JavaCCConstants.SKIP;
            }
            case 131:
                break;
            case 69: {
                return JavaCCConstants.BYTE;
            }
            case 132:
                break;
            case 38: {
                return JavaCCConstants.STRING_LITERAL;
            }
            case 133:
                break;
            case 60: {
                return JavaCCConstants._EOF;
            }
            case 134:
                break;
            case 56: {
                yybegin(YYINITIAL);
                return JavaCCConstants.MULTI_LINE_COMMENT;
            }
            case 135:
                break;
            case 11: {
                return JavaCCConstants.LBRACKET;
            }
            case 136:
                break;
            case 35: {
                return JavaCCConstants.FLOATING_POINT_LITERAL;
            }
            case 137:
                break;
            case 30: {
                return JavaCCConstants.AT;
            }
            case 138:
                break;
            case 97: {
                return JavaCCConstants.RETURN;
            }
            case 139:
                break;
            case 68: {
                return JavaCCConstants._MORE;
            }
            case 140:
                break;
            case 33: {
                return JavaCCConstants.IF;
            }
            case 141:
                break;
            case 118: {
                return JavaCCConstants._IGNORE_CASE;
            }
            case 142:
                break;
            case 42: {
                return JavaCCConstants.NE;
            }
            case 143:
                break;
            case 96: {
                return JavaCCConstants.ASSERT;
            }
            case 144:
                break;
            case 29: {
                return JavaCCConstants.SHARP;
            }
            case 145:
                break;
            case 103: {
                return JavaCCConstants.EXTENDS;
            }
            case 146:
                break;
            case 80: {
                return JavaCCConstants.SUPER;
            }
            case 147:
                break;
            case 98: {
                return JavaCCConstants.DOUBLE;
            }
            case 148:
                break;
            case 73: {
                return JavaCCConstants.ELSE;
            }
            case 149:
                break;
            case 95: {
                return JavaCCConstants.SWITCH;
            }
            case 150:
                break;
            case 41: {
                return JavaCCConstants.LE;
            }
            case 151:
                break;
            case 63: {
                return JavaCCConstants.CHARACTER_LITERAL;
            }
            case 152:
                break;
            case 25: {
                return JavaCCConstants.STAR;
            }
            case 153:
                break;
            case 84: {
                return JavaCCConstants.CATCH;
            }
            case 154:
                break;
            case 14: {
                return JavaCCConstants.COMMA;
            }
            case 155:
                break;
            case 99: {
                return JavaCCConstants._OPTIONS;
            }
            case 156:
                break;
            case 90: {
                return JavaCCConstants.PUBLIC;
            }
            case 157:
                break;
            case 75: {
                return JavaCCConstants.GOTO;
            }
            case 158:
                break;
            case 47: {
                return JavaCCConstants.PLUSASSIGN;
            }
            case 159:
                break;
            case 55: {
                yybegin(YYINITIAL);
                return JavaCCConstants.FORMAL_COMMENT;
            }
            case 160:
                break;
            case 115: {
                return JavaCCConstants.INSTANCEOF;
            }
            case 161:
                break;
            case 111: {
                return JavaCCConstants.PROTECTED;
            }
            case 162:
                break;
            case 93: {
                return JavaCCConstants.NATIVE;
            }
            case 163:
                break;
            case 120: {
                return JavaCCConstants._PARSER_BEGIN;
            }
            case 164:
                break;
            case 32: {
                yybegin(YYINITIAL);
                return JavaCCConstants.SINGLE_LINE_COMMENT;
            }
            case 165:
                break;
            case 70: {
                return JavaCCConstants.CASE;
            }
            case 166:
                break;
            case 1: {
                return JavaCCConstants.ERROR;
            }
            case 167:
                break;
            case 28: {
                return JavaCCConstants.REM;
            }
            case 168:
                break;
            case 81: {
                return JavaCCConstants._TOKEN;
            }
            case 169:
                break;
            case 18: {
                return JavaCCConstants.BANG;
            }
            case 170:
                break;
            case 65: {
                return JavaCCConstants.THIS;
            }
            case 171:
                break;
            case 117: {
                return JavaCCConstants._PARSER_END;
            }
            case 172:
                break;
            case 119: {
                return JavaCCConstants.SYNCHRONIZED;
            }
            case 173:
                break;
            case 27: {
                return JavaCCConstants.XOR;
            }
            case 174:
                break;
            case 22: {
                return JavaCCConstants.BIT_OR;
            }
            case 175:
                break;
            case 85: {
                return JavaCCConstants.CLASS;
            }
            case 176:
                break;
            case 40: {
                return JavaCCConstants.GE;
            }
            case 177:
                break;
            case 23: {
                return JavaCCConstants.BIT_AND;
            }
            case 178:
                break;
            case 67: {
                return JavaCCConstants._SKIP;
            }
            case 179:
                break;
            case 122: {
                return JavaCCConstants._TOKEN_MGR_DECLS;
            }
            case 180:
                break;
            case 116: {
                return JavaCCConstants.IMPLEMENTS;
            }
            case 181:
                break;
            case 37: {
                return JavaCCConstants.MINUSASSIGN;
            }
            case 182:
                break;
            case 2: {
                return JavaCCConstants.IDENTIFIER;
            }
            case 183:
                break;
            case 10: {
                return JavaCCConstants.RBRACE;
            }
            case 184:
                break;
            case 3: {
                return JavaCCConstants.INTEGER_LITERAL;
            }
            case 185:
                break;
            case 86: {
                return JavaCCConstants.FINAL;
            }
            case 186:
                break;
            case 64: {
                return JavaCCConstants.TRUE;
            }
            case 187:
                break;
            case 109: {
                return JavaCCConstants.CONTINUE;
            }
            case 188:
                break;
            case 91: {
                return JavaCCConstants.THROWS;
            }
            case 189:
                break;
            case 87: {
                return JavaCCConstants.FALSE;
            }
            case 190:
                break;
            case 4: {
                return JavaCCConstants.DOT;
            }
            case 191:
                break;
            case 39: {
                return JavaCCConstants.EQ;
            }
            case 192:
                break;
            case 100: {
                return JavaCCConstants.PACKAGE;
            }
            case 193:
                break;
            case 104: {
                return JavaCCConstants._DEFAULT;
            }
            case 194:
                break;
            case 77: {
                yybegin(IN_FORMAL_COMMENT);
                return JavaCCConstants.MORE;
            }
            case 195:
                break;
            case 76: {
                return JavaCCConstants.VOID;
            }
            case 196:
                break;
            case 59: {
                return JavaCCConstants.NEW;
            }
            case 197:
                break;
            case 62: {
                return JavaCCConstants.ELLIPSIS;
            }
            case 198:
                break;
            case 113: {
                return JavaCCConstants.INTERFACE;
            }
            case 199:
                break;
            case 9: {
                return JavaCCConstants.LBRACE;
            }
            case 200:
                break;
            case 15: {
                return JavaCCConstants.ASSIGN;
            }
            case 201:
                break;
            case 36: {
                return JavaCCConstants.DECR;
            }
            case 202:
                break;
            case 88: {
                return JavaCCConstants.FLOAT;
            }
            case 203:
                break;
            case 43: {
                return JavaCCConstants.ORASSIGN;
            }
            case 204:
                break;
            case 19: {
                return JavaCCConstants.TILDE;
            }
            case 205:
                break;
            case 58: {
                return JavaCCConstants.INT;
            }
            case 206:
                break;
            case 92: {
                return JavaCCConstants.IMPORT;
            }
            case 207:
                break;
            case 107: {
                return JavaCCConstants._JAVACODE;
            }
            case 208:
                break;
            case 44: {
                return JavaCCConstants.SC_OR;
            }
            case 209:
                break;
            case 26: {
                return JavaCCConstants.SLASH;
            }
            case 210:
                break;
            case 51: {
                yybegin(IN_MULTI_LINE_COMMENT);
                return JavaCCConstants.MORE;
            }
            case 211:
                break;
            case 112: {
                return JavaCCConstants.TRANSIENT;
            }
            case 212:
                break;
            case 108: {
                return JavaCCConstants.ABSTRACT;
            }
            case 213:
                break;
            case 114: {
                return JavaCCConstants._LOOKAHEAD;
            }
            case 214:
                break;
            case 78: {
                return JavaCCConstants.THROW;
            }
            case 215:
                break;
            case 8: {
                return JavaCCConstants.RPAREN;
            }
            case 216:
                break;
            case 17: {
                return JavaCCConstants.LT;
            }
            case 217:
                break;
            case 7: {
                return JavaCCConstants.LPAREN;
            }
            case 218:
                break;
            case 5: {
                return JavaCCConstants.MINUS;
            }
            case 219:
                break;
            case 74: {
                return JavaCCConstants.LONG;
            }
            case 220:
                break;
            case 24: {
                return JavaCCConstants.PLUS;
            }
            case 221:
                break;
            case 31: {
                return JavaCCConstants.MORE;
            }
            case 222:
                break;
            case 121: {
                return JavaCCConstants._SPECIAL_TOKEN;
            }
            case 223:
                break;
            case 66: {
                return JavaCCConstants.NULL;
            }
            case 224:
                break;
            case 54: {
                return JavaCCConstants.REMASSIGN;
            }
            case 225:
                break;
            case 46: {
                return JavaCCConstants.SC_AND;
            }
            case 226:
                break;
            case 34: {
                return JavaCCConstants.DO;
            }
            case 227:
                break;
            case 110: {
                return JavaCCConstants.VOLATILE;
            }
            case 228:
                break;
            case 61: {
                return JavaCCConstants.FOR;
            }
            case 229:
                break;
            case 52: {
                yybegin(IN_SINGLE_LINE_COMMENT);
                return JavaCCConstants.MORE;
            }
            case 230:
                break;
            case 20: {
                return JavaCCConstants.HOOK;
            }
            case 231:
                break;
            case 106: {
                return JavaCCConstants.STRICTFP;
            }
            case 232:
                break;
            case 79: {
                return JavaCCConstants.SHORT;
            }
            case 233:
                break;
            case 72: {
                return JavaCCConstants.ENUM;
            }
            case 234:
                break;
            case 48: {
                return JavaCCConstants.INCR;
            }
            case 235:
                break;
            case 49: {
                return JavaCCConstants.STARASSIGN;
            }
            case 236:
                break;
            case 12: {
                return JavaCCConstants.RBRACKET;
            }
            case 237:
                break;
            case 105: {
                return JavaCCConstants.FINALLY;
            }
            case 238:
                break;
            case 102: {
                return JavaCCConstants.BOOLEAN;
            }
            case 239:
                break;
            case 101: {
                return JavaCCConstants.PRIVATE;
            }
            case 240:
                break;
            case 45: {
                return JavaCCConstants.ANDASSIGN;
            }
            case 241:
                break;
            case 71: {
                return JavaCCConstants.CHAR;
            }
            case 242:
                break;
            case 16: {
                return JavaCCConstants.GT;
            }
            case 243:
                break;
            case 89: {
                return JavaCCConstants.WHILE;
            }
            case 244:
                break;
            default:
                if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                    zzAtEOF = true;
                    zzDoEOF();
                    return null;
                } else {
                    zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


    private static int[] zzUnpackAction() {
        int[] result = new int[419];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }


    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    private static int[] zzUnpackRowMap() {
        int[] result = new int[419];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }


    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }


    private static int[] zzUnpackTrans() {
        int[] result = new int[26945];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }


    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    private static int[] zzUnpackAttribute() {
        int[] result = new int[419];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }


    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     *
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 1690) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }


}
