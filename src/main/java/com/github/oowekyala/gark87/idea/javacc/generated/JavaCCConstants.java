/* Generated By:JJTree(jj2IntelliJ output version)&JavaCC(jj2IntelliJ output version): Do not edit this line. JavaCCConstants.java */

package com.github.oowekyala.gark87.idea.javacc.generated;

import com.intellij.psi.tree.IElementType;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaCCConstants {

    /* MORE */
    IElementType MORE = new JavaCCElementType("|MORE|");
    /* SKIP */
    IElementType SKIP = new JavaCCElementType("|SKIP|");
    /** RegularExpression Id. */
    IElementType _OPTIONS = new JavaCCElementType("options");
    /** RegularExpression Id. */
    IElementType _LOOKAHEAD = new JavaCCElementType("LOOKAHEAD");
    /** RegularExpression Id. */
    IElementType _IGNORE_CASE = new JavaCCElementType("IGNORE_CASE");
    /** RegularExpression Id. */
    IElementType _PARSER_BEGIN = new JavaCCElementType("PARSER_BEGIN");
    /** RegularExpression Id. */
    IElementType _PARSER_END = new JavaCCElementType("PARSER_END");
    /** RegularExpression Id. */
    IElementType _JAVACODE = new JavaCCElementType("JAVACODE");
    /** RegularExpression Id. */
    IElementType _TOKEN = new JavaCCElementType("TOKEN");
    /** RegularExpression Id. */
    IElementType _SPECIAL_TOKEN = new JavaCCElementType("SPECIAL_TOKEN");
    /** RegularExpression Id. */
    IElementType _MORE = new JavaCCElementType("MORE");
    /** RegularExpression Id. */
    IElementType _SKIP = new JavaCCElementType("SKIP");
    /** RegularExpression Id. */
    IElementType _TOKEN_MGR_DECLS = new JavaCCElementType("TOKEN_MGR_DECLS");
    /** RegularExpression Id. */
    IElementType _EOF = new JavaCCElementType("EOF");
    /** RegularExpression Id. */
    IElementType SINGLE_LINE_COMMENT = new JavaCCElementType("<SINGLE_LINE_COMMENT>");
    /** RegularExpression Id. */
    IElementType FORMAL_COMMENT = new JavaCCElementType("*/");
    /** RegularExpression Id. */
    IElementType MULTI_LINE_COMMENT = new JavaCCElementType("*/");
    /** RegularExpression Id. */
    IElementType ABSTRACT = new JavaCCElementType("abstract");
    /** RegularExpression Id. */
    IElementType ASSERT = new JavaCCElementType("assert");
    /** RegularExpression Id. */
    IElementType BOOLEAN = new JavaCCElementType("boolean");
    /** RegularExpression Id. */
    IElementType BREAK = new JavaCCElementType("break");
    /** RegularExpression Id. */
    IElementType BYTE = new JavaCCElementType("byte");
    /** RegularExpression Id. */
    IElementType CASE = new JavaCCElementType("case");
    /** RegularExpression Id. */
    IElementType CATCH = new JavaCCElementType("catch");
    /** RegularExpression Id. */
    IElementType CHAR = new JavaCCElementType("char");
    /** RegularExpression Id. */
    IElementType CLASS = new JavaCCElementType("class");
    /** RegularExpression Id. */
    IElementType CONST = new JavaCCElementType("const");
    /** RegularExpression Id. */
    IElementType CONTINUE = new JavaCCElementType("continue");
    /** RegularExpression Id. */
    IElementType _DEFAULT = new JavaCCElementType("default");
    /** RegularExpression Id. */
    IElementType DO = new JavaCCElementType("do");
    /** RegularExpression Id. */
    IElementType DOUBLE = new JavaCCElementType("double");
    /** RegularExpression Id. */
    IElementType ELSE = new JavaCCElementType("else");
    /** RegularExpression Id. */
    IElementType ENUM = new JavaCCElementType("enum");
    /** RegularExpression Id. */
    IElementType EXTENDS = new JavaCCElementType("extends");
    /** RegularExpression Id. */
    IElementType FALSE = new JavaCCElementType("false");
    /** RegularExpression Id. */
    IElementType FINAL = new JavaCCElementType("final");
    /** RegularExpression Id. */
    IElementType FINALLY = new JavaCCElementType("finally");
    /** RegularExpression Id. */
    IElementType FLOAT = new JavaCCElementType("float");
    /** RegularExpression Id. */
    IElementType FOR = new JavaCCElementType("for");
    /** RegularExpression Id. */
    IElementType GOTO = new JavaCCElementType("goto");
    /** RegularExpression Id. */
    IElementType IF = new JavaCCElementType("if");
    /** RegularExpression Id. */
    IElementType IMPLEMENTS = new JavaCCElementType("implements");
    /** RegularExpression Id. */
    IElementType IMPORT = new JavaCCElementType("import");
    /** RegularExpression Id. */
    IElementType INSTANCEOF = new JavaCCElementType("instanceof");
    /** RegularExpression Id. */
    IElementType INT = new JavaCCElementType("int");
    /** RegularExpression Id. */
    IElementType INTERFACE = new JavaCCElementType("interface");
    /** RegularExpression Id. */
    IElementType LONG = new JavaCCElementType("long");
    /** RegularExpression Id. */
    IElementType NATIVE = new JavaCCElementType("native");
    /** RegularExpression Id. */
    IElementType NEW = new JavaCCElementType("new");
    /** RegularExpression Id. */
    IElementType NULL = new JavaCCElementType("null");
    /** RegularExpression Id. */
    IElementType PACKAGE = new JavaCCElementType("package");
    /** RegularExpression Id. */
    IElementType PRIVATE = new JavaCCElementType("private");
    /** RegularExpression Id. */
    IElementType PROTECTED = new JavaCCElementType("protected");
    /** RegularExpression Id. */
    IElementType PUBLIC = new JavaCCElementType("public");
    /** RegularExpression Id. */
    IElementType RETURN = new JavaCCElementType("return");
    /** RegularExpression Id. */
    IElementType SHORT = new JavaCCElementType("short");
    /** RegularExpression Id. */
    IElementType STATIC = new JavaCCElementType("static");
    /** RegularExpression Id. */
    IElementType STRICTFP = new JavaCCElementType("strictfp");
    /** RegularExpression Id. */
    IElementType SUPER = new JavaCCElementType("super");
    /** RegularExpression Id. */
    IElementType SWITCH = new JavaCCElementType("switch");
    /** RegularExpression Id. */
    IElementType SYNCHRONIZED = new JavaCCElementType("synchronized");
    /** RegularExpression Id. */
    IElementType THIS = new JavaCCElementType("this");
    /** RegularExpression Id. */
    IElementType THROW = new JavaCCElementType("throw");
    /** RegularExpression Id. */
    IElementType THROWS = new JavaCCElementType("throws");
    /** RegularExpression Id. */
    IElementType TRANSIENT = new JavaCCElementType("transient");
    /** RegularExpression Id. */
    IElementType TRUE = new JavaCCElementType("true");
    /** RegularExpression Id. */
    IElementType TRY = new JavaCCElementType("try");
    /** RegularExpression Id. */
    IElementType VOID = new JavaCCElementType("void");
    /** RegularExpression Id. */
    IElementType VOLATILE = new JavaCCElementType("volatile");
    /** RegularExpression Id. */
    IElementType WHILE = new JavaCCElementType("while");
    /** RegularExpression Id. */
    IElementType INTEGER_LITERAL = new JavaCCElementType("<INTEGER_LITERAL>");
    /** RegularExpression Id. */
    IElementType DECIMAL_LITERAL = new JavaCCElementType("<DECIMAL_LITERAL>");
    /** RegularExpression Id. */
    IElementType HEX_LITERAL = new JavaCCElementType("<HEX_LITERAL>");
    /** RegularExpression Id. */
    IElementType OCTAL_LITERAL = new JavaCCElementType("<OCTAL_LITERAL>");
    /** RegularExpression Id. */
    IElementType FLOATING_POINT_LITERAL = new JavaCCElementType("<FLOATING_POINT_LITERAL>");
    /** RegularExpression Id. */
    IElementType DECIMAL_FLOATING_POINT_LITERAL = new JavaCCElementType("<DECIMAL_FLOATING_POINT_LITERAL>");
    /** RegularExpression Id. */
    IElementType DECIMAL_EXPONENT = new JavaCCElementType("<DECIMAL_EXPONENT>");
    /** RegularExpression Id. */
    IElementType HEXADECIMAL_FLOATING_POINT_LITERAL = new JavaCCElementType("<HEXADECIMAL_FLOATING_POINT_LITERAL>");
    /** RegularExpression Id. */
    IElementType HEXADECIMAL_EXPONENT = new JavaCCElementType("<HEXADECIMAL_EXPONENT>");
    /** RegularExpression Id. */
    IElementType CHARACTER_LITERAL = new JavaCCElementType("<CHARACTER_LITERAL>");
    /** RegularExpression Id. */
    IElementType STRING_LITERAL = new JavaCCElementType("<STRING_LITERAL>");
    /** RegularExpression Id. */
    IElementType IDENTIFIER = new JavaCCElementType("<IDENTIFIER>");
    /** RegularExpression Id. */
    IElementType LETTER = new JavaCCElementType("<LETTER>");
    /** RegularExpression Id. */
    IElementType PART_LETTER = new JavaCCElementType("<PART_LETTER>");
    /** RegularExpression Id. */
    IElementType LPAREN = new JavaCCElementType("(");
    /** RegularExpression Id. */
    IElementType RPAREN = new JavaCCElementType(")");
    /** RegularExpression Id. */
    IElementType LBRACE = new JavaCCElementType("{");
    /** RegularExpression Id. */
    IElementType RBRACE = new JavaCCElementType("}");
    /** RegularExpression Id. */
    IElementType LBRACKET = new JavaCCElementType("[");
    /** RegularExpression Id. */
    IElementType RBRACKET = new JavaCCElementType("]");
    /** RegularExpression Id. */
    IElementType SEMICOLON = new JavaCCElementType(";");
    /** RegularExpression Id. */
    IElementType COMMA = new JavaCCElementType(",");
    /** RegularExpression Id. */
    IElementType DOT = new JavaCCElementType(".");
    /** RegularExpression Id. */
    IElementType ASSIGN = new JavaCCElementType("=");
    /** RegularExpression Id. */
    IElementType GT = new JavaCCElementType(">");
    /** RegularExpression Id. */
    IElementType LT = new JavaCCElementType("<");
    /** RegularExpression Id. */
    IElementType BANG = new JavaCCElementType("!");
    /** RegularExpression Id. */
    IElementType TILDE = new JavaCCElementType("~");
    /** RegularExpression Id. */
    IElementType HOOK = new JavaCCElementType("?");
    /** RegularExpression Id. */
    IElementType COLON = new JavaCCElementType(":");
    /** RegularExpression Id. */
    IElementType EQ = new JavaCCElementType("==");
    /** RegularExpression Id. */
    IElementType LE = new JavaCCElementType("<=");
    /** RegularExpression Id. */
    IElementType GE = new JavaCCElementType(">=");
    /** RegularExpression Id. */
    IElementType NE = new JavaCCElementType("!=");
    /** RegularExpression Id. */
    IElementType SC_OR = new JavaCCElementType("||");
    /** RegularExpression Id. */
    IElementType SC_AND = new JavaCCElementType("&&");
    /** RegularExpression Id. */
    IElementType INCR = new JavaCCElementType("++");
    /** RegularExpression Id. */
    IElementType DECR = new JavaCCElementType("--");
    /** RegularExpression Id. */
    IElementType PLUS = new JavaCCElementType("+");
    /** RegularExpression Id. */
    IElementType MINUS = new JavaCCElementType("-");
    /** RegularExpression Id. */
    IElementType STAR = new JavaCCElementType("*");
    /** RegularExpression Id. */
    IElementType SLASH = new JavaCCElementType("/");
    /** RegularExpression Id. */
    IElementType BIT_AND = new JavaCCElementType("&");
    /** RegularExpression Id. */
    IElementType BIT_OR = new JavaCCElementType("|");
    /** RegularExpression Id. */
    IElementType XOR = new JavaCCElementType("^");
    /** RegularExpression Id. */
    IElementType REM = new JavaCCElementType("%");
    /** RegularExpression Id. */
    IElementType PLUSASSIGN = new JavaCCElementType("+=");
    /** RegularExpression Id. */
    IElementType MINUSASSIGN = new JavaCCElementType("-=");
    /** RegularExpression Id. */
    IElementType STARASSIGN = new JavaCCElementType("*=");
    /** RegularExpression Id. */
    IElementType SLASHASSIGN = new JavaCCElementType("/=");
    /** RegularExpression Id. */
    IElementType ANDASSIGN = new JavaCCElementType("&=");
    /** RegularExpression Id. */
    IElementType ORASSIGN = new JavaCCElementType("|=");
    /** RegularExpression Id. */
    IElementType XORASSIGN = new JavaCCElementType("^=");
    /** RegularExpression Id. */
    IElementType REMASSIGN = new JavaCCElementType("%=");
    /** RegularExpression Id. */
    IElementType SHARP = new JavaCCElementType("#");
    /** RegularExpression Id. */
    IElementType ELLIPSIS = new JavaCCElementType("...");
    /** RegularExpression Id. */
    IElementType AT = new JavaCCElementType("@");
    /** RegularExpression Id. */
    IElementType ERROR = new JavaCCElementType("<ERROR>");


}
