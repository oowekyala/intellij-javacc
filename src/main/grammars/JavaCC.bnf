{
  parserClass="com.github.oowekyala.ijcc.lang.parser.JavaccParser"
  parserUtilClass="com.github.oowekyala.ijcc.lang.parser.JavaccParserUtil"

  implements="com.github.oowekyala.ijcc.lang.psi.JavaccPsiElement"
  extends="com.github.oowekyala.ijcc.lang.psi.impl.JavaccPsiElementImpl"

  elementTypeHolderClass="com.github.oowekyala.ijcc.lang.JavaccTypes"
  elementTypePrefix="JCC_"
  elementTypeClass="com.github.oowekyala.ijcc.lang.psi.IJavaccElementType"
  tokenTypeClass="com.github.oowekyala.ijcc.lang.psi.IJavaccTokenType"

  psiClassPrefix="Jcc"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.oowekyala.ijcc.lang.psi"
  psiImplPackage="com.github.oowekyala.ijcc.lang.psi.impl"

  psiImplUtilClass="com.github.oowekyala.ijcc.lang.psi.impl.JavaccPsiImplUtil"

  parserImports = [
  'static com.intellij.psi.JavaTokenType.*'
  ]

  generatePsi=true
  tokens = [
        LOOKAHEAD_KEYWORD         = 'LOOKAHEAD'
        IGNORE_CASE_OPTION        = 'IGNORE_CASE'
        PARSER_BEGIN_KEYWORD      = 'PARSER_BEGIN'
        PARSER_END_KEYWORD        = 'PARSER_END'
        JAVACODE_KEYWORD          = 'JAVACODE'
        TOKEN_KEYWORD             = 'TOKEN'
        SPECIAL_TOKEN_KEYWORD     = 'SPECIAL_TOKEN'
        MORE_KEYWORD              = 'MORE'
        SKIP_KEYWORD              = 'SKIP'
        TOKEN_MGR_DECLS_KEYWORD   = 'TOKEN_MGR_DECLS'
        EOF_KEYWORD               = 'EOF'


  		PRIVATE_KEYWORD		= "private"
  		PUBLIC_KEYWORD		= "public"
  		PROTECTED_KEYWORD	= "protected"

  		STATIC_KEYWORD	= "static"

  		VOID_KEYWORD	= "void"

  		FALSE_KEYWORD	= "false"
  		TRUE_KEYWORD	= "true"

  		THROWS_KEYWORD	= "throws"
  		TRY_KEYWORD	    = "try"
  		CATCH_KEYWORD	= "catch"
  		FINALLY_KEYWORD	= "finally"

        IDENT       = 'regexp:\p{Alpha}\w*'

        POUND       = "#"
        COLON       = ":"

        LT          = "<"
        GT          = ">"

  		LPARENTH	= "("
  		RPARENTH	= ")"
  		LBRACE		= "{"
  		RBRACE		= "}"
        LBRACKET    = "["
        RBRACKET    = "]"

  		SEMICOLON	= ";"
  		COMMA	    = ","
  		ELLIPSIS    = "..."
  		DOT         = "."

        EQ          = "="

  		UNION       = "|"
  		TILDE       = "~"
        ASTERISK    = "*"
        PLUS        = "+"
        MINUS       = "-"
        QUESTION    = "?"

        DOUBLE_LITERAL      = 'regexp:(0[xb])?[\da-fA-F]*(\.[\da-fA-F]+)?[dD]?'
        INTEGER_LITERAL     = 'regexp:(0[xb])?[\da-fA-F]+'
        STRING_LITERAL      = 'regexp:"([^"\\]|\\.)*"'
        FLOAT_LITERAL       = 'regexp:(0[xb])?[\da-fA-F]*(\.[\da-fA-F]+)?[fF]?'
        LONG_LITERAL        = 'regexp:(0[xb])?[\da-fA-F]+[lL]'
        CHARACTER_LITERAL   = "regexp:'([^\\\'\r\n]|\\[^\n\r])'"

        C_STYLE_COMMENT     = "C_STYLE_COMMENT"
        END_OF_LINE_COMMENT = "END_OF_LINE_COMMENT"
        DOC_COMMENT         = "DOC_COMMENT"

        BAD_CHARACTER   = "BAD_CHARACTER"
  ]

  implements("(bnf|javacode)_production") = 'com.github.oowekyala.ijcc.lang.psi.JccNonTerminalProduction'
  methods("(bnf|javacode)_production") = [
       header="java_non_terminal_production_header"
  ]

  implements("java_non_terminal_production_header|jjtree_node_descriptor") = 'com.github.oowekyala.ijcc.lang.psi.JccIdentifierOwner'

  methods("java_non_terminal_production_header|jjtree_node_descriptor") = [
    nameIdentifier="identifier"
  ]

  methods("jjtree_node_descriptor") = [
    descriptorExpr="jjtree_node_descriptor_expr"
  ]

   consumeTokenMethod(".*_regexp_.*")="consumeTokenFast"
}

javacc_input 	::=
    javacc_options?
	parser_declaration
	( production )*

javacc_options 	    ::=
    "options" "{" ( option_binding )* "}" {pin=1}

option_binding 	    ::=
    option_name "=" (INTEGER_LITERAL | STRING_LITERAL | java_boolean_literal) ";" {pin=option_name recoverWhile="option_recover"}

private option_recover  ::= !(option_name | "}")

private option_name ::=
        "LOOKAHEAD" | "IGNORE_CASE" | "static" | IDENT
//      "LOOKAHEAD" "=" INTEGER_LITERAL ";"
//	| 	"CHOICE_AMBIGUITY_CHECK" "=" INTEGER_LITERAL ";"
//	| 	"OTHER_AMBIGUITY_CHECK" "=" INTEGER_LITERAL ";"
//	| 	"AUTOMATIC_ERROR_RECOVERY" "=" java_boolean_literal ";"
//	| 	"STATIC" "=" java_boolean_literal ";"
//	| 	"SUPPORT_CLASS_VISIBILITY_PUBLIC" "=" java_boolean_literal ";"
//	| 	"DEBUG_PARSER" "=" java_boolean_literal ";"
//	| 	"DEBUG_LOOKAHEAD" "=" java_boolean_literal ";"
//	| 	"DEBUG_TOKEN_MANAGER" "=" java_boolean_literal ";"
//	| 	"ERROR_REPORTING" "=" java_boolean_literal ";"
//	| 	"JAVA_UNICODE_ESCAPE" "=" java_boolean_literal ";"
//	| 	"UNICODE_INPUT" "=" java_boolean_literal ";"
//	| 	"IGNORE_CASE" "=" java_boolean_literal ";"
//	| 	"USER_TOKEN_MANAGER" "=" java_boolean_literal ";"
//	| 	"USER_CHAR_STREAM" "=" java_boolean_literal ";"
//	| 	"BUILD_PARSER" "=" java_boolean_literal ";"
//	| 	"BUILD_TOKEN_MANAGER" "=" java_boolean_literal ";"
//	| 	"TOKEN_EXTENDS" "=" STRING_LITERAL ";"
//	| 	"TOKEN_FACTORY" "=" STRING_LITERAL ";"
//	| 	"TOKEN_MANAGER_USES_PARSER" "=" java_boolean_literal ";"
//	| 	"SANITY_CHECK" "=" java_boolean_literal ";"
//	| 	"FORCE_LA_CHECK" "=" java_boolean_literal ";"
//	| 	"COMMON_TOKEN_ACTION" "=" java_boolean_literal ";"
//	| 	"CACHE_TOKENS" "=" java_boolean_literal ";"
//	| 	"NODE_DEFAULT_VOID" "=" java_boolean_literal ";"
//	| 	"OUTPUT_DIRECTORY" "=" STRING_LITERAL ";"


parser_declaration ::=
    "PARSER_BEGIN" "(" identifier ")"
    java_compilation_unit // TODO inject Java here
    "PARSER_END" "(" identifier ")"
    {pin=1}

private production ::=
        javacode_production
    | 	bnf_production
	| 	regular_expr_production
	| 	token_manager_decls

javacode_production ::=
        "JAVACODE"
		java_non_terminal_production_header [ jjtree_node_descriptor ]
		java_block
		{pin=1}

bnf_production 	    ::=
        java_non_terminal_production_header [ jjtree_node_descriptor ] ":"
		java_block
		"{" expansion_choices "}"
		{pin=1}


java_non_terminal_production_header  ::=  // TODO inject java here
        java_access_modifier
        java_return_type
        identifier
        "(" java_parameter_list ")"
        [ java_throws_list ]
        {pin=3}


java_throws_list ::=
        "throws" java_name ("," java_name)*


jjtree_node_descriptor      ::=
    "#" ( identifier | "void" )
    [ "(" jjtree_node_descriptor_expr ")" ]
//    {pin=1}

jjtree_node_descriptor_expr ::=
    [ ">" ] // GT-expression
    java_expression  // Is integer valued for definite nodes, is boolean valued for conditional nodes


regular_expr_production 	::=
        [ lexical_state_list ]
		regexpr_kind [ "[" "IGNORE_CASE" "]" ] ":"
		"{" regexpr_spec ( "|" regexpr_spec )* "}"

token_manager_decls ::=
        "TOKEN_MGR_DECLS" ":" java_block  {pin=1} // TODO inject java here


lexical_state_list 	::=
        "<" "*" ">"
	| 	"<" identifier ( "," identifier )* ">"

regexpr_kind 	    ::=
        "TOKEN"
	| 	"SPECIAL_TOKEN"
	| 	"SKIP"
	| 	"MORE"

regexpr_spec 	    ::=
    regular_expression [ java_block ] [ ":" identifier ] {recoverWhile=regexp_spec_recover}

private regexp_spec_recover ::=    !("|" | "}")


expansion_choices 	        ::=
    expansion_sequence ( "|" expansion_sequence )*

expansion_sequence 	        ::=
    ( expansion_unit jjtree_node_descriptor? )+

private expansion_unit 	    ::=
    (   local_lookahead
	| 	java_block
	| 	parenthesized_expansion_unit
	| 	optional_expansion_unit
	|   try_catch_expansion_unit
	| 	[ java_assignment_lhs "=" ] (regular_expression | non_terminal_expansion_unit)
    )

local_lookahead 	::=
    "LOOKAHEAD" "(" local_lookahead_tail ")" {pin=1}


private local_lookahead_tail    ::=
    // java_expression takes precedence over expansion_choices
    INTEGER_LITERAL [ "," "{" java_expression "}" ]
    | "{" java_expression "}"
    | [ INTEGER_LITERAL "," ] expansion_choices [ "," "{" java_expression "}" ]

non_terminal_expansion_unit     ::=
    identifier "(" java_expression_list ")"

parenthesized_expansion_unit    ::=
    "(" expansion_choices ")" [ one_or_more | zero_or_more | zero_or_one ]  {pin=1}

optional_expansion_unit         ::=
    "[" expansion_choices "]"
    {pin=1}

try_catch_expansion_unit        ::=
    "try" "{" [ expansion_choices ] "}"
    ("catch" "(" java_name identifier ")" java_block)*
    ["finally" java_block]
    {pin=1}

/* Regular expressions */

regular_expression 	            ::=
        STRING_LITERAL
	|   "<" "EOF" ">"
	|   regular_expression_reference
	|   named_regular_expression

named_regular_expression        ::=
	"<" [ [ "#" ] identifier ":" ] complex_regexp_choices ">" {pin=1}


complex_regexp_choices 	::=
    complex_regexp_sequence ( "|" complex_regexp_sequence )*

complex_regexp_sequence ::=
    ( complex_regexp_unit )* {pin('.*')=1}

complex_regexp_unit 	::=
        STRING_LITERAL
	| 	regular_expression_reference
	| 	character_list
	| 	"(" complex_regexp_choices ")" [ one_or_more | zero_or_more | zero_or_one | repetition_range ]


regular_expression_reference        ::=
	"<" identifier ">"


character_list          ::=
    [ "~" ] "[" [ character_descriptor ( "," character_descriptor )* ] "]" {pin=2}

character_descriptor 	::=
    STRING_LITERAL [ "-" STRING_LITERAL ] {pin=1 recoverWhile=character_descriptor_recover}

private character_descriptor_recover    ::= !("]" | ",")

// Occurrence indicators

one_or_more         ::= "+"
zero_or_more        ::= "*"
zero_or_one         ::= "?"
repetition_range    ::= "{" INTEGER_LITERAL [ "," INTEGER_LITERAL ] "}" {pin=1}


// Meta rules

meta comma_separated_list ::= <<param>> ( ',' <<param>> )*

// Some java grammar

identifier                      ::=    IDENT


private java_boolean_literal    ::=    "true" | "false"

java_name                       ::=    identifier ("." identifier)* {pin=1}

java_return_type                ::=    "void" | java_type
private java_type               ::=    (PRIMITIVE_TYPE | java_coi_type) ("[" "]")*
private java_coi_type           ::=    java_name  // FIXME generics

private java_access_modifier    ::=    [ "public" | "protected" | "private" ]

java_expression_list             ::=    <<comma_separated_list java_expression>>
java_parameter_list              ::=    [ java_formal_parameter [ ("," java_formal_parameter)* ] ]
java_formal_parameter            ::=    java_type ["..."] identifier ("[" "]")*

// externals

java_compilation_unit               ::=     ext_java_compilation_unit
external ext_java_compilation_unit  ::=     parseJCompilationUnit

java_block                          ::=     ext_java_block
external ext_java_block             ::=     parseJBlock

java_assignment_lhs                 ::=     ext_java_assignment_lhs
private ext_java_assignment_lhs     ::=     java_name   // FIXME only handles field accesses

java_expression                     ::=     ext_java_expression
external ext_java_expression        ::=     parseJExpression
