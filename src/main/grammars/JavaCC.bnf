{
  parserClass="com.github.oowekyala.ijcc.lang.parser.JavaccParser"
  parserUtilClass="com.github.oowekyala.ijcc.lang.parser.JavaccParserUtil"

  implements="com.github.oowekyala.ijcc.lang.psi.JavaccPsiElement"
  extends="com.github.oowekyala.ijcc.lang.psi.impl.JavaccPsiElementImpl"

  elementTypeHolderClass="com.github.oowekyala.ijcc.lang.JavaccTypes"
  elementTypePrefix="JCC_"
  elementTypeClass="com.github.oowekyala.ijcc.lang.psi.IJavaccElementType"
  tokenTypeClass="com.github.oowekyala.ijcc.lang.psi.IJavaccTokenType"

  psiClassPrefix="Jcc"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.oowekyala.ijcc.lang.psi"
  psiImplPackage="com.github.oowekyala.ijcc.lang.psi.impl"

  psiImplUtilClass="com.github.oowekyala.ijcc.lang.psi.impl.JavaccPsiImplUtil"

  parserImports = [
  'static com.intellij.psi.JavaTokenType.*'
  ]

  tokens = [
        LOOKAHEAD_KEYWORD         = 'LOOKAHEAD'
        IGNORE_CASE_OPTION        = 'IGNORE_CASE'
        PARSER_BEGIN_KEYWORD      = 'PARSER_BEGIN'
        PARSER_END_KEYWORD        = 'PARSER_END'
        JAVACODE_KEYWORD          = 'JAVACODE'
        TOKEN_KEYWORD             = 'TOKEN'
        SPECIAL_TOKEN_KEYWORD     = 'SPECIAL_TOKEN'
        MORE_KEYWORD              = 'MORE'
        SKIP_KEYWORD              = 'SKIP'
        TOKEN_MGR_DECLS_KEYWORD   = 'TOKEN_MGR_DECLS'
        EOF_KEYWORD               = 'EOF'


  		PRIVATE_KEYWORD		= "private"
  		PUBLIC_KEYWORD		= "public"
  		PROTECTED_KEYWORD	= "protected"

  		VOID_KEYWORD	= "void"

  		FALSE_KEYWORD	= "false"
  		TRUE_KEYWORD	= "true"
  		NULL_KEYWORD	= "null"

        IDENT       = 'regexp:\p{Alpha}\w*'

        POUND       = "#"
        COLON       = ":"

        LT          = "<"
        GT          = ">"

  		LPARENTH	= "("
  		RPARENTH	= ")"
  		LBRACE		= "{"
  		RBRACE		= "}"
        LBRACKET    = "["
        RBRACKET    = "]"

  		SEMICOLON	= ";"
  		COMMA	    = ","
  		ELLIPSIS    = "..."
  		DOT         = "."

        EQ          = "="

  		UNION       = "|"
  		TILDE       = "~"
        ASTERISK    = "*"
        PLUS        = "+"
        MINUS       = "-"
        QUESTION    = "?"

        DOUBLE_LITERAL      = 'regexp:(0[xb])?[\da-fA-F]*(\.[\da-fA-F]+)?[dD]?'
        INTEGER_LITERAL     = 'regexp:(0[xb])?[\da-fA-F]+'
        STRING_LITERAL      = 'regexp:"([^"\\]|\\.)*"'
        FLOAT_LITERAL       = 'regexp:(0[xb])?[\da-fA-F]*(\.[\da-fA-F]+)?[fF]?'
        LONG_LITERAL        = 'regexp:(0[xb])?[\da-fA-F]+[lL]'
        CHARACTER_LITERAL   = "regexp:'([^\\\'\r\n]|\\[^\n\r])'"

        C_STYLE_COMMENT     = "C_STYLE_COMMENT"
        END_OF_LINE_COMMENT = "END_OF_LINE_COMMENT"
        DOC_COMMENT         = "DOC_COMMENT"

        BAD_CHARACTER   = "BAD_CHARACTER"
  ]

  implements(".*_production") = 'com.github.oowekyala.ijcc.lang.psi.JccNonTerminalProduction'
  mixin(".*_production") = "com.github.oowekyala.ijcc.lang.psi.impl.ChildIdentifierHolderImpl"

}

javacc_input 	::=
        javacc_options
		parser_declaration
		( production )*

javacc_options 	    ::=
    [ "options" "{" ( option_binding )* "}" ]

option_binding 	    ::=
        "LOOKAHEAD" "=" INTEGER_LITERAL ";"
	| 	"CHOICE_AMBIGUITY_CHECK" "=" INTEGER_LITERAL ";"
	| 	"OTHER_AMBIGUITY_CHECK" "=" INTEGER_LITERAL ";"
	| 	"AUTOMATIC_ERROR_RECOVERY" "=" java_boolean_literal ";"
	| 	"STATIC" "=" java_boolean_literal ";"
	| 	"SUPPORT_CLASS_VISIBILITY_PUBLIC" "=" java_boolean_literal ";"
	| 	"DEBUG_PARSER" "=" java_boolean_literal ";"
	| 	"DEBUG_LOOKAHEAD" "=" java_boolean_literal ";"
	| 	"DEBUG_TOKEN_MANAGER" "=" java_boolean_literal ";"
	| 	"ERROR_REPORTING" "=" java_boolean_literal ";"
	| 	"JAVA_UNICODE_ESCAPE" "=" java_boolean_literal ";"
	| 	"UNICODE_INPUT" "=" java_boolean_literal ";"
	| 	"IGNORE_CASE" "=" java_boolean_literal ";"
	| 	"USER_TOKEN_MANAGER" "=" java_boolean_literal ";"
	| 	"USER_CHAR_STREAM" "=" java_boolean_literal ";"
	| 	"BUILD_PARSER" "=" java_boolean_literal ";"
	| 	"BUILD_TOKEN_MANAGER" "=" java_boolean_literal ";"
	| 	"TOKEN_EXTENDS" "=" STRING_LITERAL ";"
	| 	"TOKEN_FACTORY" "=" STRING_LITERAL ";"
	| 	"TOKEN_MANAGER_USES_PARSER" "=" java_boolean_literal ";"
	| 	"SANITY_CHECK" "=" java_boolean_literal ";"
	| 	"FORCE_LA_CHECK" "=" java_boolean_literal ";"
	| 	"COMMON_TOKEN_ACTION" "=" java_boolean_literal ";"
	| 	"CACHE_TOKENS" "=" java_boolean_literal ";"
	| 	"OUTPUT_DIRECTORY" "=" STRING_LITERAL ";"

parser_declaration ::=
    "PARSER_BEGIN" "(" identifier ")"
    java_compilation_unit // TODO inject Java here
    "PARSER_END" "(" identifier ")"

private production ::=
        javacode_production
	| 	regular_expr_production
	| 	bnf_production
	| 	token_manager_decls

javacode_production ::=
        "JAVACODE"
        // TODO inject java here
		java_access_modifier java_return_type identifier "(" java_parameter_list ")"
		java_block

bnf_production 	    ::=
        // TODO inject java here
        java_access_modifier java_return_type identifier "(" java_parameter_list ")" ":"
		java_block
		"{" expansion_choices "}"

regular_expr_production 	::=
        [ lexical_state_list ]
		regexpr_kind [ "[" "IGNORE_CASE" "]" ] ":"
		"{" regexpr_spec ( "|" regexpr_spec )* "}"

token_manager_decls ::=
        "TOKEN_MGR_DECLS" ":" java_block  // TODO inject java here


lexical_state_list 	::=
        "<" "*" ">"
	| 	"<" identifier ( "," identifier )* ">"

regexpr_kind 	    ::=
        "TOKEN"
	| 	"SPECIAL_TOKEN"
	| 	"SKIP"
	| 	"MORE"

regexpr_spec 	    ::=
    regular_expression [ java_block ] [ ":" identifier ]


expansion_choices 	::=
    expansion ( "|" expansion )*

expansion 	        ::=
    ( expansion_unit )*

expansion_unit 	    ::=
        local_lookahead
	| 	java_block
	| 	"(" expansion_choices ")" [ "+" | "*" | "?" ]
	| 	"[" expansion_choices "]"
	| 	[ java_assignment_lhs "=" ] regular_expression
	| 	[ java_assignment_lhs "=" ] identifier "(" java_expression_list ")"


local_lookahead 	::=
    "LOOKAHEAD" "(" [ INTEGER_LITERAL ] [ "," ] [ expansion_choices ] [ "," ] [ "{" java_expression "}" ] ")"

/* Regular expressions */

regular_expression 	::=
        STRING_LITERAL
	| 	"<" [ [ "#" ] identifier ":" ] complex_regular_expression_choices ">"
	| 	"<" identifier ">"
	| 	"<" "EOF" ">"

complex_regular_expression_choices 	::=
    complex_regular_expression ( "|" complex_regular_expression )*

complex_regular_expression 	        ::=
    ( complex_regular_expression_unit )*

complex_regular_expression_unit 	::=
        STRING_LITERAL
	| 	"<" identifier ">"
	| 	character_list
	| 	"(" complex_regular_expression_choices ")" [ one_or_more | zero_or_more | zero_or_one | repetition_range ]

one_or_more         ::= "+"
zero_or_more        ::= "*"
zero_or_one         ::= "?"
repetition_range    ::= "{" INTEGER_LITERAL [ "," INTEGER_LITERAL ] "}"


character_list  ::=
    [ "~" ] "[" [ character_descriptor ( "," character_descriptor )* ] "]"

character_descriptor 	::=
    STRING_LITERAL [ "-" STRING_LITERAL ]


// Some java grammar

identifier                       ::=    IDENT {
    implements="com.github.oowekyala.ijcc.lang.psi.impl.JccIdentifierTrait"
}


private java_boolean_literal     ::=    "true" | "false"

private java_return_type         ::=    "void" | java_type
private java_type                ::=    (PRIMITIVE_TYPE | java_coi_type) ("[" "]")* // FIXME generics?
private java_coi_type            ::=    identifier ("." identifier)*

private java_access_modifier     ::=    [ "public" | "protected" | "private" ]

java_expression_list             ::=    java_expression [ ("," java_expression)* ]
java_parameter_list              ::=    [ java_formal_parameter [ ("," java_formal_parameter)* ] ]
java_formal_parameter            ::=    java_type ["..."] identifier ("[" "]")*

java_compilation_unit               ::= ext_java_compilation_unit
external ext_java_compilation_unit  ::= parseJCompilationUnit

java_block                       ::=    ext_java_block
external ext_java_block          ::=    parseJBlock

external java_assignment_lhs     ::=    parseJAssignmentLhs    // TODO
external java_expression         ::=    parseJExpression       // TODO
