JCC_FILE
  JccGrammarFileRootImpl(JCC_GRAMMAR_FILE_ROOT)
    JccOptionSectionImpl(JCC_OPTION_SECTION)
      PsiElement(IDENT)('options')
      PsiElement({)('{')
      JccOptionBindingImpl(JCC_OPTION_BINDING)
        PsiElement(LOOKAHEAD)('LOOKAHEAD')
        PsiElement(=)('=')
        JccOptionValueImpl(JCC_OPTION_VALUE)
          PsiElement(INTEGER_LITERAL)('4')
        PsiElement(;)(';')
      JccOptionBindingImpl(JCC_OPTION_BINDING)
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MULTI')
        PsiElement(=)('=')
        JccOptionValueImpl(JCC_OPTION_VALUE)
          JccBooleanLiteralImpl(JCC_BOOLEAN_LITERAL)
            PsiElement(true)('true')
        PsiElement(;)(';')
      PsiElement(})('}')
    JccParserDeclarationImpl(JCC_PARSER_DECLARATION)
      JccParserBeginImpl(JCC_PARSER_BEGIN)
        PsiElement(PARSER_BEGIN)('PARSER_BEGIN')
        PsiElement(()('(')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('JJTreeParser')
        PsiElement())(')')
      JccJavaCompilationUnitImpl(JCC_JAVA_COMPILATION_UNIT)
        PsiElement(package)('package')
        PsiElement(IDENT)('org')
        PsiElement(.)('.')
        PsiElement(IDENT)('javacc')
        PsiElement(.)('.')
        PsiElement(IDENT)('jjtree')
        PsiElement(;)(';')
        PsiComment(C_STYLE_COMMENT)('/**\n     *  This is my parser declaration\n     */')
        PsiElement(public)('public')
        PsiElement(class)('class')
        PsiElement(IDENT)('JJTreeParser')
        PsiElement({)('{')
        PsiElement(void)('void')
        PsiElement(IDENT)('jjtreeOpenNodeScope')
        PsiElement(()('(')
        PsiElement(IDENT)('Node')
        PsiElement(IDENT)('n')
        PsiElement())(')')
        PsiElement({)('{')
        PsiElement(()('(')
        PsiElement(()('(')
        PsiElement(IDENT)('JJTreeNode')
        PsiElement())(')')
        PsiElement(IDENT)('n')
        PsiElement())(')')
        PsiElement(.)('.')
        PsiElement(IDENT)('setFirstToken')
        PsiElement(()('(')
        PsiElement(IDENT)('getToken')
        PsiElement(()('(')
        PsiElement(INTEGER_LITERAL)('1')
        PsiElement())(')')
        PsiElement())(')')
        PsiElement(;)(';')
        PsiElement(})('}')
        PsiElement(})('}')
      JccParserEndImpl(JCC_PARSER_END)
        PsiElement(PARSER_END)('PARSER_END')
        PsiElement(()('(')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('JJTreeParser')
        PsiElement())(')')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      PsiElement(JAVACODE)('JAVACODE')
      PsiErrorElement:<method header> expected, got 'void'
        <empty list>
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaReturnTypeImpl(JCC_JAVA_RETURN_TYPE)
        PsiElement(void)('void')
      PsiErrorElement:<identifier> expected, got '('
        <empty list>
    PsiElement(()('(')
    PsiElement())(')')
    PsiElement({)('{')
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    PsiElement(})('}')
    JccBnfProductionImpl(StringConcatExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('fooo')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('StringConcatExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('StringConcatExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('RangeExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccLiteralRegularExpressionImpl(JCC_LITERAL_REGULAR_EXPRESSION)
                JccLiteralRegexUnitImpl(JCC_LITERAL_REGEX_UNIT)
                  PsiElement(STRING_LITERAL)('"||"')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('RangeExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrMoreImpl(JCC_ZERO_OR_MORE)
            PsiElement(*)('*')
      PsiElement(})('}')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      PsiElement(JAVACODE)('JAVACODE')
      PsiErrorElement:<method header> expected, got 's'
        <empty list>
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaTypeImpl(JCC_JAVA_TYPE)
        JccJavaNameImpl(JCC_JAVA_NAME)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('s')
    PsiErrorElement:'.', <, <identifier>, <parameter list>, IDENT or '[' expected, got 'String'
      <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(RangeExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('String')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('RangeExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('RangeExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('AdditiveExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccRefRegularExpressionImpl(JCC_REF_REGULAR_EXPRESSION)
                JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
                  PsiElement(<)('<')
                  JccIdentifierImpl(JCC_IDENTIFIER)
                    PsiElement(IDENT)('TO')
                  PsiElement(>)('>')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('AdditiveExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrOneImpl(JCC_ZERO_OR_ONE)
            PsiElement(?)('?')
      PsiElement(})('}')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      PsiElement(JAVACODE)('JAVACODE')
      PsiErrorElement:<method header> expected, got 'void'
        <empty list>
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaReturnTypeImpl(JCC_JAVA_RETURN_TYPE)
        PsiElement(void)('void')
    PsiErrorElement:<identifier>, <parameter list> or IDENT expected, got 'f'
      <empty list>
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaTypeImpl(JCC_JAVA_TYPE)
        JccJavaNameImpl(JCC_JAVA_NAME)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('f')
    PsiErrorElement:'.', <, <identifier>, <parameter list>, IDENT or '[' expected, got 'string'
      <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(RangeExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('string')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('RangeExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('RangeExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('AdditiveExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccRefRegularExpressionImpl(JCC_REF_REGULAR_EXPRESSION)
                JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
                  PsiElement(<)('<')
                  JccIdentifierImpl(JCC_IDENTIFIER)
                    PsiElement(IDENT)('TO')
                  PsiElement(>)('>')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('AdditiveExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrOneImpl(JCC_ZERO_OR_ONE)
            PsiElement(?)('?')
      PsiElement(})('}')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      PsiElement(JAVACODE)('JAVACODE')
      PsiErrorElement:<method header> expected, got 'a'
        <empty list>
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaTypeImpl(JCC_JAVA_TYPE)
        JccJavaNameImpl(JCC_JAVA_NAME)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('a')
      JccIdentifierImpl(JCC_IDENTIFIER)
        PsiElement(IDENT)('f')
      PsiErrorElement:<parameter list> expected, got 'void'
        <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(RangeExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaReturnTypeImpl(JCC_JAVA_RETURN_TYPE)
          PsiElement(void)('void')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('RangeExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('RangeExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('AdditiveExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccRefRegularExpressionImpl(JCC_REF_REGULAR_EXPRESSION)
                JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
                  PsiElement(<)('<')
                  JccIdentifierImpl(JCC_IDENTIFIER)
                    PsiElement(IDENT)('TO')
                  PsiElement(>)('>')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('AdditiveExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrOneImpl(JCC_ZERO_OR_ONE)
            PsiElement(?)('?')
      PsiElement(})('}')
    JccJavacodeProductionImpl(f)
      PsiElement(JAVACODE)('JAVACODE')
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('a')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('f')
        PsiElement(()('(')
        PsiElement())(')')
      PsiErrorElement:'#' or '{' expected, got 'void'
        <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(RangeExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaReturnTypeImpl(JCC_JAVA_RETURN_TYPE)
          PsiElement(void)('void')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('RangeExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('RangeExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('AdditiveExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccRefRegularExpressionImpl(JCC_REF_REGULAR_EXPRESSION)
                JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
                  PsiElement(<)('<')
                  JccIdentifierImpl(JCC_IDENTIFIER)
                    PsiElement(IDENT)('TO')
                  PsiElement(>)('>')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('AdditiveExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrOneImpl(JCC_ZERO_OR_ONE)
            PsiElement(?)('?')
      PsiElement(})('}')
    PsiComment(END_OF_LINE_COMMENT)('// In the following, we use nodes to represent the operators because there may be several expressions chained.')
    PsiComment(END_OF_LINE_COMMENT)('// e.g. E1 + E2 - E3 ~> E1 PlusOperator E2 MinusOperator E3')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaTypeImpl(JCC_JAVA_TYPE)
        JccJavaNameImpl(JCC_JAVA_NAME)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('a')
      PsiErrorElement:'.', <, <identifier> or '[' expected, got 'void'
        <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(AdditiveExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaReturnTypeImpl(JCC_JAVA_RETURN_TYPE)
          PsiElement(void)('void')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('AdditiveExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('AdditiveExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('MultiplicativeExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('AdditiveOperator')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('MultiplicativeExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrMoreImpl(JCC_ZERO_OR_MORE)
            PsiElement(*)('*')
      PsiElement(})('}')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaTypeImpl(JCC_JAVA_TYPE)
        JccJavaNameImpl(JCC_JAVA_NAME)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('a')
    PsiErrorElement:'.', <, <identifier>, <parameter list>, IDENT or '[' expected, got 'String'
      <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(AdditiveOperator)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('String')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('AdditiveOperator')
        PsiElement(()('(')
        PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionAlternativeImpl(JCC_EXPANSION_ALTERNATIVE)
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccLiteralRegularExpressionImpl(JCC_LITERAL_REGULAR_EXPRESSION)
                JccLiteralRegexUnitImpl(JCC_LITERAL_REGEX_UNIT)
                  PsiElement(STRING_LITERAL)('"+"')
            PsiElement(|)('|')
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccLiteralRegularExpressionImpl(JCC_LITERAL_REGULAR_EXPRESSION)
                JccLiteralRegexUnitImpl(JCC_LITERAL_REGEX_UNIT)
                  PsiElement(STRING_LITERAL)('"-"')
          PsiElement())(')')
        JccParserActionsUnitImpl(JCC_PARSER_ACTIONS_UNIT)
          JccJavaBlockImpl(JCC_JAVA_BLOCK)
            PsiElement({)('{')
            PsiElement(IDENT)('jjtThis')
            PsiElement(.)('.')
            PsiElement(IDENT)('setImage')
            PsiElement(()('(')
            PsiElement(IDENT)('getToken')
            PsiElement(()('(')
            PsiElement(INTEGER_LITERAL)('0')
            PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(IDENT)('getImage')
            PsiElement(()('(')
            PsiElement())(')')
            PsiElement())(')')
            PsiElement(;)(';')
            PsiElement(})('}')
      PsiElement(})('}')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccLexicalStateListImpl(JCC_LEXICAL_STATE_LIST)
        PsiElement(<)('<')
        PsiErrorElement:'*', <identifier>, <regex kind> or '>' expected, got 'void'
          <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(MultiplicativeExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaReturnTypeImpl(JCC_JAVA_RETURN_TYPE)
          PsiElement(void)('void')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('UnionExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('MultiplicativeOperator')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('UnionExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrMoreImpl(JCC_ZERO_OR_MORE)
            PsiElement(*)('*')
      PsiElement(})('}')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaTypeImpl(JCC_JAVA_TYPE)
        JccJavaNameImpl(JCC_JAVA_NAME)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('f')
      JccIdentifierImpl(JCC_IDENTIFIER)
        PsiElement(IDENT)('g')
      PsiErrorElement:<parameter list> expected, got 'void'
        <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(MultiplicativeOperator)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaReturnTypeImpl(JCC_JAVA_RETURN_TYPE)
          PsiElement(void)('void')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeOperator')
        PsiElement(()('(')
        PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionAlternativeImpl(JCC_EXPANSION_ALTERNATIVE)
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccRefRegularExpressionImpl(JCC_REF_REGULAR_EXPRESSION)
                JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
                  PsiElement(<)('<')
                  JccIdentifierImpl(JCC_IDENTIFIER)
                    PsiElement(IDENT)('STAR')
                  PsiElement(>)('>')
            PsiElement(|)('|')
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccRefRegularExpressionImpl(JCC_REF_REGULAR_EXPRESSION)
                JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
                  PsiElement(<)('<')
                  JccIdentifierImpl(JCC_IDENTIFIER)
                    PsiElement(IDENT)('DIV')
                  PsiElement(>)('>')
            PsiElement(|)('|')
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccRefRegularExpressionImpl(JCC_REF_REGULAR_EXPRESSION)
                JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
                  PsiElement(<)('<')
                  JccIdentifierImpl(JCC_IDENTIFIER)
                    PsiElement(IDENT)('IDIV')
                  PsiElement(>)('>')
            PsiElement(|)('|')
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccRefRegularExpressionImpl(JCC_REF_REGULAR_EXPRESSION)
                JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
                  PsiElement(<)('<')
                  JccIdentifierImpl(JCC_IDENTIFIER)
                    PsiElement(IDENT)('MOD')
                  PsiElement(>)('>')
          PsiElement())(')')
        JccParserActionsUnitImpl(JCC_PARSER_ACTIONS_UNIT)
          JccJavaBlockImpl(JCC_JAVA_BLOCK)
            PsiElement({)('{')
            PsiElement(IDENT)('jjtThis')
            PsiElement(.)('.')
            PsiElement(IDENT)('setImage')
            PsiElement(()('(')
            PsiElement(IDENT)('getToken')
            PsiElement(()('(')
            PsiElement(INTEGER_LITERAL)('0')
            PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(IDENT)('getImage')
            PsiElement(()('(')
            PsiElement())(')')
            PsiElement())(')')
            PsiElement(;)(';')
            PsiElement(})('}')
      PsiElement(})('}')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaTypeImpl(JCC_JAVA_TYPE)
        JccJavaNameImpl(JCC_JAVA_NAME)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('f')
    PsiErrorElement:'.', <, <identifier>, <parameter list>, IDENT or '[' expected, got 'g'
      <empty list>
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaTypeImpl(JCC_JAVA_TYPE)
        JccJavaNameImpl(JCC_JAVA_NAME)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('g')
    PsiErrorElement:'.', <, <identifier>, <parameter list>, IDENT or '[' expected, got 'String'
      <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(UnionExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('String')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('UnionExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('UnionExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('IntersectExceptExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('UnionOperator')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('IntersectExceptExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrMoreImpl(JCC_ZERO_OR_MORE)
            PsiElement(*)('*')
      PsiElement(})('}')
    JccBnfProductionImpl(g)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('f')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('g')
        PsiElement(()('(')
        PsiElement())(')')
      PsiErrorElement:'#' or ':' expected, got 'void'
        <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(UnionOperator)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaReturnTypeImpl(JCC_JAVA_RETURN_TYPE)
          PsiElement(void)('void')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('UnionOperator')
        PsiElement(()('(')
        PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionAlternativeImpl(JCC_EXPANSION_ALTERNATIVE)
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccRefRegularExpressionImpl(JCC_REF_REGULAR_EXPRESSION)
                JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
                  PsiElement(<)('<')
                  JccIdentifierImpl(JCC_IDENTIFIER)
                    PsiElement(IDENT)('UNION')
                  PsiElement(>)('>')
            PsiElement(|)('|')
            JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
              JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
                JccLiteralRegularExpressionImpl(JCC_LITERAL_REGULAR_EXPRESSION)
                  JccLiteralRegexUnitImpl(JCC_LITERAL_REGEX_UNIT)
                    PsiElement(STRING_LITERAL)('"|"')
              JccParserActionsUnitImpl(JCC_PARSER_ACTIONS_UNIT)
                JccJavaBlockImpl(JCC_JAVA_BLOCK)
                  PsiElement({)('{')
                  PsiElement(IDENT)('jjtThis')
                  PsiElement(.)('.')
                  PsiElement(IDENT)('setShorthand')
                  PsiElement(()('(')
                  PsiElement(true)('true')
                  PsiElement())(')')
                  PsiElement(;)(';')
                  PsiElement(})('}')
          PsiElement())(')')
        JccParserActionsUnitImpl(JCC_PARSER_ACTIONS_UNIT)
          JccJavaBlockImpl(JCC_JAVA_BLOCK)
            PsiElement({)('{')
            PsiElement(IDENT)('jjtThis')
            PsiElement(.)('.')
            PsiElement(IDENT)('setImage')
            PsiElement(()('(')
            PsiElement(IDENT)('getToken')
            PsiElement(()('(')
            PsiElement(INTEGER_LITERAL)('0')
            PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(IDENT)('getImage')
            PsiElement(()('(')
            PsiElement())(')')
            PsiElement())(')')
            PsiElement(;)(';')
            PsiElement(})('}')
      PsiElement(})('}')
    JccBnfProductionImpl(g)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('f')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('g')
        PsiElement(()('(')
        PsiElement())(')')
      PsiErrorElement:'#' or ':' expected, got 'foo'
        <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(UnionOperator)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('foo')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('UnionOperator')
        PsiElement(()('(')
        PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionAlternativeImpl(JCC_EXPANSION_ALTERNATIVE)
            JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
              JccRefRegularExpressionImpl(JCC_REF_REGULAR_EXPRESSION)
                JccTokenReferenceRegexUnitImpl(JCC_TOKEN_REFERENCE_REGEX_UNIT)
                  PsiElement(<)('<')
                  JccIdentifierImpl(JCC_IDENTIFIER)
                    PsiElement(IDENT)('UNION')
                  PsiElement(>)('>')
            PsiElement(|)('|')
            JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
              JccRegexExpansionUnitImpl(JCC_REGEX_EXPANSION_UNIT)
                JccLiteralRegularExpressionImpl(JCC_LITERAL_REGULAR_EXPRESSION)
                  JccLiteralRegexUnitImpl(JCC_LITERAL_REGEX_UNIT)
                    PsiElement(STRING_LITERAL)('"|"')
              JccParserActionsUnitImpl(JCC_PARSER_ACTIONS_UNIT)
                JccJavaBlockImpl(JCC_JAVA_BLOCK)
                  PsiElement({)('{')
                  PsiElement(IDENT)('jjtThis')
                  PsiElement(.)('.')
                  PsiElement(IDENT)('setShorthand')
                  PsiElement(()('(')
                  PsiElement(true)('true')
                  PsiElement())(')')
                  PsiElement(;)(';')
                  PsiElement(})('}')
          PsiElement())(')')
        JccParserActionsUnitImpl(JCC_PARSER_ACTIONS_UNIT)
          JccJavaBlockImpl(JCC_JAVA_BLOCK)
            PsiElement({)('{')
            PsiElement(IDENT)('jjtThis')
            PsiElement(.)('.')
            PsiElement(IDENT)('setImage')
            PsiElement(()('(')
            PsiElement(IDENT)('getToken')
            PsiElement(()('(')
            PsiElement(INTEGER_LITERAL)('0')
            PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(IDENT)('getImage')
            PsiElement(()('(')
            PsiElement())(')')
            PsiElement())(')')
            PsiElement(;)(';')
            PsiElement(})('}')
      PsiElement(})('}')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccLexicalStateListImpl(JCC_LEXICAL_STATE_LIST)
        PsiElement(<)('<')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('a')
        PsiErrorElement:',', <regex kind> or '>' expected, got 'void'
          <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(MultiplicativeExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaReturnTypeImpl(JCC_JAVA_RETURN_TYPE)
          PsiElement(void)('void')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('UnionExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('MultiplicativeOperator')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('UnionExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrMoreImpl(JCC_ZERO_OR_MORE)
            PsiElement(*)('*')
      PsiElement(})('}')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccLexicalStateListImpl(JCC_LEXICAL_STATE_LIST)
        PsiElement(<)('<')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('a')
        PsiErrorElement:',', <regex kind> or '>' expected, got 'foo'
          <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(MultiplicativeExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('foo')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('UnionExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('MultiplicativeOperator')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('UnionExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrMoreImpl(JCC_ZERO_OR_MORE)
            PsiElement(*)('*')
      PsiElement(})('}')
    JccRegexProductionImpl(JCC_REGEX_PRODUCTION)
      JccRegexKindImpl(JCC_REGEX_KIND)
        PsiElement(TOKEN)('TOKEN')
      PsiErrorElement:':' or '[' expected, got 'foo'
        <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(MultiplicativeExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('foo')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('UnionExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('MultiplicativeOperator')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('UnionExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrMoreImpl(JCC_ZERO_OR_MORE)
            PsiElement(*)('*')
      PsiElement(})('}')
    JccRegexProductionImpl(JCC_REGEX_PRODUCTION)
      JccLexicalStateListImpl(JCC_LEXICAL_STATE_LIST)
        PsiElement(<)('<')
        PsiErrorElement:'*' or <identifier> expected, got 'MORE'
          <empty list>
      JccRegexKindImpl(JCC_REGEX_KIND)
        PsiElement(MORE)('MORE')
      PsiErrorElement:':' or '[' expected, got 'foo'
        <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(MultiplicativeExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('foo')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('UnionExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('MultiplicativeOperator')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('UnionExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrMoreImpl(JCC_ZERO_OR_MORE)
            PsiElement(*)('*')
      PsiElement(})('}')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaTypeImpl(JCC_JAVA_TYPE)
        JccJavaNameImpl(JCC_JAVA_NAME)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('foo')
      PsiErrorElement:'.', <, <identifier> or '[' expected, got '('
        <empty list>
    PsiElement(()('(')
    PsiElement())(')')
    PsiElement(:)(':')
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the rest of the file to be parsed')
    JccBnfProductionImpl(MultiplicativeExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('foo')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('UnionExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('MultiplicativeOperator')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('UnionExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrMoreImpl(JCC_ZERO_OR_MORE)
            PsiElement(*)('*')
      PsiElement(})('}')
    JccErrorProductionImpl(JCC_ERROR_PRODUCTION)
      JccJavaTypeImpl(JCC_JAVA_TYPE)
        JccJavaNameImpl(JCC_JAVA_NAME)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('bar')
    PsiErrorElement:'.', <, <identifier>, <parameter list>, IDENT or '[' expected, got 'foo'
      <empty list>
    PsiComment(END_OF_LINE_COMMENT)('// should not prevent the next production to be parsed')
    JccBnfProductionImpl(MultiplicativeExpr)
      JccJavaNonTerminalProductionHeaderImpl(JCC_JAVA_NON_TERMINAL_PRODUCTION_HEADER)
        JccJavaAccessModifierImpl(JCC_JAVA_ACCESS_MODIFIER)
          <empty list>
        JccJavaTypeImpl(JCC_JAVA_TYPE)
          JccJavaNameImpl(JCC_JAVA_NAME)
            JccIdentifierImpl(JCC_IDENTIFIER)
              PsiElement(IDENT)('foo')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        PsiElement(()('(')
        PsiElement())(')')
      JccJjtreeNodeDescriptorImpl(JCC_JJTREE_NODE_DESCRIPTOR)
        PsiElement(#)('#')
        JccIdentifierImpl(JCC_IDENTIFIER)
          PsiElement(IDENT)('MultiplicativeExpr')
        JccJjtreeNodeDescriptorExprImpl(JCC_JJTREE_NODE_DESCRIPTOR_EXPR)
          PsiElement(()('(')
          PsiElement(>)('>')
          JccJavaExpressionImpl(JCC_JAVA_EXPRESSION)
            PsiElement(INTEGER_LITERAL)('1')
          PsiElement())(')')
      PsiElement(:)(':')
      JccJavaBlockImpl(JCC_JAVA_BLOCK)
        PsiElement({)('{')
        PsiElement(})('}')
      PsiElement({)('{')
      JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
        JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
          JccIdentifierImpl(JCC_IDENTIFIER)
            PsiElement(IDENT)('UnionExpr')
          PsiElement(()('(')
          JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
            <empty list>
          PsiElement())(')')
        JccParenthesizedExpansionUnitImpl(JCC_PARENTHESIZED_EXPANSION_UNIT)
          PsiElement(()('(')
          JccExpansionSequenceImpl(JCC_EXPANSION_SEQUENCE)
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('MultiplicativeOperator')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
            JccNonTerminalExpansionUnitImpl(JCC_NON_TERMINAL_EXPANSION_UNIT)
              JccIdentifierImpl(JCC_IDENTIFIER)
                PsiElement(IDENT)('UnionExpr')
              PsiElement(()('(')
              JccJavaExpressionListImpl(JCC_JAVA_EXPRESSION_LIST)
                <empty list>
              PsiElement())(')')
          PsiElement())(')')
          JccZeroOrMoreImpl(JCC_ZERO_OR_MORE)
            PsiElement(*)('*')
      PsiElement(})('}')
