{
  parserClass="com.github.oowekyala.ijcc.lang.parser.JavaccParser"
  parserUtilClass="com.github.oowekyala.ijcc.lang.parser.JavaccParserUtil"
  parserImports=[
    "com.github.oowekyala.ijcc.lang.psi.JccTypesExt.*"
  ]

  implements="com.github.oowekyala.ijcc.lang.psi.JccPsiElement"
  extends="com.github.oowekyala.ijcc.lang.psi.impl.JccPsiElementImpl"

  elementTypeHolderClass="com.github.oowekyala.ijcc.lang.JccTypes"
  elementTypePrefix="JCC_"
  elementTypeClass="com.github.oowekyala.ijcc.lang.psi.IJccElementType"
  tokenTypeClass="com.github.oowekyala.ijcc.lang.psi.IJccTokenType"
  // factory for stub types
  elementTypeFactory="com.github.oowekyala.ijcc.lang.psi.stubs.StubImplementationsKt.factory"

  psiClassPrefix="Jcc"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.oowekyala.ijcc.lang.psi"
  psiImplPackage="com.github.oowekyala.ijcc.lang.psi.impl"

  // not on the classpath...
  psiImplUtilClass="com.github.oowekyala.ijcc.lang.psi.impl.JccPsiImplUtil"

  generate=[java="8"]

  parserImports = [
  'static com.intellij.psi.JavaTokenType.*'
  ]

  generatePsi=true
  tokens = [
        LOOKAHEAD_KEYWORD         = 'LOOKAHEAD'
        IGNORE_CASE_OPTION        = 'IGNORE_CASE'
        PARSER_BEGIN_KEYWORD      = 'PARSER_BEGIN'
        PARSER_END_KEYWORD        = 'PARSER_END'
        JAVACODE_KEYWORD          = 'JAVACODE'
        TOKEN_KEYWORD             = 'TOKEN'
        SPECIAL_TOKEN_KEYWORD     = 'SPECIAL_TOKEN'
        MORE_KEYWORD              = 'MORE'
        SKIP_KEYWORD              = 'SKIP'
        TOKEN_MGR_DECLS_KEYWORD   = 'TOKEN_MGR_DECLS'
        EOF_KEYWORD               = 'EOF'

        INJECT_KEYWORD            = 'INJECT'
        INCLUDE_KEYWORD           = 'INCLUDE'


        PRIVATE_KEYWORD		= "private"
        PUBLIC_KEYWORD		= "public"
        PROTECTED_KEYWORD	= "protected"
        SUPER_KEYWORD	= "super"
        EXTENDS_KEYWORD	= "extends"

        STATIC_KEYWORD	= "static"

        VOID_KEYWORD	= "void"

        FALSE_KEYWORD	= "false"
        TRUE_KEYWORD	= "true"

        THROWS_KEYWORD	= "throws"
        TRY_KEYWORD	    = "try"
        CATCH_KEYWORD	= "catch"
        FINALLY_KEYWORD	= "finally"

        IDENT       = 'regexp:\p{Alpha}\w*'

        POUND       = "#"
        COLON       = ":"

        LT          = "<"
        GT          = ">"

        LPARENTH	= "("
        RPARENTH	= ")"
        LBRACE		= "{"
        RBRACE		= "}"
        LBRACKET    = "["
        RBRACKET    = "]"

        SEMICOLON	= ";"
        COMMA	    = ","
        ELLIPSIS    = "..."
        DOT         = "."

        EQ          = "="

        UNION       = "|"
        TILDE       = "~"
        ASTERISK    = "*"
        PLUS        = "+"
        MINUS       = "-"
        QUESTION    = "?"

        /* Irrelevant Java tokens */

        EQEQ	    = "=="
        NE	        = "!="
        OROR	    = "||"
        PLUSPLUS	= "++"
        MINUSMINUS	= "--"
        ANDAND	    = "&&"
        AND	        = "&"
        LE	        = "<="
        GE	        = ">="
        PLUSEQ	    = "+="
        MINUSEQ	    = "-="
        ASTERISKEQ	= "*="
        DIVEQ	    = "/="
        ANDEQ	    = "&="
        OREQ	    = "|="
        XOREQ	    = "^="
        PERCEQ	    = "%="
        EXCL	    = "!"
        DIV	        = "/"
        PERC	    = "%"
        AT	        = "@"
        DOUBLE_COLON= "::"
        ARROW	    = "->"

        NULL_KEYWORD	= "null"
        ASSERT_KEYWORD	= "assert"
        ENUM_KEYWORD	= "enum"
        ABSTRACT_KEYWORD= "abstract"
        BREAK_KEYWORD	= "break"
        CASE_KEYWORD	= "case"
        CLASS_KEYWORD	= "class"
        CONST_KEYWORD	= "const"
        CONTINUE_KEYWORD= "continue"
        DEFAULT_KEYWORD	= "default"
        DO_KEYWORD	    = "do"
        ELSE_KEYWORD	= "else"
        FINAL_KEYWORD	= "final"
        FOR_KEYWORD	    = "for"
        GOTO_KEYWORD	= "goto"
        IF_KEYWORD	    = "if"
        IMPLEMENTS_KEYWORD	= "implements"
        IMPORT_KEYWORD	= "import"
        INSTANCEOF_KEYWORD	= "instanceof"
        INTERFACE_KEYWORD	= "interface"
        NATIVE_KEYWORD	= "native"
        NEW_KEYWORD	    = "new"
        PACKAGE_KEYWORD	= "package"
        SWITCH_KEYWORD	= "switch"
        SYNCHRONIZED_KEYWORD	= "synchronized"
        THIS_KEYWORD	= "this"
        THROW_KEYWORD	= "throw"
        TRANSIENT_KEYWORD	= "transient"
        RETURN_KEYWORD	= "return"
        STATIC_KEYWORD	= "static"
        STRICTFP_KEYWORD= "strictfp"
        WHILE_KEYWORD	= "while"
        VOLATILE_KEYWORD= "volatile"

        C_STYLE_COMMENT     = 'regexp:(/\*([^*]*+(\*[^/])?)*\*/)'
        END_OF_LINE_COMMENT = 'regexp:(//[^\r\n]*)'

        DOUBLE_LITERAL      = 'regexp:(0[xb])?[\da-fA-F]*(\.[\da-fA-F]+)?[dD]?'
        INTEGER_LITERAL     = 'regexp:(0[xb])?[\da-fA-F]+'
        STRING_LITERAL      = 'regexp:"([^"\\]|\\.)*"'
        FLOAT_LITERAL       = 'regexp:(0[xb])?[\da-fA-F]*(\.[\da-fA-F]+)?[fF]?'
        LONG_LITERAL        = 'regexp:(0[xb])?[\da-fA-F]+[lL]'
        CHARACTER_LITERAL   = "regexp:'([^\\'\r\n]|\\[^\n\r])'"

        BAD_CHARACTER   = "BAD_CHARACTER"
  ]

  extends("bnf_production") = "com.github.oowekyala.ijcc.lang.psi.impl.JccNonTerminalProductionImpl<com.github.oowekyala.ijcc.lang.psi.stubs.BnfProductionStubImpl>"
  extends("javacode_production") = "com.github.oowekyala.ijcc.lang.psi.impl.JccNonTerminalProductionImpl<com.github.oowekyala.ijcc.lang.psi.stubs.JavacodeProductionStubImpl>"
  implements("(bnf|javacode)_production") = non_terminal_production

  methods("(bnf|javacode)_production") = [header="java_non_terminal_production_header"]

  implements("(bnf|javacode)_production|.*production_header|jjtree_node_descriptor|named_regular_expression|token_reference_regex_unit|ref_regular_expression|non_terminal_production|non_terminal_expansion_unit|option_binding|scoped_expansion_unit")=identifier_owner

  methods(".*production_header|jjtree_node_descriptor|named_regular_expression|token_reference_regex_unit|non_terminal_expansion_unit|option_binding") = [
    nameIdentifier="identifier"
  ]

  methods("jjtree_node_descriptor") = [descriptorExpr="jjtree_node_descriptor_expr"]

  consumeTokenMethod(".*_regex_.*")="consumeTokenFast"

  // Use implements for fake rules
  // Use extends for real rules

  methods("expansion_unit")=[
    scoped_expansion_unit=""
    expansion_unit=""
  ]

  extends(".+_regex_unit")=regex_unit
  extends("regex_sequence_elt|regex_unit|regex_alternative_elt")=regex_element
  extends(".+_regular_expression")=regular_expression
  implements("regular_expression|regex_element")=regex_like

  extends("regex_expansion_unit|non_terminal_expansion_unit")=assignable_expansion_unit
  extends(".*_expansion_unit|parser_actions_unit|local_lookahead_unit|error_jjtree_annot")=expansion_unit
  extends("expansion_(sequence|unit)")=expansion_sequence_or_unit
  extends("expansion_(alternative|sequence_or_unit)")=expansion


  extends("one_or_more|zero_or_more|zero_or_one")=occurrence_indicator
  extends("repetition_range|occurrence_indicator")=occurrence_indicator_or_range

  extends("java_type")=java_return_type

  implements("production|token_manager_decls")="production_like"
  implements("non_terminal_production|regex_production")="production"
  implements("scoped_expansion_unit|non_terminal_production")="com.github.oowekyala.ijcc.lang.psi.JjtNodeClassOwner"
  implements("regex_spec|regex_expansion_unit")="regular_expression_owner"


  stubClass("bnf_production")="com.github.oowekyala.ijcc.lang.psi.stubs.BnfProductionStubImpl"
  stubClass("javacode_production")="com.github.oowekyala.ijcc.lang.psi.stubs.JavacodeProductionStubImpl"
  stubClass("scoped_expansion_unit")="com.github.oowekyala.ijcc.lang.psi.stubs.JccScopedExpansionUnitStub"


}

// Grammar for the JavaCC language
// Compared to the JavaCC grammar used by JavaCC itself, this grammar has a few significant differences:
// * It doesn't embed the Java grammar. Java elements are not parsed and are left to injection
// * The JavaCC grammar has fewer different nodes, but some are used in different syntactic contexts.
//   This grammar uses different nodes to keep the type hierarchy clear.
//   * E.g. in JavaCC, a literal string "foo" may occur either as an expansion unit, as a regular
//     expression (eg in token specs), and as a regex element (e.g. in < foo: "foo" >).
//   * In this grammar, those three contexts correspond to different type hierarchies:
//     JccExpansion, JccRegularExpression, and JccRegexElement. This makes ASTs deeper but
//     allows greater abstraction (on a counterpart, we have to take care when modifying PSI).
// * In JavaCC, an expansion is invariably an expansion alternative (RChoice), with possibly
//   just one child. Children are always expansion sequences (RSequence), with possibly just
//   one child. That tree structure is more predictable, but also much deeper than necessary.
//   Here, expansion alternatives and sequences are only pushed on the tree if they have at
//   least two children. That makes ASTs easier to navigate and query, but also harder to modify.

javacc_input 	    ::=
    grammar_file_root

// Root node of the grammar. Used in place of [JccFile]
// because the file element is not injectable. This allows
// file-wide Java injection.
grammar_file_root   ::=
    option_section?
    parser_declaration? // mandated in regular javacc
    ( production_impl )*
    {name="PARSER_BEGIN"}

option_section 	    ::=
    ("options" | "OPTIONS") [":"] "{" ( option_binding )* "}" {pin=1}

option_binding	    ::=
    option_name ["=" option_value] ";" {pin=1 recoverWhile="#auto"} // only optional in 21

option_value        ::=
    (INTEGER_LITERAL | string_literal | boolean_literal | identifier) // ident only possible in 21

private option_name ::=
        "LOOKAHEAD" | "IGNORE_CASE" | identifier // TODO "static" ?

parser_declaration  ::=
    parser_begin
    java_compilation_unit // TODO inject Java here
    parser_end
    {pin=1 name="PARSER_BEGIN"}

parser_begin        ::=
    "PARSER_BEGIN" "(" identifier ")"
    {pin=1 name="PARSER_BEGIN"}

parser_end          ::=
    "PARSER_END" "(" identifier ")"

/* Productions. */
/* These are the top-level blocks of a JavaCC file. */

/* Type hierarchy is

   JccProductionLike
   |- JccTokenManagerDecls
   |- JccProduction
      |- JccRegexProduction
      |- JccNonTerminalProduction
         |- JccBnfProduction
         |- JccJavacodeProduction
 */

private production_impl             ::=
        javacode_production
    |   bnf_production
    |   regex_production
    |   token_manager_decls
    |   inject_directive
    |   full_inject_directive
    |   grammar_inclusion
    //  errors rules are tried last
    |   error_production
    {recoverWhile="#auto"}


javacode_production                 ::=
        "JAVACODE"
        java_non_terminal_production_header [ jjtree_node_descriptor | error_jjtree_annot_in_header ]
        java_block
        {pin=2}

bnf_production                      ::=
        java_non_terminal_production_header [ jjtree_node_descriptor | error_jjtree_annot_in_header ] ":"
        java_block
        curly_then_expansion_choices
        "}"
        {pin=1}

// Yeah this is weird, but important to recover from incomplete code.
// It fixes the pin behaviour. BNF productions are pinned on their header.
// If the ":" is not present, it will try to match the expansion block anyway.
// Then
// * If the expansion is written "{" expansion_choices "}", the pin behaviour
//   will try to match expansion_choices even if there is no "{". Then the
//   recoverWhile of expansion_unit will take effect and swallow the whole file.
// * If the "{" is isolated in another rule (this one), the expansion_choices will
//   not be tried unless there is a "{".
//
// Keeping the "}" up there allows the production to recover from wrong lookahead
// specs that leave a comma dangling, which would make the failed match for "}"
// fail the whole expansion_choices (and hence drop it) if it wasn't accepted by
// the pin.
// TODO normally, however wrong it may be, a failed expansion unit shouldn't make
// the whole alternative fail. The comma problem is real though, since expansion_choices
// may be followed by a comma (just in syntactic lookaheads)
private curly_then_expansion_choices ::=
        "{" expansion_choices


java_non_terminal_production_header ::=  // TODO inject java here
        java_access_modifier
        java_return_type
        identifier
        java_parameter_list
        [ java_throws_list ]
        {pin=4 recoverWhile="#auto"}

inject_directive ::=
        "INJECT" "(" [ "interface" | "class" ] identifier ")" [":"]
        java_block
        java_block
        {pin=2}

full_inject_directive ::=
        "INJECT" ":" java_block

grammar_inclusion     ::=
        "INCLUDE" "(" string_literal | identifier ")" [ ":" "{" "}" ]
        {pin=1 recoverWhile="#auto"}

// incomplete productions fall down one of these productions.
// This is to be able to pin on the name of a production
// so that a valid production always has a name.
// The pin is actually on the parameter list so that there is no
// conflict with following return type (which itself can't be followed by parentheses)
// This allows incomplete code to not break the rest of the grammar file.
// See test file ProductionTolerance.jjt

error_production                    ::=
       error_just_javacode
   |   error_unnamed_or_no_params_production
   |   error_just_lexical_states

// catches single identifiers
private error_unnamed_or_no_params_production ::=
    ["JAVACODE"] java_return_type lone_prod_name no_params_error
    {pin=java_return_type}

private lone_prod_name              ::=
    identifier !(identifier)
    {name="identifier"}

private error_just_javacode         ::=
    "JAVACODE" no_header_error
    {pin=1}

private error_just_lexical_states   ::=
    lexical_state_list no_regex_kind_error
    {pin=1}


// improbable, unsatisfiable production, used to insert an error
// never pin!
private no_params_error         ::= "#" "#" "catch" "#" "throws" "#" "void" "#" "try" {name="parameter list"}
// these just rename it
private no_regex_kind_error     ::= no_params_error {name="regex kind"}
private no_header_error         ::= no_params_error {name="method header"}

java_throws_list ::=
        "throws" java_name ("," java_name)*


jjtree_node_descriptor      ::=
    "#" ( identifier | "void" )
    [ jjtree_node_descriptor_expr ]
    {pin=2}


error_jjtree_annot ::=
    "#" ( identifier | "void" )
    {pin=1}

error_jjtree_annot_in_header ::=
    "#" ( identifier | "void" )
    {pin=1}


// The expr is integer valued for definite nodes, is boolean valued for conditional nodes
jjtree_node_descriptor_expr ::=
    "(" [ ">" ] java_expression ")"

token_manager_decls ::=
        "TOKEN_MGR_DECLS" ":" java_block  {pin=1} // TODO inject java here


lexical_state_list  ::=
        "<" ( "*" | identifier ( "," identifier )* ) ">"
        {pin=1}

regex_kind          ::=
        "TOKEN"
    |   "SPECIAL_TOKEN"
    |   "SKIP"
    |   "MORE"

regex_production    ::=
    [ lexical_state_list ]
    regex_kind [ "[" "IGNORE_CASE" "]" ] ":"
    <<in_block regex_spec_list>>
    {pin="regex_kind"}

private regex_spec_list   ::=
    regex_spec ( "|" regex_spec )*
    {pin=1 recoverWhile="regex_spec_list_recover"}


private regex_spec_list_recover   ::= // exclude ident, most important is the rbrace
    !( 'JAVACODE' | 'MORE' | 'SKIP' | 'SPECIAL_TOKEN' | 'TOKEN' | 'TOKEN_MGR_DECLS' | '}')


regex_spec          ::=
    regular_expression
    [ jjtree_node_descriptor ] // only 21 (no expr is allowed, no #void is allowed)
    [ java_block ]
    [ ":" identifier ]
    {
        methods=[
            lexicalStateTransition="identifier"
            lexicalActions="java_block"
        ]
        recoverWhile="regex_spec_recover"
    }


private regex_spec_recover      ::= // exclude ident, most important is the pipe
    !('<' | 'JAVACODE' | 'MORE' | 'SKIP' | 'SPECIAL_TOKEN' | 'TOKEN' | 'TOKEN_MGR_DECLS' | 'private' | 'protected' | 'public' | 'void' | '|' | '}' | PRIMITIVE_TYPE)

/* Expansions */
/* These only occur within BNF productions. */

/* Type hierarchy is

   JccExpansion
   |- JccExpansionAlternative               seq | seq | ...
   |- JccExpansionSequenceOrUnit
      |- JccExpansionSequence               unit unit ...
      |- JccExpansionUnit
         |- JccLocalLookaheadUnit           LOOKAHEAD(...)
         |- JccParserActionsUnit            { java }
         |- JccParenthesizedExpansionUnit   ( exp )
         |- JccOptionalExpansionUnit        [ exp ]
         |- JccTryCatchExpansionUnit        try { exp } catch (...) { java }
         |- JccAssignedExpansionUnit        lhs = assignable
         |- JccAssignableExpansionUnit
            |- JccRegexExpansionUnit        regular_expression
            |- JccNonterminalExpansionUnit  name(..)
 */


private expansion_choices       ::=
        expansion_alternative
    |   expansion_sequence

expansion_alternative           ::=
    expansion_sequence ( alternative_tail )+
    {methods=[expansionList="expansion_sequence_or_unit"]}

private alternative_tail        ::=
    "|" expansion_sequence
    {pin=1}

expansion_sequence              ::=
    ( expansion_unit )+ {pin=1 recoverWhile="#auto"}



expansion_unit                  ::=
    priv_expansion_unit scoped_expansion_unit? error_jjtree_annot?
    {recoverWhile="#auto"}

left scoped_expansion_unit      ::=
    jjtree_node_descriptor
    { methods=[nameIdentifier="jjtree_node_descriptor/identifier"] }

private priv_expansion_unit     ::=
    (   local_lookahead_unit
    |   parser_actions_unit
    |   parenthesized_expansion_unit
    |   optional_expansion_unit
    |   try_catch_expansion_unit
    |   assigned_expansion_unit
    |   assignable_expansion_unit
    )

assignable_expansion_unit       ::=
      regex_expansion_unit
    | non_terminal_expansion_unit

assigned_expansion_unit         ::=
    java_assignment_lhs "=" assignable_expansion_unit
    {pin=2}

parser_actions_unit             ::=
    java_block

regex_expansion_unit            ::=
    regular_expression


local_lookahead_unit            ::=
    "LOOKAHEAD" "(" local_lookahead_tail ")" {pin=1}

/* TODO error recovery is made considerably harder by this shit
 * Maybe, if the parser accepted some invalid input (like the extra
 * commas and/or arguments), and we reported it in the highlight
 * visitor, we'd fare better.
 */
private local_lookahead_tail    ::=
      // java_expression takes precedence over expansion_choices
      // but only if the construct starts with a "{"
      // JavaCC effectively prohibits e.g. LOOKAHEAD({...}, {...}), so we do the same
      INTEGER_LITERAL [ "," !("{") expansion_choices ]  [ "," braced_expression ]
    | !("{") expansion_choices  [ "," braced_expression ]
    | braced_expression

private braced_expression       ::=
    "{" java_expression "}"

non_terminal_expansion_unit     ::=
    identifier "(" java_expression_list ")" {pin=1 recoverWhile="#auto"}

parenthesized_expansion_unit    ::=
    "(" expansion_choices ")" occurrence_indicator?  {pin=1}

optional_expansion_unit         ::=
    "[" expansion_choices "]"
    {pin=1}

try_catch_expansion_unit        ::=
    "try" "{" [ expansion_choices ] "}"
    (catch_clause)*
    finally_clause?
    {pin="try"}

catch_clause                    ::=
    "catch" "(" java_name identifier ")" java_block

finally_clause                  ::=
    "finally" java_block

/* Regular expressions */
/* These contain regex elements and may not occur as expansions. */
/* When occurring as expansions, they're wrapped in a JccRegexExpansionUnit. */

/* Type hierarchy is

  JccRegularExpression
   |- JccLiteralRegularExpression           "foo"
   |- JccRefRegularExpression               <FOO>
   |- JccNamedRegularExpression             < name: regex_element >
   |- JccContainerRegularExpression         < regex_element >
   |- JccEofRegularExpression               <EOF>
*/


regular_expression              ::=
        literal_regular_expression
    |   eof_regular_expression
    // Pins try to match these in order to allow autocompletion
    // If       ("<" IDENT ":") -> named regex
    // Else if  ("<" IDENT)     -> reference (autocomplete)
    // Else if  "<"             -> inline regex
    |   named_regular_expression
    |   ref_regular_expression
    |   container_regular_expression

literal_regular_expression      ::=
    literal_regex_unit
    {methods=[unit="literal_regex_unit"]}

eof_regular_expression          ::=
    "<" "EOF" ">"

named_regular_expression        ::=
    "<" [ "#" ] identifier ":" complex_regex_choices ">"
    {pin=4}

ref_regular_expression          ::=
    token_reference_regex_unit
    {methods=[unit="token_reference_regex_unit" nameIdentifier="token_reference_regex_unit/identifier"]}

container_regular_expression    ::=
    "<" complex_regex_choices ">"
    {pin=1}

/* Regex elements. */
/* These are always contained within regexes, and are not equivalent. */

/* Type hierarchy is

   JccRegexElement
   |- JccRegexAlternativeElt             seq | seq | ...
   |- JccRegexSequenceElt                unit unit ...
   |- JccRegexUnit
      |- JccLiteralRegexUnit             "foo"
      |- JccTokenReferenceRegexUnit      <FOO>
      |- JccParenthesizedExpansionUnit   ( elt )
      |- JccCharacterListRegexUnit       ["a"-"z", ...]
 */

private complex_regex_choices   ::=
        regex_alternative_elt
    |   regex_sequence_elt

regex_alternative_elt           ::=
    regex_sequence_elt ( "|" regex_sequence_elt )+

regex_sequence_elt              ::=
    regex_unit+ {pin('.*')=1}

regex_unit                      ::=
        literal_regex_unit
    |   token_reference_regex_unit
    |   character_list_regex_unit
    |   parenthesized_regex_unit
    {recoverWhile="#auto"}

literal_regex_unit              ::=
    string_literal

token_reference_regex_unit      ::=
    "<" identifier ">"
    {pin=identifier}

parenthesized_regex_unit        ::=
    "(" complex_regex_choices ")" occurrence_indicator_or_range?
    {methods=[occurrence_indicator="occurrence_indicator_or_range"]}

character_list_regex_unit       ::=
    [ "~" ] "[" [ character_descriptor ( "," character_descriptor )* ] "]" {pin="["}

character_descriptor            ::=
    STRING_LITERAL [ "-" STRING_LITERAL ]
    {pin=1 recoverWhile="#auto"}

/* Occurrence indicators */

/* Type hierarchy is
   JccOccurrenceIndicatorOrRange
   |- JccRepetitionRange                 {1, 2}
   |- JccOccurrenceIndicator
      |- JccOneOrMore                    +
      |- JccZeroOrMore                   *
      |- JccZeroOrOne                    ?
 */

occurrence_indicator_or_range   ::= occurrence_indicator | repetition_range
occurrence_indicator            ::= one_or_more | zero_or_one | zero_or_more
one_or_more                     ::= "+"
zero_or_more                    ::= "*"
zero_or_one                     ::= "?"
repetition_range                ::= "{" INTEGER_LITERAL [ "," INTEGER_LITERAL ] "}" {pin=1}

// Meta and fake rules

private meta in_block                   ::= "{" <<param>> "}"
private meta in_parens                  ::= "(" <<param>> ")"
private meta comma_separated_list       ::= [ <<param>> ( ',' <<param>> )* ]

fake identifier_owner           ::= identifier {
    methods=[nameIdentifier="identifier"]
    implements="com.intellij.psi.PsiNameIdentifierOwner"
}

fake regular_expression_owner   ::= regular_expression {
    implements="identifier_owner"
}

fake non_terminal_production    ::= java_non_terminal_production_header [jjtree_node_descriptor] java_block? {
    methods=[
        header="java_non_terminal_production_header"
        nameIdentifier="java_non_terminal_production_header/identifier"
    ]
}

// marker interfaces
fake expansion                  ::=
fake expansion_sequence_or_unit ::=
fake regex_element              ::=
fake regex_like                 ::=
fake production_like            ::=
fake production                 ::=

// Some java grammar

identifier                      ::=    IDENT                {name="identifier" methods=[leaf="IDENT"]}
private string_literal          ::=    STRING_LITERAL       {name="string literal"}

boolean_literal                 ::=    "true" | "false"     {name="boolean literal"}

java_name                       ::=    identifier ("." identifier)* {pin=1}

java_return_type                ::=    "void" | java_type
java_type                       ::=    (PRIMITIVE_TYPE  ("[" "]")* | java_ref_type)
private java_ref_type           ::=    java_coi_type ("[" "]")* | PRIMITIVE_TYPE ("[" "]")+ // don't pin
private java_coi_type           ::=    java_name java_type_args?

private java_type_args          ::=    "<" [ java_type_arg ( ',' java_type_arg )* ] ">"
private java_type_arg           ::=    java_ref_type | java_wildcard
private java_wildcard           ::=    "?" (java_wildcard_bound)?               {pin=1 recoverWhile="#auto"}
private java_wildcard_bound     ::=    ("extends" | "super") java_ref_type      {pin=1 recoverWhile="#auto"}

java_access_modifier            ::=    [ "public" | "protected" | "private" ]

java_expression_list            ::=    <<comma_separated_list java_expression>>
private java_parameter_list     ::=   "(" [ java_formal_parameter [ ("," java_formal_parameter)* ] ] ")" {name = "parameter list"}
java_formal_parameter           ::=    java_type ["..."] identifier ("[" "]")* {pin=1 recoverWhile="#auto"}

// externals

java_compilation_unit               ::=     ext_java_compilation_unit
external ext_java_compilation_unit  ::=     parseJCompilationUnit

java_block                          ::=     "{" ext_java_block
external ext_java_block             ::=     parseJBlock

java_assignment_lhs                 ::=     ext_java_assignment_lhs
private ext_java_assignment_lhs     ::=     java_name  // FIXME
//external ext_java_assignment_lhs    ::=     parseJAssignmentLhs

java_expression                     ::=     ext_java_expression
external ext_java_expression        ::=     parseJExpression
