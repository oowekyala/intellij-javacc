plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.3.12'
    id 'org.jetbrains.kotlin.jvm' version "1.3.10" // TODO sync
    id "org.jetbrains.grammarkit" version "2018.2.2"
}

def KotlinVersion = "1.3.10"


apply plugin: 'org.jetbrains.grammarkit'


import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

group 'com.github.oowekyala'
version '1.0-BETA'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: KotlinVersion
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    // https://mvnrepository.com/artifact/net.java.dev.javacc/javacc
    compile group: 'net.java.dev.javacc', name: 'javacc', version: '7.0.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'io.kotlintest:kotlintest-runner-junit5:3.1.10'
    testCompile 'com.github.oowekyala:kt-tree-matchers:1.0'
    testCompile group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: KotlinVersion
    testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.1.11'

}

sourceSets {
    main {
        java {
            srcDirs "${buildDir}/gen"
            srcDirs 'src/main/kotlin'
            srcDirs 'src/main/java'
        }
    }
}

test {
    useJUnitPlatform()
}

task generateParser(type: GenerateParser) {
    source = "src/main/grammars/JavaCC.bnf"
    targetRoot = "${buildDir}/gen"
    pathToParser = '/com/github/oowekyala/ijcc/lang/parser/JavaccParser.java'
    pathToPsiRoot = '/com/github/oowekyala/ijcc/lang/psi'
    purgeOldFiles = true
}


task generateLexer(type: GenerateLexer) {
    source = "src/main/grammars/JavaCC.flex"
    targetDir = "${buildDir}/gen/com/github/oowekyala/ijcc/lang/lexer"
    targetClass = "JavaccLexer"
    purgeOldFiles = true
}

task overrideDefaultPsi {
    dependsOn(generateParser)
    doLast {
        String sourceRoot
        def psiInterfaces = { "${sourceRoot}${generateParser.pathToPsiRoot}" }
        def psiImpl = { "${sourceRoot}${generateParser.pathToPsiRoot}/impl" }

        def psiFiles = layout.files { file(psiInterfaces).listFiles() } + layout.files { file(psiImpl).listFiles() }

        sourceRoot = "src/main/kotlin" // Collect names without extension bc in this sourcetree they're .kt
        def userPsiFiles = psiFiles.collect().stream().map { it.name.take(it.name.lastIndexOf('.')) }.collect()

        sourceRoot = "${buildDir}/gen"
        def genPsiFileDups = psiFiles.filter { genFile -> // in this source tree they're .java
            return genFile.isFile() && userPsiFiles.any { it == genFile.name.take(genFile.name.lastIndexOf('.')) }
        }.collect()


        println "Detected ${genPsiFileDups.size()} generated PSI files overridden by sources in the main source tree:"
        genPsiFileDups.sort().each { println it.name }
        delete genPsiFileDups
        println "Deleted.\n"
    }
}

compileJava.dependsOn(overrideDefaultPsi, generateLexer)

compileKotlin {
    dependsOn(generateLexer, overrideDefaultPsi)

    kotlinOptions {
        freeCompilerArgs = ['-Xjvm-default=enable',]
        jvmTarget = "1.8"
    }

}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


runIde {
    jvmArgs '-Xmx2G'
}


intellij {
    version '2018.2.4'
}
patchPluginXml {
    changeNotes """Pre-release"""
    version version
}