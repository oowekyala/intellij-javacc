plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.3.12'
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
    id "ca.coglinc.javacc" version "2.4.0"
    id "org.jetbrains.grammarkit" version "2018.2.2"
}


apply plugin: 'org.jetbrains.grammarkit'

// import is optional to make task creation easier

import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

group 'com.github.oowekyala'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
    main {
        java {
            srcDirs "${buildDir}/generated/javacc"
            srcDirs "${buildDir}/gen"
            srcDirs 'src/main/java'
        }
    }
}


task generateParser(type: GenerateParser) {
    // source bnf file
    source = "src/main/grammars/JavaCC.bnf"

    // optional, task-specific root for the generated files. Default: none
    targetRoot = "${buildDir}/gen"

    // path to a parser file, relative to the targetRoot  
    pathToParser = '/com/github/oowekyala/ijcc/lang/parser/JavaccParser.java'

    // path to a directory with generated psi files, relative to the targetRoot 
    pathToPsiRoot = '/com/github/oowekyala/ijcc/lang/psi'

    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = true
}


task generateLexer(type: GenerateLexer) {
    // source flex file
    source = "src/main/grammars/JavaCC.flex"

    // target directory for lexer
    targetDir = "${buildDir}/gen/com/github/oowekyala/ijcc/lang/lexer"

    // target classname, target file will be targetDir/targetClass.java
    targetClass = "JavaccLexer"

    // optional, path to the task-specific skeleton file. Default: none
    // skeleton = '/some/specific/skeleton'

    // if set, plugin will remove a lexer output file before generating new one. Default: false
    purgeOldFiles = true
}



def generatedPackage = 'com/github/oowekyala/gark87/idea/javacc/generated'
def javaccCommonOutput = file(project.buildDir.absolutePath + "/generated/javacc/${generatedPackage}")

compileJjtree {
    outputDirectory = javaccCommonOutput
}

compileJavacc {
    inputDirectory = javaccCommonOutput
    outputDirectory = javaccCommonOutput
}

task fixJavaccOutput(type: Delete) {
    dependsOn(compileJavacc)
    delete javaccCommonOutput.toPath().resolve("SimpleNode.java").toFile()
}


compileKotlin {
    dependsOn(fixJavaccOutput, generateParser)

    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}




intellij {
    version '2018.2.4'
}
patchPluginXml {
    changeNotes """
      Add change notes here.<br>
      <em>most HTML tags may be used</em>"""
}